{"version":3,"file":"senna.js","sources":["src/globals/globals.js","node_modules/metal/src/coreNamed.js","node_modules/metal/src/core.js","node_modules/metal/src/array/array.js","node_modules/metal/src/async/async.js","node_modules/metal/src/disposable/Disposable.js","node_modules/metal/src/object/object.js","node_modules/metal/src/string/string.js","node_modules/metal-uri/src/parseFromAnchor.js","node_modules/metal-uri/src/parse.js","node_modules/metal-structs/src/MultiMap.js","node_modules/metal-structs/src/TreeNode.js","node_modules/metal-uri/src/Uri.js","src/utils/utils.js","src/app/dataAttributes.js","node_modules/metal-dom/src/domData.js","node_modules/metal-events/src/EventHandle.js","node_modules/metal-events/src/EventEmitter.js","node_modules/metal-events/src/EventEmitterProxy.js","node_modules/metal-events/src/EventHandler.js","node_modules/metal-dom/src/DomDelegatedEventHandle.js","node_modules/metal-dom/src/DomEventHandle.js","node_modules/metal-dom/src/domNamed.js","node_modules/metal-dom/src/dom.js","node_modules/metal-dom/src/DomEventEmitterProxy.js","node_modules/metal-dom/src/features.js","node_modules/metal-dom/src/globalEval.js","node_modules/metal-dom/src/globalEvalStyles.js","node_modules/metal-dom/src/events.js","node_modules/metal-promise/src/promise/Promise.js","node_modules/metal-debounce/src/debounce.js","node_modules/metal-path-parser/src/pathParser.js","src/route/Route.js","src/cacheable/Cacheable.js","src/screen/Screen.js","src/surface/Surface.js","src/app/App.js","node_modules/metal-ajax/src/Ajax.js","src/errors/errors.js","node_modules/metal-useragent/src/UA.js","src/screen/RequestScreen.js","src/screen/HtmlScreen.js","src/app/AppDataAttributeHandler.js","src/app/dataAttributeHandler.js"],"sourcesContent":["var globals = globals || {};\n\nif (typeof window !== 'undefined') {\n\tglobals.window = window;\n}\n\nif (typeof document !== 'undefined') {\n\tglobals.document = document;\n}\n\nexport default globals;\n","'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${((Math.random() * 1e9) >>> 0)}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} opt_data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(opt_data = {}) {\n\tcompatibilityModeData_ = opt_data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} opt_mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n */\nexport function getStaticProperty(ctor, propertyName, opt_mergeFn) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\tlet merged = ctor.hasOwnProperty(propertyName) ? ctor[propertyName] : null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tconst mergeFn = opt_mergeFn || getFirstTruthy_;\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `opt_object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} opt_object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} opt_noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function getUid(opt_object, opt_noInheritance) {\n\tif (opt_object) {\n\t\tlet id = opt_object[UID_PROPERTY];\n\t\tif (opt_noInheritance && !opt_object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (opt_object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} opt_returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(opt_returnValue) {\n\treturn opt_returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn type === 'object' && val !== null || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport { core };\nexport * from './coreNamed';\n","'use strict';\n\nimport { isDef } from '../core';\n\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1 === arr2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>} opt_output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, opt_output) {\n\t\tvar output = opt_output || [];\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tconst i = arr.indexOf(obj);\n\t\tlet rv;\n\t\tif ( (rv = i >= 0) ) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} opt_end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, opt_end) {\n\t\tconst sliced = [];\n\t\tconst end = isDef(opt_end) ? opt_end : arr.length;\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/*!\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nconst async = {};\n\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} opt_context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, opt_context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(\n\t\tnew async.run.WorkItem_(callback, opt_context));\n};\n\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tconst workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (let i = 0; i < workItems.length; i++) {\n\t\t\tconst workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} opt_context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, opt_context) {\n\tlet cb = callback;\n\tif (opt_context) {\n\t\tcb = callback.bind(opt_context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Introduced and currently only supported by IE10.\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof setImmediate === 'function') {\n\t\tsetImmediate(cb);\n\t\treturn;\n\t}\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tlet Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (typeof Channel === 'undefined' && typeof window !== 'undefined' &&\n\t\twindow.postMessage && window.addEventListener) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tconst iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tconst win = iframe.contentWindow;\n\t\t\tconst doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tconst message = 'callImmediate' + Math.random();\n\t\t\tconst origin = win.location.protocol + '//' + win.location.host;\n\t\t\tconst onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tconst channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tlet head = {};\n\t\tlet tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tconst cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (typeof document !== 'undefined' && 'onreadystatechange' in\n\t\tdocument.createElement('script')) {\n\t\treturn function(cb) {\n\t\t\tlet script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(opt_returnValue) {\n\treturn opt_returnValue;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target) {\n\t\tlet key, source;\n\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\tsource = arguments[i];\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} opt_obj The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, opt_obj) {\n\t\tconst scope = opt_obj || window;\n\t\tconst parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tconst mappedObj = {};\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst keys1 = Object.keys(obj1);\n\t\tconst keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t\tconst test1 = String(str1).toLowerCase();\n\t\tconst test2 = String(str2).toLowerCase();\n\n\t\tif (test1 < test2) {\n\t\t\treturn -1;\n\t\t} else if (test1 === test2) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str.replace(/[\\t\\r\\n ]+/g, ' ').replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t* Escapes characters in the string that are not safe to use in a RegExp.\n\t* @param {*} str The string to escape. If not a string, it will be casted\n\t*     to one.\n\t* @return {string} A RegExp safe, escaped copy of {@code s}.\n\t*/\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08');\n\t}\n\n\t/**\n\t* Returns a string with at least 64-bits of randomness.\n\t* @return {string} A random string, e.g. sn1s7vb4gcic.\n\t*/\n\tstatic getRandomString() {\n\t\tconst x = 2147483648;\n\t\treturn Math.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tlet hash = 0;\n\t\tfor (let i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\n/**\n * Parses the given uri string into an object.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parseFromAnchor(opt_uri) {\n\tvar link = document.createElement('a');\n\tlink.href = opt_uri;\n\treturn {\n\t\thash: link.hash,\n\t\thostname: link.hostname,\n\t\tpassword: link.password,\n\t\tpathname: link.pathname[0] === '/' ? link.pathname : '/' + link.pathname,\n\t\tport: link.port,\n\t\tprotocol: link.protocol,\n\t\tsearch: link.search,\n\t\tusername: link.username\n\t};\n}\n\nexport default parseFromAnchor;\n","'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\treturn new URL(opt_uri);\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Generic tree node data structure with arbitrary number of child nodes.\n * @param {V} value Value.\n * @constructor\n */\nclass TreeNode {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * The value.\n\t\t * @private {V}\n\t\t */\n\t\tthis.value_ = value;\n\n\t\t/**\n\t\t * Reference to the parent node or null if it has no parent.\n\t\t * @private {TreeNode}\n\t\t */\n\t\tthis.parent_ = null;\n\n\t\t/**\n\t\t * Child nodes or null in case of leaf node.\n\t\t * @private {Array<!TreeNode>}\n\t\t */\n\t\tthis.children_ = null;\n\t}\n\n\t/**\n\t * Appends a child node to this node.\n\t * @param {!TreeNode} child Orphan child node.\n\t */\n\taddChild(child) {\n\t\tassertChildHasNoParent(child);\n\t\tchild.setParent(this);\n\t\tthis.children_ = this.children_ || [];\n\t\tthis.children_.push(child);\n\t}\n\n\t/**\n\t * Tells whether this node is the ancestor of the given node.\n\t * @param {!TreeNode} node A node.\n\t * @return {boolean} Whether this node is the ancestor of {@code node}.\n\t */\n\tcontains(node) {\n\t\tlet current = node.getParent();\n\t\twhile (current) {\n\t\t\tif (current === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrent = current.getParent();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {!Array<TreeNode>} All ancestor nodes in bottom-up order.\n\t */\n\tgetAncestors() {\n\t\tlet ancestors = [];\n\t\tlet node = this.getParent();\n\t\twhile (node) {\n\t\t\tancestors.push(node);\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Gets the child node of this node at the given index.\n\t * @param {number} index Child index.\n\t * @return {?TreeNode} The node at the given index\n\t * or null if not found.\n\t */\n\tgetChildAt(index) {\n\t\treturn this.getChildren()[index] || null;\n\t}\n\n\t/**\n\t * @return {?Array<!TreeNode>} Child nodes or null in case of leaf node.\n\t */\n\tgetChildren() {\n\t\treturn this.children_ || TreeNode.EMPTY_ARRAY;\n\t}\n\n\t/**\n\t * @return {number} The number of children.\n\t */\n\tgetChildCount() {\n\t\treturn this.getChildren().length;\n\t}\n\n\t/**\n\t * @return {number} The number of ancestors of the node.\n\t */\n\tgetDepth() {\n\t\tlet depth = 0;\n\t\tlet node = this;\n\t\twhile (node.getParent()) {\n\t\t\tdepth++;\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn depth;\n\t}\n\n\t/**\n\t * @return {?TreeNode} Parent node or null if it has no parent.\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * @return {!TreeNode} The root of the tree structure, i.e. the farthest\n\t * ancestor of the node or the node itself if it has no parents.\n\t */\n\tgetRoot() {\n\t\tlet root = this;\n\t\twhile (root.getParent()) {\n\t\t\troot = root.getParent();\n\t\t}\n\t\treturn root;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return {V} The value.\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * @return {boolean} Whether the node is a leaf node.\n\t */\n\tisLeaf() {\n\t\treturn !this.getChildCount();\n\t}\n\n\t/**\n\t * Removes the given child node of this node.\n\t * @param {TreeNode} child The node to remove.\n\t * @return {TreeNode} The removed node if any, null otherwise.\n\t */\n\tremoveChild(child) {\n\t\tif (array.remove(this.getChildren(), child)) {\n\t\t\treturn child;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the parent node of this node. The callers must ensure that the\n\t * parent node and only that has this node among its children.\n\t * @param {TreeNode} parent The parent to set. If null, the node will be\n\t * detached from the tree.\n\t * @protected\n\t */\n\tsetParent(parent) {\n\t\tthis.parent_ = parent;\n\t}\n\n\t/**\n\t * Traverses the subtree. The first callback starts with this node,\n\t * and visits the descendant nodes depth-first, in preorder.\n\t * The second callback, starts with deepest child then visits\n\t * the ancestor nodes depth-first, in postorder. E.g.\n\t *\n\t *  \t A\n\t *    / \\\n\t *   B   C\n\t *  /   / \\\n\t * D   E   F\n\t *\n\t * preorder -> ['A', 'B', 'D', 'C', 'E', 'F']\n\t * postorder -> ['D', 'B', 'E', 'F', 'C', 'A']\n\t *\n\t * @param {function=} opt_preorderFn The callback to execute when visiting a node.\n\t * @param {function=} opt_postorderFn The callback to execute before leaving a node.\n\t */\n\ttraverse(opt_preorderFn, opt_postorderFn) {\n\t\tif (opt_preorderFn) {\n\t\t\topt_preorderFn(this);\n\t\t}\n\t\tthis.getChildren().forEach((child) => child.traverse(opt_preorderFn, opt_postorderFn));\n\t\tif (opt_postorderFn) {\n\t\t\topt_postorderFn(this);\n\t\t}\n\t}\n\n}\n\n/**\n * Constant for empty array to avoid unnecessary allocations.\n * @private\n */\nTreeNode.EMPTY_ARRAY = [];\n\n/**\n * Asserts that child has no parent.\n * @param {TreeNode} child A child.\n * @private\n */\nconst assertChildHasNoParent = function(child) {\n\tif (child.getParent()) {\n\t\tthrow new Error('Cannot add child with parent.');\n\t}\n};\n\nexport default TreeNode;\n","'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Normalizes the parsed object to be in the expected standard.\n\t * @param {!Object}\n\t */\n\tstatic normalizeObject(parsed) {\n\t\tvar length = parsed.pathname ? parsed.pathname.length : 0;\n\t\tif (length > 1 && parsed.pathname[length - 1] === '/') {\n\t\t\tparsed.pathname = parsed.pathname.substr(0, length - 1);\n\t\t}\n\t\treturn parsed;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn Uri.normalizeObject(parseFn_(opt_uri));\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nUri.DEFAULT_PROTOCOL = 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\n/**\n * A collection of static utility functions.\n * @const\n */\nclass utils {\n\n\t/**\n\t * Copies attributes form source node to target node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic copyNodeAttributes(source, target) {\n\t\tArray.prototype.slice.call(source.attributes).forEach((attribute) => target.setAttribute(attribute.name, attribute.value));\n\t}\n\n\t/**\n\t * Gets the current browser path including hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPath() {\n\t\treturn this.getCurrentBrowserPathWithoutHash() + globals.window.location.hash;\n\t}\n\n\t/**\n\t * Gets the current browser path excluding hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPathWithoutHash() {\n\t\treturn globals.window.location.pathname + globals.window.location.search;\n\t}\n\n\t/**\n\t * Extracts the path part of an url.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPath(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch() + uri.getHash();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHash(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang and query search.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHashAndSearch(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname();\n\t}\n\n\t/**\n\t * Checks if url is in the same browser current url excluding the hashbang.\n\t * @param  {!string} url\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isCurrentBrowserPath(url) {\n\t\tif (url) {\n\t\t\tconst currentBrowserPath = this.getCurrentBrowserPathWithoutHash();\n\t\t\t// the getUrlPath will create a Uri and will normalize the path and\n\t\t\t// remove the trailling '/' for properly comparing paths.\n\t\t\treturn utils.getUrlPathWithoutHash(url) === this.getUrlPath(currentBrowserPath);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns true if HTML5 History api is supported.\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isHtml5HistorySupported() {\n\t\treturn !!(globals.window.history && globals.window.history.pushState);\n\t}\n\n\t/**\n\t * Removes all attributes form node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic clearNodeAttributes(node) {\n\t\tArray.prototype.slice.call(node.attributes).forEach((attribute) => node.removeAttribute(attribute.name));\n\t}\n\n}\n\nexport default utils;\n","'use strict';\n\nexport default {\n\tbasePath: 'data-senna-base-path',\n\tlinkSelector: 'data-senna-link-selector',\n\tloadingCssClass: 'data-senna-loading-css-class',\n\tsenna: 'data-senna',\n\tdispatch: 'data-senna-dispatch',\n\tsurface: 'data-senna-surface',\n\tupdateScrollPosition: 'data-senna-update-scroll-position'\n};","'use strict';\n\nconst METAL_DATA = '__metal_data__';\n\nclass domData {\n\t/**\n\t * Gets Metal.js's data for the given element.\n\t * @param {!Element} element\n\t * @param {string=} opt_name Optional property from the data to be returned.\n\t * @param {*} opt_initialVal Optinal value to the set the requested property\n\t *     to if it doesn't exist yet in the data.\n\t * @return {!Object}\n\t */\n\tstatic get(element, opt_name, opt_initialVal) {\n\t\tif (!element[METAL_DATA]) {\n\t\t\telement[METAL_DATA] = {};\n\t\t}\n\t\tif (!opt_name) {\n\t\t\treturn element[METAL_DATA];\n\t\t}\n\t\tif (!element[METAL_DATA][opt_name] && opt_initialVal) {\n\t\t\telement[METAL_DATA][opt_name] = opt_initialVal;\n\t\t}\n\t\treturn element[METAL_DATA][opt_name];\n\t}\n\n\t/**\n\t * Checks if the given element has data stored in it.\n\t * @param {!Element} element\n\t * @return {boolean}\n\t */\n\tstatic has(element) {\n\t\treturn !!element[METAL_DATA];\n\t}\n}\n\nexport default domData;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n * @param {string} event The name of the event that was subscribed to.\n * @param {!Function} listener The listener subscribed to the event.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n","'use strict';\n\nimport { array, Disposable, isFunction, isString } from 'metal';\nimport EventHandle from './EventHandle';\n\nconst singleArray_ = [0];\n\n/**\n * EventEmitter utility.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitter extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds event listeners scoped by event type.\n\t\t * @type {Object<string, !Array<!function()>>}\n\t\t * @protected\n\t\t */\n\t\tthis.events_ = null;\n\n\t\t/**\n\t\t * Handlers that are triggered when an event is listened to.\n\t\t * @type {Array}\n\t\t */\n\t\tthis.listenerHandlers_ = null;\n\n\t\t/**\n\t\t * Configuration option which determines if an event facade should be sent\n\t\t * as a param of listeners when emitting events. If set to true, the facade\n\t\t * will be passed as the first argument of the listener.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.shouldUseFacade_ = false;\n\t}\n\n\t/**\n\t * Adds a handler to given holder variable. If the holder doesn't have a\n\t * value yet, it will receive the handler directly. If the holder is an array,\n\t * the value will just be added to it. Otherwise, the holder will be set to a\n\t * new array containing its previous value plus the new handler.\n\t * @param {*} holder\n\t * @param {!function()|Object} handler\n\t * @return {*} The holder's new value.\n\t * @protected\n\t */\n\taddHandler_(holder, handler) {\n\t\tif (!holder) {\n\t\t\tholder = handler;\n\t\t} else {\n\t\t\tif (!Array.isArray(holder)) {\n\t\t\t\tholder = [holder];\n\t\t\t}\n\t\t\tholder.push(handler);\n\t\t}\n\t\treturn holder;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\taddListener(event, listener, opt_default) {\n\t\tthis.validateListener_(listener);\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.addSingleListener_(events[i], listener, opt_default);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for a single event.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {boolean} opt_default Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t * @param {Function=} opt_origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t */\n\taddSingleListener_(event, listener, opt_default, opt_origin) {\n\t\tthis.runListenerHandlers_(event);\n\t\tif (opt_default || opt_origin) {\n\t\t\tlistener = {\n\t\t\t\tdefault: opt_default,\n\t\t\t\tfn: listener,\n\t\t\t\torigin: opt_origin\n\t\t\t};\n\t\t}\n\t\tthis.events_ = this.events_ || {};\n\t\tthis.events_[event] = this.addHandler_(this.events_[event], listener);\n\t}\n\n\t/**\n\t * Builds facade for the given event.\n\t * @param {string} event\n\t * @return {Object}\n\t * @protected\n\t */\n\tbuildFacade_(event) {\n\t\tif (this.getShouldUseFacade()) {\n\t\t\tconst facade = {\n\t\t\t\tpreventDefault: function() {\n\t\t\t\t\tfacade.preventedDefault = true;\n\t\t\t\t},\n\t\t\t\ttarget: this,\n\t\t\t\ttype: event\n\t\t\t};\n\t\t\treturn facade;\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.events_ = null;\n\t}\n\n\t/**\n\t * Execute each of the listeners in order with the supplied arguments.\n\t * @param {string} event\n\t * @param {*} opt_args [arg1], [arg2], [...]\n\t * @return {boolean} Returns true if event had listeners, false otherwise.\n\t */\n\temit(event) {\n\t\tconst listeners = this.getRawListeners_(event);\n\t\tif (listeners.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst args = array.slice(arguments, 1);\n\t\tthis.runListeners_(listeners, args, this.buildFacade_(event));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the listener objects for the given event, if there are any.\n\t * @param {string} event\n\t * @return {!Array}\n\t * @protected\n\t */\n\tgetRawListeners_(event) {\n\t\tconst directListeners = toArray(this.events_ && this.events_[event]);\n\t\treturn directListeners.concat(toArray(this.events_ && this.events_['*']));\n\t}\n\n\t/**\n\t * Gets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @return {boolean}\n\t */\n\tgetShouldUseFacade() {\n\t\treturn this.shouldUseFacade_;\n\t}\n\n\t/**\n\t * Returns an array of listeners for the specified event.\n\t * @param {string} event\n\t * @return {Array} Array of listeners.\n\t */\n\tlisteners(event) {\n\t\treturn this.getRawListeners_(event).map(\n\t\t\tlistener => listener.fn ? listener.fn : listener\n\t\t);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for the\n\t * events. After each event is triggered the specified amount of times, the\n\t * listener is removed for it.\n\t * @param {!(Array|string)} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tmany(event, amount, listener) {\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.many_(events[i], amount, listener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for a single\n\t * event. After the event is triggered the specified amount of times, the\n\t * listener is removed.\n\t * @param {string} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @protected\n\t */\n\tmany_(event, amount, listener) {\n\t\tconst self = this;\n\n\t\tif (amount <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction handlerInternal() {\n\t\t\tif (--amount === 0) {\n\t\t\t\tself.removeListener(event, handlerInternal);\n\t\t\t}\n\t\t\tlistener.apply(self, arguments);\n\t\t}\n\n\t\tself.addSingleListener_(event, handlerInternal, false, listener);\n\t}\n\n\t/**\n\t * Checks if a listener object matches the given listener function. To match,\n\t * it needs to either point to that listener or have it as its origin.\n\t * @param {!Object} listenerObj\n\t * @param {!Function} listener\n\t * @return {boolean}\n\t * @protected\n\t */\n\tmatchesListener_(listenerObj, listener) {\n\t\tconst fn = listenerObj.fn || listenerObj;\n\t\treturn fn === listener ||\n\t\t\t(listenerObj.origin && listenerObj.origin === listener);\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\toff(event, listener) {\n\t\tthis.validateListener_(listener);\n\t\tif (!this.events_) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.events_[events[i]] = this.removeMatchingListenerObjs_(\n\t\t\t\ttoArray(this.events_[events[i]]),\n\t\t\t\tlistener\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\ton() {\n\t\treturn this.addListener.apply(this, arguments);\n\t}\n\n\t/**\n\t * Adds handler that gets triggered when an event is listened to on this\n\t * instance.\n\t * @param {!function()}\n\t */\n\tonListener(handler) {\n\t\tthis.listenerHandlers_ = this.addHandler_(this.listenerHandlers_, handler);\n\t}\n\n\t/**\n\t * Adds a one time listener for the events. This listener is invoked only the\n\t * next time each event is fired, after which it is removed.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tonce(events, listener) {\n\t\treturn this.many(events, 1, listener);\n\t}\n\n\t/**\n\t * Removes all listeners, or those of the specified events. It's not a good\n\t * idea to remove listeners that were added elsewhere in the code,\n\t * especially when it's on an emitter that you didn't create.\n\t * @param {(Array|string)=} opt_events\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveAllListeners(opt_events) {\n\t\tif (this.events_) {\n\t\t\tif (opt_events) {\n\t\t\t\tconst events = this.toEventsArray_(opt_events);\n\t\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\t\tthis.events_[events[i]] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.events_ = null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all listener objects from the given array that match the given\n\t * listener function.\n\t * @param {Array.<Object>} listenerObjs\n\t * @param {!Function} listener\n\t * @return {Array.<Object>|Object} The new listeners array for this event.\n\t * @protected\n\t */\n\tremoveMatchingListenerObjs_(listenerObjs, listener) {\n\t\tconst finalListeners = [];\n\t\tfor (let i = 0; i < listenerObjs.length; i++) {\n\t\t\tif (!this.matchesListener_(listenerObjs[i], listener)) {\n\t\t\t\tfinalListeners.push(listenerObjs[i]);\n\t\t\t}\n\t\t}\n\t\treturn finalListeners.length > 0 ? finalListeners : null;\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveListener() {\n\t\treturn this.off.apply(this, arguments);\n\t}\n\n\t/**\n\t * Runs the handlers when an event is listened to.\n\t * @param {string} event\n\t * @protected\n\t */\n\trunListenerHandlers_(event) {\n\t\tlet handlers = this.listenerHandlers_;\n\t\tif (handlers) {\n\t\t\thandlers = toArray(handlers);\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i](event);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given listeners.\n\t * @param {!Array} listeners\n\t * @param {!Array} args\n\t * @param (Object) facade\n\t * @protected\n\t */\n\trunListeners_(listeners, args, facade) {\n\t\tif (facade) {\n\t\t\targs.push(facade);\n\t\t}\n\n\t\tconst defaultListeners = [];\n\t\tfor (let i = 0; i < listeners.length; i++) {\n\t\t\tconst listener = listeners[i].fn || listeners[i];\n\t\t\tif (listeners[i].default) {\n\t\t\t\tdefaultListeners.push(listener);\n\t\t\t} else {\n\t\t\t\tlistener.apply(this, args);\n\t\t\t}\n\t\t}\n\t\tif (!facade || !facade.preventedDefault) {\n\t\t\tfor (let j = 0; j < defaultListeners.length; j++) {\n\t\t\t\tdefaultListeners[j].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @param {boolean} shouldUseFacade\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tsetShouldUseFacade(shouldUseFacade) {\n\t\tthis.shouldUseFacade_ = shouldUseFacade;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the parameter to an array if only one event is given. Reuses the\n\t * same array each time this conversion is done, to avoid using more memory\n\t * than necessary.\n\t * @param  {!(Array|string)} events\n\t * @return {!Array}\n\t * @protected\n\t */\n\ttoEventsArray_(events) {\n\t\tif (isString(events)) {\n\t\t\tsingleArray_[0] = events;\n\t\t\tevents = singleArray_;\n\t\t}\n\t\treturn events;\n\t}\n\n\t/**\n\t * Checks if the given listener is valid, throwing an exception when it's not.\n\t * @param  {*} listener\n\t * @protected\n\t */\n\tvalidateListener_(listener) {\n\t\tif (!isFunction(listener)) {\n\t\t\tthrow new TypeError('Listener must be a function');\n\t\t}\n\t}\n}\n\nfunction toArray(val) {\n\tval = val || [];\n\treturn Array.isArray(val) ? val : [val];\n}\n\nexport default EventEmitter;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @param {EventEmitter} originEmitter Events originated on this emitter\n *   will be fired for the target emitter's listeners as well.\n * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n *   will also be triggered when the event is fired by the origin emitter.\n * @param {Object} opt_blacklist Optional blacklist of events that should not be\n *   proxied.\n * @constructor\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\tconstructor(originEmitter, targetEmitter, opt_blacklist, opt_whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = opt_blacklist;\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * A list of events that are pending to be listened by an actual origin\n\t\t * emitter. Events are stored here when the origin doesn't exist, so they\n\t\t * can be set on a new origin when one is set.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.pendingEvents_ = null;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object<string, !EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = null;\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = opt_whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t */\n\taddListener_(event, listener) {\n\t\treturn this.originEmitter_.on(event, listener);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListeners_();\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event type on the target emitter.\n\t * @protected\n\t */\n\temitOnTarget_() {\n\t\tthis.targetEmitter_.emit.apply(this.targetEmitter_, arguments);\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent(event) {\n\t\tif (this.shouldProxyEvent_(event)) {\n\t\t\tthis.tryToAddListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for all events.\n\t * @protected\n\t */\n\tremoveListeners_() {\n\t\tif (this.proxiedEvents_) {\n\t\t\tconst events = Object.keys(this.proxiedEvents_);\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tthis.proxiedEvents_[events[i]].removeListener();\n\t\t\t}\n\t\t\tthis.proxiedEvents_ = null;\n\t\t}\n\t\tthis.pendingEvents_ = null;\n\t}\n\n\t/**\n\t * Changes the origin emitter. This automatically detaches any events that\n\t * were already being proxied from the previous emitter, and starts proxying\n\t * them on the new emitter instead.\n\t * @param {!EventEmitter} originEmitter\n\t */\n\tsetOriginEmitter(originEmitter) {\n\t\tconst events = this.originEmitter_ && this.proxiedEvents_ ?\n\t\t\tObject.keys(this.proxiedEvents_) :\n\t\t\tthis.pendingEvents_;\n\t\tthis.originEmitter_ = originEmitter;\n\t\tif (events) {\n\t\t\tthis.removeListeners_();\n\t\t\tevents.forEach(event => this.proxyEvent(event));\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_ && this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_ || !this.proxiedEvents_[event];\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.onListener(this.proxyEvent.bind(this));\n\t}\n\n\t/**\n\t * Adds a listener to the origin emitter, if it exists. Otherwise, stores\n\t * the pending listener so it can be used on a future origin emitter.\n\t * @param {string} event\n\t * @protected\n\t */\n\ttryToAddListener_(event) {\n\t\tif (this.originEmitter_) {\n\t\t\tthis.proxiedEvents_ = this.proxiedEvents_ || {};\n\t\t\tthis.proxiedEvents_[event] = this.addListener_(\n\t\t\t\tevent,\n\t\t\t\tthis.emitOnTarget_.bind(this, event)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pendingEvents_ = this.pendingEvents_ || [];\n\t\t\tthis.pendingEvents_.push(event);\n\t\t}\n\t}\n}\n\nexport default EventEmitterProxy;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @constructor\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd() {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(arguments[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n","'use strict';\n\nimport { array, isString } from 'metal';\nimport domData from './domData';\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom delegated events\n * (only the ones that receive a target element, not a selector string).\n * @extends {EventHandle}\n */\nclass DomDelegatedEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomDelegatedEventHandle`.\n\t * @param {!Event} emitter Element the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {string=} opt_selector An optional selector used when delegating\n\t *     the event.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_selector) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.selector_ = opt_selector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tconst delegating = domData.get(this.emitter_, 'delegating', {});\n\t\tconst listeners = domData.get(this.emitter_, 'listeners', {});\n\t\tconst selector = this.selector_;\n\t\tconst arr = isString(selector) ? delegating[this.event_].selectors : listeners;\n\t\tconst key = isString(selector) ? selector : this.event_;\n\n\t\tarray.remove(arr[key] || [], this.listener_);\n\t\tif (arr[key] && arr[key].length === 0) {\n\t\t\tdelete arr[key];\n\t\t}\n\t}\n}\n\nexport default DomDelegatedEventHandle;\n","'use strict';\n\nimport { EventHandle } from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} opt_capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, opt_capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = opt_capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(this.event_, this.listener_, this.capture_);\n\t}\n}\n\nexport default DomEventHandle;\n","'use strict';\n\nimport { isDef, isDocument, isDocumentFragment, isElement, isObject, isString, object } from 'metal';\nimport domData from './domData';\nimport DomDelegatedEventHandle from './DomDelegatedEventHandle';\nimport DomEventHandle from './DomEventHandle';\n\nconst elementsByTag_ = {};\nconst supportCache_ = {};\nexport const customEvents = {};\n\nconst LAST_CONTAINER = '__metal_last_container__';\nconst USE_CAPTURE = {\n\tblur: true,\n\terror: true,\n\tfocus: true,\n\tinvalid: true,\n\tload: true,\n\tscroll: true\n};\n\n/**\n * Adds the requested CSS classes to an element.\n * @param {!Element|!Nodelist} elements The element or elements to add CSS classes to.\n * @param {string} classes CSS classes to add.\n */\nexport function addClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\taddClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\taddClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Adds the requested CSS classes to an element using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.add(className);\n\t\t}\n\t});\n}\n\n/**\n * Adds the requested CSS classes to an element without using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithoutNative_(element, classes) {\n\tconst elementClassName = ` ${element.className} `;\n\tlet classesToAppend = '';\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = classes[i];\n\n\t\tif (elementClassName.indexOf(` ${className} `) === -1) {\n\t\t\tclassesToAppend += ` ${className}`;\n\t\t}\n\t}\n\n\tif (classesToAppend) {\n\t\telement.className = element.className + classesToAppend;\n\t}\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate.\n * @param {!Element} element\n * @param {string} eventName\n * @param {!function()} listener\n * @private\n */\nfunction addElementListener_(element, eventName, listener) {\n\taddToArr_(domData.get(element, 'listeners', {}), eventName, listener);\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate\n * selectors.\n * @param {!Element} element\n * @param {string} eventName\n * @param {string} selector\n * @param {!function()} listener\n * @private\n */\nfunction addSelectorListener_(element, eventName, selector, listener) {\n\tconst delegatingData = domData.get(element, 'delegating', {});\n\taddToArr_(delegatingData[eventName].selectors, selector, listener);\n}\n\n/**\n * Adds a value to an array inside an object, creating it first if it doesn't\n * yet exist.\n * @param {!Array} arr\n * @param {string} key\n * @param {*} value\n * @private\n */\nfunction addToArr_(arr, key, value) {\n\tif (!arr[key]) {\n\t\tarr[key] = [];\n\t}\n\tarr[key].push(value);\n}\n\n/**\n * Attaches a delegate listener, unless there's already one attached.\n * @param {!Element} element\n * @param {string} eventName\n * @private\n */\nfunction attachDelegateEvent_(element, eventName) {\n\tlet delegatingData = domData.get(element, 'delegating', {});\n\tif (!delegatingData[eventName]) {\n\t\tdelegatingData[eventName] = {\n\t\t\thandle: on(\n\t\t\t\telement,\n\t\t\t\teventName,\n\t\t\t\thandleDelegateEvent_,\n\t\t\t\t!!USE_CAPTURE[eventName]\n\t\t\t),\n\t\t\tselectors: {}\n\t\t};\n\t}\n}\n\n/**\n * Gets the closest element up the tree from the given element (including\n * itself) that matches the specified selector, or null if none match.\n * @param {Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function closest(element, selector) {\n\twhile (element && !match(element, selector)) {\n\t\telement = element.parentNode;\n\t}\n\treturn element;\n}\n\n/**\n * Appends a child node with text or other nodes to a parent node. If\n * child is a HTML string it will be automatically converted to a document\n * fragment before appending it to the parent.\n * @param {!Element} parent The node to append nodes to.\n * @param {!(Element|NodeList|string)} child The thing to append to the parent.\n * @return {!Element} The appended child.\n */\nexport function append(parent, child) {\n\tif (isString(child)) {\n\t\tchild = buildFragment(child);\n\t}\n\tif (child instanceof NodeList) {\n\t\tconst childArr = Array.prototype.slice.call(child);\n\t\tfor (let i = 0; i < childArr.length; i++) {\n\t\t\tparent.appendChild(childArr[i]);\n\t\t}\n\t} else {\n\t\tparent.appendChild(child);\n\t}\n\treturn child;\n}\n\n/**\n * Helper for converting a HTML string into a document fragment.\n * @param {string} htmlString The HTML string to convert.\n * @return {!Element} The resulting document fragment.\n */\nexport function buildFragment(htmlString) {\n\tconst tempDiv = document.createElement('div');\n\ttempDiv.innerHTML = `<br>${htmlString}`;\n\ttempDiv.removeChild(tempDiv.firstChild);\n\n\tconst fragment = document.createDocumentFragment();\n\twhile (tempDiv.firstChild) {\n\t\tfragment.appendChild(tempDiv.firstChild);\n\t}\n\treturn fragment;\n}\n\n/**\n * Checks if the first element contains the second one.\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {boolean}\n */\nexport function contains(element1, element2) {\n\tif (isDocument(element1)) {\n\t\t// document.contains is not defined on IE9, so call it on documentElement instead.\n\t\treturn element1.documentElement.contains(element2);\n\t} else {\n\t\treturn element1.contains(element2);\n\t}\n}\n\n/**\n * Listens to the specified event on the given DOM element, but only calls the\n * given callback listener when it's triggered by elements that match the\n * given selector or target element.\n * @param {!Element} element The DOM element the event should be listened on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!Element|string} selectorOrTarget Either an element or css selector\n *     that should match the event for the listener to be triggered.\n * @param {!function(!Object)} callback Function to be called when the event\n *     is triggered. It will receive the normalized event object.\n * @param {boolean=} opt_default Optional flag indicating if this is a default\n *     listener. That means that it would only be executed after all non\n *     default listeners, and only if the event isn't prevented via\n *     `preventDefault`.\n * @return {!EventHandle} Can be used to remove the listener.\n */\nexport function delegate(element, eventName, selectorOrTarget, callback, opt_default) {\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.delegate) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\n\tif (opt_default) {\n\t\t// Wrap callback so we don't set property directly on it.\n\t\tcallback = callback.bind();\n\t\tcallback.defaultListener_ = true;\n\t}\n\n\tattachDelegateEvent_(element, eventName);\n\tif (isString(selectorOrTarget)) {\n\t\taddSelectorListener_(element, eventName, selectorOrTarget, callback);\n\t} else {\n\t\taddElementListener_(selectorOrTarget, eventName, callback);\n\t}\n\n\treturn new DomDelegatedEventHandle(\n\t\tisString(selectorOrTarget) ? element : selectorOrTarget,\n\t\teventName,\n\t\tcallback,\n\t\tisString(selectorOrTarget) ? selectorOrTarget : null\n\t);\n}\n\n/**\n * Verifies if the element is able to trigger the Click event,\n * simulating browsers behaviour, avoiding event listeners to be called by triggerEvent method.\n * @param {Element} node Element to be checked.\n * @param {string} eventName The event name.\n * @private\n */\nfunction isAbleToInteractWith_(node, eventName, opt_eventObj) {\n\tif (opt_eventObj && eventName === 'click' && opt_eventObj.button === 2) {\n\t\t// Firefox triggers \"click\" events on the document for right clicks. This\n\t\t// causes our delegate logic to trigger it for regular elements too, which\n\t\t// shouldn't happen. Ignoring them here.\n\t\treturn false;\n\t}\n\n\tconst matchesSelector = ['BUTTON', 'INPUT', 'SELECT', 'TEXTAREA', 'FIELDSET'];\n\tif (eventName === 'click' && matchesSelector.indexOf(node.tagName) > -1) {\n\t\treturn !(node.disabled || parent(node, 'fieldset[disabled]'));\n\t}\n\treturn true;\n}\n\n/**\n * Inserts node in document as last element.\n * @param {Element} node Element to remove children from.\n */\nexport function enterDocument(node) {\n\tnode && append(document.body, node);\n}\n\n/**\n * Removes node from document.\n * @param {Element} node Element to remove children from.\n */\nexport function exitDocument(node) {\n\tif (node && node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * This is called when an event is triggered by a delegate listener. All\n * matching listeners of this event type from `target` to `currentTarget` will\n * be triggered.\n * @param {!Event} event The event payload.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction handleDelegateEvent_(event) {\n\tnormalizeDelegateEvent_(event);\n\tlet ret = true;\n\tconst container = event.currentTarget;\n\tconst defFns = [];\n\n\tret &= triggerDelegatedListeners_(container, event, defFns);\n\tret &= triggerDefaultDelegatedListeners_(defFns, event);\n\n\tevent.delegateTarget = null;\n\tevent[LAST_CONTAINER] = container;\n\treturn ret;\n}\n\n/**\n * Checks if the given element has the requested css class.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n */\nexport function hasClass(element, className) {\n\tif ('classList' in element) {\n\t\treturn hasClassWithNative_(element, className);\n\t} else {\n\t\treturn hasClassWithoutNative_(element, className);\n\t}\n}\n\n/**\n * Checks if the given element has the requested css class using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithNative_(element, className) {\n\treturn element.classList.contains(className);\n}\n\n/**\n * Checks if the given element has the requested css class without using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithoutNative_(element, className) {\n\treturn (` ${element.className} `).indexOf(` ${className} `) >= 0;\n}\n\n/**\n * Checks if the given element is empty or not.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isEmpty(element) {\n\treturn element.childNodes.length === 0;\n}\n\n/**\n * Check if an element matches a given selector.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n */\nexport function match(element, selector) {\n\tif (!element || element.nodeType !== 1) {\n\t\treturn false;\n\t}\n\n\tconst p = Element.prototype;\n\tconst m = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector;\n\tif (m) {\n\t\treturn m.call(element, selector);\n\t}\n\n\treturn matchFallback_(element, selector);\n}\n\n/**\n * Check if an element matches a given selector, using an internal implementation\n * instead of calling existing javascript functions.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n * @private\n */\nfunction matchFallback_(element, selector) {\n\tconst nodes = document.querySelectorAll(selector, element.parentNode);\n\tfor (let i = 0; i < nodes.length; ++i) {\n\t\tif (nodes[i] === element) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Returns the next sibling of the given element that matches the specified\n * selector, or null if there is none.\n * @param {!Element} element\n * @param {?string} selector\n */\nexport function next(element, selector) {\n\tdo {\n\t\telement = element.nextSibling;\n\t\tif (element && match(element, selector)) {\n\t\t\treturn element;\n\t\t}\n\t} while (element);\n\treturn null;\n}\n\n/**\n * Normalizes the event payload for delegate listeners.\n * @param {!Event} event\n * @private\n */\nfunction normalizeDelegateEvent_(event) {\n\tevent.stopPropagation = stopPropagation_;\n\tevent.stopImmediatePropagation = stopImmediatePropagation_;\n}\n\n/**\n * Listens to the specified event on the given DOM element. This function normalizes\n * DOM event payloads and functions so they'll work the same way on all supported\n * browsers.\n * @param {!Element|string} element The DOM element to listen to the event on, or\n *   a selector that should be delegated on the entire document.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event is\n *   triggered. It will receive the normalized event object.\n * @param {boolean} opt_capture Flag indicating if listener should be triggered\n *   during capture phase, instead of during the bubbling phase. Defaults to false.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function on(element, eventName, callback, opt_capture) {\n\tif (isString(element)) {\n\t\treturn delegate(document, eventName, element, callback);\n\t}\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.event) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\telement.addEventListener(eventName, callback, opt_capture);\n\treturn new DomEventHandle(element, eventName, callback, opt_capture);\n}\n\n/**\n * Listens to the specified event on the given DOM element once. This\n * function normalizes DOM event payloads and functions so they'll work the\n * same way on all supported browsers.\n * @param {!Element} element The DOM element to listen to the event on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event\n *   is triggered. It will receive the normalized event object.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function once(element, eventName, callback) {\n\tconst domEventHandle = on(element, eventName, function() {\n\t\tdomEventHandle.removeListener();\n\t\treturn callback.apply(this, arguments);\n\t});\n\treturn domEventHandle;\n}\n\n/**\n * Gets the first parent from the given element that matches the specified\n * selector, or null if none match.\n * @param {!Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function parent(element, selector) {\n\treturn closest(element.parentNode, selector);\n}\n\n/**\n * Registers a custom event.\n * @param {string} eventName The name of the custom event.\n * @param {!Object} customConfig An object with information about how the event\n *   should be handled.\n */\nexport function registerCustomEvent(eventName, customConfig) {\n\tcustomEvents[eventName] = customConfig;\n}\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Element} node Element to remove children from.\n */\nexport function removeChildren(node) {\n\tlet child;\n\twhile ((child = node.firstChild)) {\n\t\tnode.removeChild(child);\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element.\n * @param {!Element|!NodeList} elements The element or elements to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n */\nexport function removeClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\tremoveClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\tremoveClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.remove(className);\n\t\t}\n\t});\n}\n\n/**\n * Removes the requested CSS classes from an element without using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\telementClassName = elementClassName.replace(` ${classes[i]} `, ' ');\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Replaces the first element with the second.\n * @param {Element} element1\n * @param {Element} element2\n */\nexport function replace(element1, element2) {\n\tif (element1 && element2 && element1 !== element2 && element1.parentNode) {\n\t\telement1.parentNode.insertBefore(element2, element1);\n\t\telement1.parentNode.removeChild(element1);\n\t}\n}\n\n/**\n * The function that replaces `stopImmediatePropagation_` for events.\n * @private\n */\nfunction stopImmediatePropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tevent.stoppedImmediate = true;\n\tEvent.prototype.stopImmediatePropagation.call(event);\n}\n\n/**\n * The function that replaces `stopPropagation` for events.\n * @private\n */\nfunction stopPropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tEvent.prototype.stopPropagation.call(event);\n}\n\n/**\n * Checks if the given element supports the given event type.\n * @param {!Element|string} element The DOM element or element tag name to check.\n * @param {string} eventName The name of the event to check.\n * @return {boolean}\n */\nexport function supportsEvent(element, eventName) {\n\tif (customEvents[eventName]) {\n\t\treturn true;\n\t}\n\n\tif (isString(element)) {\n\t\tif (!elementsByTag_[element]) {\n\t\t\telementsByTag_[element] = document.createElement(element);\n\t\t}\n\t\telement = elementsByTag_[element];\n\t}\n\n\tconst tag = element.tagName;\n\tif (!supportCache_[tag] || !supportCache_[tag].hasOwnProperty(eventName)) {\n\t\tsupportCache_[tag] = supportCache_[tag] || {};\n\t\tsupportCache_[tag][eventName] = 'on' + eventName in element;\n\t}\n\treturn supportCache_[tag][eventName];\n}\n\n/**\n * This triggers all default matched delegated listeners of a given event type.\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n * @param {!Event} event\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDefaultDelegatedListeners_(defFns, event) {\n\tlet ret = true;\n\n\tfor (let i = 0; i < defFns.length && !event.defaultPrevented; i++) {\n\t\tevent.delegateTarget = defFns[i].element;\n\t\tret &= defFns[i].fn(event);\n\t}\n\n\treturn ret;\n}\n\n/**\n * This triggers all matched delegated listeners of a given event type when its\n * delegated target is able to interact.\n * @param {!Element} container\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDelegatedListeners_(container, event, defaultFns) {\n\tlet ret = true;\n\tlet currElement = event.target;\n\tconst limit = container.parentNode;\n\n\twhile (currElement && currElement !== limit && !event.stopped) {\n\t\tif (isAbleToInteractWith_(currElement, event.type, event)) {\n\t\t\tevent.delegateTarget = currElement;\n\t\t\tret &= triggerElementListeners_(currElement, event, defaultFns);\n\t\t\tret &= triggerSelectorListeners_(container, currElement, event, defaultFns);\n\t\t}\n\t\tcurrElement = currElement.parentNode;\n\t}\n\n\treturn ret;\n}\n\n/**\n * Converts the given argument to a DOM element. Strings are assumed to\n * be selectors, and so a matched element will be returned. If the arg\n * is already a DOM element it will be the return value.\n * @param {string|Element|Document} selectorOrElement\n * @return {Element} The converted element, or null if none was found.\n */\nexport function toElement(selectorOrElement) {\n\tif (isElement(selectorOrElement) || isDocument(selectorOrElement) || isDocumentFragment(selectorOrElement)) {\n\t\treturn selectorOrElement;\n\t} else if (isString(selectorOrElement)) {\n\t\tif (selectorOrElement[0] === '#' && selectorOrElement.indexOf(' ') === -1) {\n\t\t\treturn document.getElementById(selectorOrElement.substr(1));\n\t\t} else {\n\t\t\treturn document.querySelector(selectorOrElement);\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element. If any of the classes\n * is present, it will be removed from the element, or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n */\nexport function toggleClasses(element, classes) {\n\tif (!isObject(element) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif ('classList' in element) {\n\t\ttoggleClassesWithNative_(element, classes);\n\t} else {\n\t\ttoggleClassesWithoutNative_(element, classes);\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\telement.classList.toggle(className);\n\t});\n}\n\n/**\n * Adds or removes one or more classes from an element without using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = ` ${classes[i]} `;\n\t\tconst classIndex = elementClassName.indexOf(className);\n\n\t\tif (classIndex === -1) {\n\t\t\telementClassName = `${elementClassName}${classes[i]} `;\n\t\t} else {\n\t\t\tconst before = elementClassName.substring(0, classIndex);\n\t\t\tconst after = elementClassName.substring(classIndex + className.length);\n\t\t\telementClassName = `${before} ${after}`;\n\t\t}\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Triggers all listeners for the given event type that are stored in the\n * specified element.\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerElementListeners_(element, event, defaultFns) {\n\tconst lastContainer = event[LAST_CONTAINER];\n\tif (!isDef(lastContainer) || !contains(lastContainer, element)) {\n\t\tconst listeners = domData.get(element, 'listeners', {})[event.type];\n\t\treturn triggerListeners_(listeners, event, element, defaultFns);\n\t}\n\treturn true;\n}\n\n/**\n * Triggers the specified event on the given element.\n * NOTE: This should mostly be used for testing, not on real code.\n * @param {!Element} element The node that should trigger the event.\n * @param {string} eventName The name of the event to be triggred.\n * @param {Object=} opt_eventObj An object with data that should be on the\n *   triggered event's payload.\n */\nexport function triggerEvent(element, eventName, opt_eventObj) {\n\tif (isAbleToInteractWith_(element, eventName, opt_eventObj)) {\n\t\tconst eventObj = document.createEvent('HTMLEvents');\n\t\teventObj.initEvent(eventName, true, true);\n\t\tobject.mixin(eventObj, opt_eventObj);\n\t\telement.dispatchEvent(eventObj);\n\t}\n}\n\n/**\n * Triggers the given listeners array.\n * @param {Array<!function()>} listeners\n * @param {!Event} event\n * @param {!Element} element\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerListeners_(listeners, event, element, defaultFns) {\n\tlet ret = true;\n\tlisteners = listeners || [];\n\tfor (let i = 0; i < listeners.length && !event.stoppedImmediate; i++) {\n\t\tif (listeners[i].defaultListener_) {\n\t\t\tdefaultFns.push({\n\t\t\t\telement,\n\t\t\t\tfn: listeners[i]\n\t\t\t});\n\t\t} else {\n\t\t\tret &= listeners[i](event);\n\t\t}\n\t}\n\treturn ret;\n}\n\n/**\n * Triggers all selector listeners for the given event.\n * @param {!Element} container\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerSelectorListeners_(container, element, event, defaultFns) {\n\tlet ret = true;\n\tconst data = domData.get(container, 'delegating', {});\n\tconst map = data[event.type].selectors;\n\tconst selectors = Object.keys(map);\n\tfor (let i = 0; i < selectors.length && !event.stoppedImmediate; i++) {\n\t\tif (match(element, selectors[i])) {\n\t\t\tconst listeners = map[selectors[i]];\n\t\t\tret &= triggerListeners_(listeners, event, element, defaultFns);\n\t\t}\n\t}\n\treturn ret;\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as dom from './domNamed';\n\nexport default dom;\nexport { dom };\nexport * from './domNamed';\n","'use strict';\n\nimport { delegate, on, supportsEvent } from './dom';\nimport { EventEmitterProxy } from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tconst index = event.indexOf(':', 9);\n\t\t\t\tconst eventName = event.substring(9, index);\n\t\t\t\tconst selector = event.substring(index + 1);\n\t\t\t\treturn delegate(this.originEmitter_, eventName, selector, listener);\n\t\t\t} else {\n\t\t\t\treturn on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tsupportsEvent(this.originEmitter_, event);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn super.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event);\n\t}\n}\n\nexport default DomEventEmitterProxy;\n","'use strict';\n\nimport { append } from './dom';\nimport { string } from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition')\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tconst prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tconst typeTitleCase = string.replaceInterval(type, 0, 1, type.substring(0, 1).toUpperCase());\n\t\tconst suffixes = [`${typeTitleCase}End`, `${typeTitleCase}End`, `${typeTitleCase}End`, `${type}end`];\n\t\tfor (let i = 0; i < prefixes.length; i++) {\n\t\t\tif (features.animationElement_.style[prefixes[i] + typeTitleCase] !== undefined) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn `${type}end`;\n\t}\n\n\t/**\n\t * Some browsers (like IE9) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tconst originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tconst element = document.createElement('div');\n\t\t\tappend(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = document.createElement('div');\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n","'use strict';\n\nimport { async } from 'metal';\nimport { exitDocument, once } from './dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.text = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\t\texitDocument(script);\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runFile(src, opt_callback, opt_appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tconst callback = function() {\n\t\t\texitDocument(script);\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tonce(script, 'load', callback);\n\t\tonce(script, 'error', callback);\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runScript(script, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\t\texitDocument(script);\n\t\tif (script.src) {\n\t\t\treturn globalEval.runFile(script.src, opt_callback, opt_appendFn);\n\t\t} else {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn globalEval.run(script.text, opt_appendFn);\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInElement(element, opt_callback, opt_appendFn) {\n\t\tconst scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, opt_callback, opt_appendFn);\n\t\t} else if (opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInOrder(scripts, index, opt_callback, opt_appendFn) {\n\t\tglobalEval.runScript(scripts.item(index), function() {\n\t\t\tif (index < scripts.length - 1) {\n\t\t\t\tglobalEval.runScriptsInOrder(scripts, index + 1, opt_callback, opt_appendFn);\n\t\t\t} else if (opt_callback) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t}, opt_appendFn);\n\t}\n}\n\nexport default globalEval;\n","'use strict';\n\nimport { async } from 'metal';\nimport { once } from './dom';\n\n/**\n * Utility functions for running styles.\n */\nclass globalEvalStyles {\n\t/**\n\t * Evaluates the given style.\n\t * @param {string} text\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic run(text, opt_appendFn) {\n\t\tconst style = document.createElement('style');\n\t\tstyle.innerHTML = text;\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates the given style file.\n\t * @param {string} href The file's path.\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the styles has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic runFile(href, opt_callback, opt_appendFn) {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = href;\n\t\tglobalEvalStyles.runStyle(link, opt_callback, opt_appendFn);\n\t\treturn link;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given style/link element.\n\t * @param {!Element} style\n\t * @param {function()=} opt_callback Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t *  @return {Element} style\n\t */\n\tstatic runStyle(style, opt_callback, opt_appendFn) {\n\t\tconst callback = function() {\n\t\t\topt_callback && opt_callback();\n\t\t};\n\t\tif (style.rel && style.rel !== 'stylesheet') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\n\t\tif (style.tagName === 'STYLE') {\n\t\t\tasync.nextTick(callback);\n\t\t} else {\n\t\t\tonce(style, 'load', callback);\n\t\t\tonce(style, 'error', callback);\n\t\t}\n\n\t\tif (opt_appendFn) {\n\t\t\topt_appendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates any style present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} opt_callback Optional function to be called when the\n\t *   style has been run.\n\t * @param {function()=} opt_appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runStylesInElement(element, opt_callback, opt_appendFn) {\n\t\tconst styles = element.querySelectorAll('style,link');\n\t\tif (styles.length === 0 && opt_callback) {\n\t\t\tasync.nextTick(opt_callback);\n\t\t\treturn;\n\t\t}\n\n\t\tlet loadCount = 0;\n\t\tconst callback = function() {\n\t\t\tif (opt_callback && ++loadCount === styles.length) {\n\t\t\t\tasync.nextTick(opt_callback);\n\t\t\t}\n\t\t};\n\t\tfor (let i = 0; i < styles.length; i++) {\n\t\t\tglobalEvalStyles.runStyle(styles[i], callback, opt_appendFn);\n\t\t}\n\t}\n}\n\nexport default globalEvalStyles;\n","'use strict';\n\nimport { registerCustomEvent } from './dom';\nimport features from './features';\n\nconst mouseEventMap = {\n\tmouseenter: 'mouseover',\n\tmouseleave: 'mouseout',\n\tpointerenter: 'pointerover',\n\tpointerleave: 'pointerout'\n};\nObject.keys(mouseEventMap).forEach(function(eventName) {\n\tregisterCustomEvent(eventName, {\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tconst related = event.relatedTarget;\n\t\t\tconst target = event.delegateTarget;\n\t\t\tif (!related || (related !== target && !target.contains(related))) {\n\t\t\t\tevent.customType = eventName;\n\t\t\t\treturn callback(event);\n\t\t\t}\n\t\t},\n\t\toriginalEvent: mouseEventMap[eventName]\n\t});\n});\n\nconst animationEventMap = {\n\tanimation: 'animationend',\n\ttransition: 'transitionend'\n};\nObject.keys(animationEventMap).forEach(function(eventType) {\n\tconst eventName = animationEventMap[eventType];\n\tregisterCustomEvent(eventName, {\n\t\tevent: true,\n\t\tdelegate: true,\n\t\thandler: function(callback, event) {\n\t\t\tevent.customType = eventName;\n\t\t\treturn callback(event);\n\t\t},\n\t\toriginalEvent: features.checkAnimationEventName()[eventType]\n\t});\n});\n","/*!\n * Promises polyfill from Google's Closure Library.\n *\n *      Copyright 2013 The Closure Library Authors. All Rights Reserved.\n *\n * NOTE(eduardo): Promise support is not ready on all supported browsers,\n * therefore metal-promise is temporarily using Google's promises as polyfill.\n * It supports cancellable promises and has clean and fast implementation.\n */\n\n'use strict';\n\nimport { isDef, isFunction, isObject } from 'metal';\nimport { async } from 'metal';\n\n/**\n * Provides a more strict interface for Thenables in terms of\n * http://promisesaplus.com for interop with {@see CancellablePromise}.\n *\n * @interface\n * @extends {IThenable.<TYPE>}\n * @template TYPE\n */\nvar Thenable = function() {};\n\n/**\n * Adds callbacks that will operate on the result of the Thenable, returning a\n * new child Promise.\n *\n * If the Thenable is fulfilled, the {@code onFulfilled} callback will be\n * invoked with the fulfillment value as argument, and the child Promise will\n * be fulfilled with the return value of the callback. If the callback throws\n * an exception, the child Promise will be rejected with the thrown value\n * instead.\n *\n * If the Thenable is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value of the callback or thrown value.\n *\n * @param {?(function(this:THIS, TYPE):\n *             (RESULT|IThenable.<RESULT>|Thenable))=} opt_onFulfilled A\n *     function that will be invoked with the fulfillment value if the Promise\n *     is fullfilled.\n * @param {?(function(*): *)=} opt_onRejected A function that will be invoked\n *     with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     with the default this.\n * @return {!CancellablePromise.<RESULT>} A new Promise that will receive the\n *     result of the fulfillment or rejection callback.\n * @template RESULT,THIS\n */\nThenable.prototype.then = function() {};\n\n\n/**\n * An expando property to indicate that an object implements\n * {@code Thenable}.\n *\n * {@see addImplementation}.\n *\n * @const\n */\nThenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';\n\n\n/**\n * Marks a given class (constructor) as an implementation of Thenable, so\n * that we can query that fact at runtime. The class must have already\n * implemented the interface.\n * Exports a 'then' method on the constructor prototype, so that the objects\n * also implement the extern {@see Thenable} interface for interop with\n * other Promise implementations.\n * @param {function(new:Thenable,...[?])} ctor The class constructor. The\n *     corresponding class must have already implemented the interface.\n */\nThenable.addImplementation = function(ctor) {\n  ctor.prototype.then = ctor.prototype.then;\n  ctor.prototype.$goog_Thenable = true;\n};\n\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements {@code Thenable}.\n *     The class/superclass of the instance must call {@code addImplementation}.\n */\nThenable.isImplementedBy = function(object) {\n  if (!object) {\n    return false;\n  }\n  try {\n    return !!object.$goog_Thenable;\n  } catch (e) {\n    // Property access seems to be forbidden.\n    return false;\n  }\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\nvar partial = function(fn) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n/**\n * Promises provide a result that may be resolved asynchronously. A Promise may\n * be resolved by being fulfilled or rejected with a value, which will be known\n * as the fulfillment value or the rejection reason. Whether fulfilled or\n * rejected, the Promise result is immutable once it is set.\n *\n * Promises may represent results of any type, including undefined. Rejection\n * reasons are typically Errors, but may also be of any type. Closure Promises\n * allow for optional type annotations that enforce that fulfillment values are\n * of the appropriate types at compile time.\n *\n * The result of a Promise is accessible by calling {@code then} and registering\n * {@code onFulfilled} and {@code onRejected} callbacks. Once the Promise\n * resolves, the relevant callbacks are invoked with the fulfillment value or\n * rejection reason as argument. Callbacks are always invoked in the order they\n * were registered, even when additional {@code then} calls are made from inside\n * another callback. A callback is always run asynchronously sometime after the\n * scope containing the registering {@code then} invocation has returned.\n *\n * If a Promise is resolved with another Promise, the first Promise will block\n * until the second is resolved, and then assumes the same result as the second\n * Promise. This allows Promises to depend on the results of other Promises,\n * linking together multiple asynchronous operations.\n *\n * This implementation is compatible with the Promises/A+ specification and\n * passes that specification's conformance test suite. A Closure Promise may be\n * resolved with a Promise instance (or sufficiently compatible Promise-like\n * object) created by other Promise implementations. From the specification,\n * Promise-like objects are known as \"Thenables\".\n *\n * @see http://promisesaplus.com/\n *\n * @param {function(\n *             this:RESOLVER_CONTEXT,\n *             function((TYPE|IThenable.<TYPE>|Thenable)),\n *             function(*)): void} resolver\n *     Initialization function that is invoked immediately with {@code resolve}\n *     and {@code reject} functions as arguments. The Promise is resolved or\n *     rejected with the first argument passed to either function.\n * @param {RESOLVER_CONTEXT=} opt_context An optional context for executing the\n *     resolver function. If unspecified, the resolver function will be executed\n *     in the default scope.\n * @constructor\n * @struct\n * @final\n * @implements {Thenable.<TYPE>}\n * @template TYPE,RESOLVER_CONTEXT\n */\nvar CancellablePromise = function(resolver, opt_context) {\n  /**\n   * The internal state of this Promise. Either PENDING, FULFILLED, REJECTED, or\n   * BLOCKED.\n   * @private {CancellablePromise.State_}\n   */\n  this.state_ = CancellablePromise.State_.PENDING;\n\n  /**\n   * The resolved result of the Promise. Immutable once set with either a\n   * fulfillment value or rejection reason.\n   * @private {*}\n   */\n  this.result_ = undefined;\n\n  /**\n   * For Promises created by calling {@code then()}, the originating parent.\n   * @private {CancellablePromise}\n   */\n  this.parent_ = null;\n\n  /**\n   * The list of {@code onFulfilled} and {@code onRejected} callbacks added to\n   * this Promise by calls to {@code then()}.\n   * @private {Array.<CancellablePromise.CallbackEntry_>}\n   */\n  this.callbackEntries_ = null;\n\n  /**\n   * Whether the Promise is in the queue of Promises to execute.\n   * @private {boolean}\n   */\n  this.executing_ = false;\n\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    /**\n     * A timeout ID used when the {@code UNHANDLED_REJECTION_DELAY} is greater\n     * than 0 milliseconds. The ID is set when the Promise is rejected, and\n     * cleared only if an {@code onRejected} callback is invoked for the\n     * Promise (or one of its descendants) before the delay is exceeded.\n     *\n     * If the rejection is not handled before the timeout completes, the\n     * rejection reason is passed to the unhandled rejection handler.\n     * @private {number}\n     */\n    this.unhandledRejectionId_ = 0;\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    /**\n     * When the {@code UNHANDLED_REJECTION_DELAY} is set to 0 milliseconds, a\n     * boolean that is set if the Promise is rejected, and reset to false if an\n     * {@code onRejected} callback is invoked for the Promise (or one of its\n     * descendants). If the rejection is not handled before the next timestep,\n     * the rejection reason is passed to the unhandled rejection handler.\n     * @private {boolean}\n     */\n    this.hadUnhandledRejection_ = false;\n  }\n\n  try {\n    var self = this;\n    resolver.call(\n      opt_context, function(value) {\n        self.resolve_(CancellablePromise.State_.FULFILLED, value);\n      }, function(reason) {\n        self.resolve_(CancellablePromise.State_.REJECTED, reason);\n      });\n  } catch (e) {\n    this.resolve_(CancellablePromise.State_.REJECTED, e);\n  }\n};\n\n/**\n * The delay in milliseconds before a rejected Promise's reason is passed to\n * the rejection handler. By default, the rejection handler rethrows the\n * rejection reason so that it appears in the developer console or\n * {@code window.onerror} handler.\n * Rejections are rethrown as quickly as possible by default. A negative value\n * disables rejection handling entirely.\n * @type {number}\n */\nCancellablePromise.UNHANDLED_REJECTION_DELAY = 0;\n\n\n/**\n * The possible internal states for a Promise. These states are not directly\n * observable to external callers.\n * @enum {number}\n * @private\n */\nCancellablePromise.State_ = {\n  /** The Promise is waiting for resolution. */\n  PENDING: 0,\n\n  /** The Promise is blocked waiting for the result of another Thenable. */\n  BLOCKED: 1,\n\n  /** The Promise has been resolved with a fulfillment value. */\n  FULFILLED: 2,\n\n  /** The Promise has been resolved with a rejection reason. */\n  REJECTED: 3\n};\n\n\n/**\n * Typedef for entries in the callback chain. Each call to {@code then},\n * {@code thenCatch}, or {@code thenAlways} creates an entry containing the\n * functions that may be invoked once the Promise is resolved.\n *\n * @typedef {{\n *   child: CancellablePromise,\n *   onFulfilled: function(*),\n *   onRejected: function(*)\n * }}\n * @private\n */\nCancellablePromise.CallbackEntry_ = null;\n\n\n/**\n * @param {(TYPE|Thenable.<TYPE>|Thenable)=} opt_value\n * @return {!CancellablePromise.<TYPE>} A new Promise that is immediately resolved\n *     with the given value.\n * @template TYPE\n */\nCancellablePromise.resolve = function(opt_value) {\n  return new CancellablePromise(function(resolve) {\n      resolve(opt_value);\n    });\n};\n\n\n/**\n * @param {*=} opt_reason\n * @return {!CancellablePromise} A new Promise that is immediately rejected with the\n *     given reason.\n */\nCancellablePromise.reject = function(opt_reason) {\n  return new CancellablePromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the result of the\n *     first Promise (or Promise-like) input to complete.\n * @template TYPE\n */\nCancellablePromise.race = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      if (!promises.length) {\n        resolve(undefined);\n      }\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(resolve, reject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<!Array.<TYPE>>} A Promise that receives a list of\n *     every fulfilled value once every input Promise (or Promise-like) is\n *     successfully fulfilled, or is rejected by the first rejection result.\n * @template TYPE\n */\nCancellablePromise.all = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toFulfill = promises.length;\n      var values = [];\n\n      if (!toFulfill) {\n        resolve(values);\n        return;\n      }\n\n      var onFulfill = function(index, value) {\n        toFulfill--;\n        values[index] = value;\n        if (toFulfill === 0) {\n          resolve(values);\n        }\n      };\n\n      var onReject = function(reason) {\n        reject(reason);\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(partial(onFulfill, i), onReject);\n      }\n    });\n};\n\n\n/**\n * @param {!Array.<!(Thenable.<TYPE>|Thenable)>} promises\n * @return {!CancellablePromise.<TYPE>} A Promise that receives the value of\n *     the first input to be fulfilled, or is rejected with a list of every\n *     rejection reason if all inputs are rejected.\n * @template TYPE\n */\nCancellablePromise.firstFulfilled = function(promises) {\n  return new CancellablePromise(function(resolve, reject) {\n      var toReject = promises.length;\n      var reasons = [];\n\n      if (!toReject) {\n        resolve(undefined);\n        return;\n      }\n\n      var onFulfill = function(value) {\n        resolve(value);\n      };\n\n      var onReject = function(index, reason) {\n        toReject--;\n        reasons[index] = reason;\n        if (toReject === 0) {\n          reject(reasons);\n        }\n      };\n\n      for (var i = 0, promise; (promise = promises[i]); i++) {\n        promise.then(onFulfill, partial(onReject, i));\n      }\n    });\n};\n\n\n/**\n * Adds callbacks that will operate on the result of the Promise, returning a\n * new child Promise.\n *\n * If the Promise is fulfilled, the {@code onFulfilled} callback will be invoked\n * with the fulfillment value as argument, and the child Promise will be\n * fulfilled with the return value of the callback. If the callback throws an\n * exception, the child Promise will be rejected with the thrown value instead.\n *\n * If the Promise is rejected, the {@code onRejected} callback will be invoked\n * with the rejection reason as argument, and the child Promise will be rejected\n * with the return value (or thrown value) of the callback.\n *\n * @override\n */\nCancellablePromise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {\n  return this.addChildPromise_(\n    isFunction(opt_onFulfilled) ? opt_onFulfilled : null,\n    isFunction(opt_onRejected) ? opt_onRejected : null,\n    opt_context);\n};\nThenable.addImplementation(CancellablePromise);\n\n\n/**\n * Adds a callback that will be invoked whether the Promise is fulfilled or\n * rejected. The callback receives no argument, and no new child Promise is\n * created. This is useful for ensuring that cleanup takes place after certain\n * asynchronous operations. Callbacks added with {@code thenAlways} will be\n * executed in the same order with other calls to {@code then},\n * {@code thenAlways}, or {@code thenCatch}.\n *\n * Since it does not produce a new child Promise, cancellation propagation is\n * not prevented by adding callbacks with {@code thenAlways}. A Promise that has\n * a cleanup handler added with {@code thenAlways} will be canceled if all of\n * its children created by {@code then} (or {@code thenCatch}) are canceled.\n *\n * @param {function(this:THIS): void} onResolved A function that will be invoked\n *     when the Promise is resolved.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise.<TYPE>} This Promise, for chaining additional calls.\n * @template THIS\n */\nCancellablePromise.prototype.thenAlways = function(onResolved, opt_context) {\n  var callback = function() {\n    try {\n      // Ensure that no arguments are passed to onResolved.\n      onResolved.call(opt_context);\n    } catch (err) {\n      CancellablePromise.handleRejection_.call(null, err);\n    }\n  };\n\n  this.addCallbackEntry_({\n    child: null,\n    onRejected: callback,\n    onFulfilled: callback\n  });\n  return this;\n};\n\n\n/**\n * Adds a callback that will be invoked only if the Promise is rejected. This\n * is equivalent to {@code then(null, onRejected)}.\n *\n * @param {!function(this:THIS, *): *} onRejected A function that will be\n *     invoked with the rejection reason if the Promise is rejected.\n * @param {THIS=} opt_context An optional context object that will be the\n *     execution context for the callbacks. By default, functions are executed\n *     in the global scope.\n * @return {!CancellablePromise} A new Promise that will receive the result of the\n *     callback.\n * @template THIS\n */\nCancellablePromise.prototype.thenCatch = function(onRejected, opt_context) {\n  return this.addChildPromise_(null, onRejected, opt_context);\n};\n\n/**\n * Alias of {@link CancellablePromise.prototype.thenCatch}\n */\nCancellablePromise.prototype.catch = CancellablePromise.prototype.thenCatch;\n\n\n/**\n * Cancels the Promise if it is still pending by rejecting it with a cancel\n * Error. No action is performed if the Promise is already resolved.\n *\n * All child Promises of the canceled Promise will be rejected with the same\n * cancel error, as with normal Promise rejection. If the Promise to be canceled\n * is the only child of a pending Promise, the parent Promise will also be\n * canceled. Cancellation may propagate upward through multiple generations.\n *\n * @param {string=} opt_message An optional debugging message for describing the\n *     cancellation reason.\n */\nCancellablePromise.prototype.cancel = function(opt_message) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    async.run(function() {\n      var err = new CancellablePromise.CancellationError(opt_message);\n      err.IS_CANCELLATION_ERROR = true;\n      this.cancelInternal_(err);\n    }, this);\n  }\n};\n\n\n/**\n * Cancels this Promise with the given error.\n *\n * @param {!Error} err The cancellation error.\n * @private\n */\nCancellablePromise.prototype.cancelInternal_ = function(err) {\n  if (this.state_ === CancellablePromise.State_.PENDING) {\n    if (this.parent_) {\n      // Cancel the Promise and remove it from the parent's child list.\n      this.parent_.cancelChild_(this, err);\n    } else {\n      this.resolve_(CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Cancels a child Promise from the list of callback entries. If the Promise has\n * not already been resolved, reject it with a cancel error. If there are no\n * other children in the list of callback entries, propagate the cancellation\n * by canceling this Promise as well.\n *\n * @param {!CancellablePromise} childPromise The Promise to cancel.\n * @param {!Error} err The cancel error to use for rejecting the Promise.\n * @private\n */\nCancellablePromise.prototype.cancelChild_ = function(childPromise, err) {\n  if (!this.callbackEntries_) {\n    return;\n  }\n  var childCount = 0;\n  var childIndex = -1;\n\n  // Find the callback entry for the childPromise, and count whether there are\n  // additional child Promises.\n  for (var i = 0, entry; (entry = this.callbackEntries_[i]); i++) {\n    var child = entry.child;\n    if (child) {\n      childCount++;\n      if (child === childPromise) {\n        childIndex = i;\n      }\n      if (childIndex >= 0 && childCount > 1) {\n        break;\n      }\n    }\n  }\n\n  // If the child Promise was the only child, cancel this Promise as well.\n  // Otherwise, reject only the child Promise with the cancel error.\n  if (childIndex >= 0) {\n    if (this.state_ === CancellablePromise.State_.PENDING && childCount === 1) {\n      this.cancelInternal_(err);\n    } else {\n      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];\n      this.executeCallback_(\n        callbackEntry, CancellablePromise.State_.REJECTED, err);\n    }\n  }\n};\n\n\n/**\n * Adds a callback entry to the current Promise, and schedules callback\n * execution if the Promise has already been resolved.\n *\n * @param {CancellablePromise.CallbackEntry_} callbackEntry Record containing\n *     {@code onFulfilled} and {@code onRejected} callbacks to execute after\n *     the Promise is resolved.\n * @private\n */\nCancellablePromise.prototype.addCallbackEntry_ = function(callbackEntry) {\n  if ((!this.callbackEntries_ || !this.callbackEntries_.length) &&\n    (this.state_ === CancellablePromise.State_.FULFILLED ||\n    this.state_ === CancellablePromise.State_.REJECTED)) {\n    this.scheduleCallbacks_();\n  }\n  if (!this.callbackEntries_) {\n    this.callbackEntries_ = [];\n  }\n  this.callbackEntries_.push(callbackEntry);\n};\n\n\n/**\n * Creates a child Promise and adds it to the callback entry list. The result of\n * the child Promise is determined by the state of the parent Promise and the\n * result of the {@code onFulfilled} or {@code onRejected} callbacks as\n * specified in the Promise resolution procedure.\n *\n * @see http://promisesaplus.com/#the__method\n *\n * @param {?function(this:THIS, TYPE):\n *          (RESULT|CancellablePromise.<RESULT>|Thenable)} onFulfilled A callback that\n *     will be invoked if the Promise is fullfilled, or null.\n * @param {?function(this:THIS, *): *} onRejected A callback that will be\n *     invoked if the Promise is rejected, or null.\n * @param {THIS=} opt_context An optional execution context for the callbacks.\n *     in the default calling context.\n * @return {!CancellablePromise} The child Promise.\n * @template RESULT,THIS\n * @private\n */\nCancellablePromise.prototype.addChildPromise_ = function(\nonFulfilled, onRejected, opt_context) {\n\n  var callbackEntry = {\n    child: null,\n    onFulfilled: null,\n    onRejected: null\n  };\n\n  callbackEntry.child = new CancellablePromise(function(resolve, reject) {\n    // Invoke onFulfilled, or resolve with the parent's value if absent.\n    callbackEntry.onFulfilled = onFulfilled ? function(value) {\n      try {\n        var result = onFulfilled.call(opt_context, value);\n        resolve(result);\n      } catch (err) {\n        reject(err);\n      }\n    } : resolve;\n\n    // Invoke onRejected, or reject with the parent's reason if absent.\n    callbackEntry.onRejected = onRejected ? function(reason) {\n      try {\n        var result = onRejected.call(opt_context, reason);\n        if (!isDef(result) && reason.IS_CANCELLATION_ERROR) {\n          // Propagate cancellation to children if no other result is returned.\n          reject(reason);\n        } else {\n          resolve(result);\n        }\n      } catch (err) {\n        reject(err);\n      }\n    } : reject;\n  });\n\n  callbackEntry.child.parent_ = this;\n  this.addCallbackEntry_(\n    /** @type {CancellablePromise.CallbackEntry_} */ (callbackEntry));\n  return callbackEntry.child;\n};\n\n\n/**\n * Unblocks the Promise and fulfills it with the given value.\n *\n * @param {TYPE} value\n * @private\n */\nCancellablePromise.prototype.unblockAndFulfill_ = function(value) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.FULFILLED, value);\n};\n\n\n/**\n * Unblocks the Promise and rejects it with the given rejection reason.\n *\n * @param {*} reason\n * @private\n */\nCancellablePromise.prototype.unblockAndReject_ = function(reason) {\n  if (this.state_ !== CancellablePromise.State_.BLOCKED) {\n    throw new Error('CancellablePromise is not blocked.');\n  }\n  this.state_ = CancellablePromise.State_.PENDING;\n  this.resolve_(CancellablePromise.State_.REJECTED, reason);\n};\n\n\n/**\n * Attempts to resolve a Promise with a given resolution state and value. This\n * is a no-op if the given Promise has already been resolved.\n *\n * If the given result is a Thenable (such as another Promise), the Promise will\n * be resolved with the same state and result as the Thenable once it is itself\n * resolved.\n *\n * If the given result is not a Thenable, the Promise will be fulfilled or\n * rejected with that result based on the given state.\n *\n * @see http://promisesaplus.com/#the_promise_resolution_procedure\n *\n * @param {CancellablePromise.State_} state\n * @param {*} x The result to apply to the Promise.\n * @private\n */\nCancellablePromise.prototype.resolve_ = function(state, x) {\n  if (this.state_ !== CancellablePromise.State_.PENDING) {\n    return;\n  }\n\n  if (this === x) {\n    state = CancellablePromise.State_.REJECTED;\n    x = new TypeError('CancellablePromise cannot resolve to itself');\n\n  } else if (Thenable.isImplementedBy(x)) {\n    x = /** @type {!Thenable} */ (x);\n    this.state_ = CancellablePromise.State_.BLOCKED;\n    x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);\n    return;\n\n  } else if (isObject(x)) {\n    try {\n      var then = x.then;\n      if (isFunction(then)) {\n        this.tryThen_(x, then);\n        return;\n      }\n    } catch (e) {\n      state = CancellablePromise.State_.REJECTED;\n      x = e;\n    }\n  }\n\n  this.result_ = x;\n  this.state_ = state;\n  this.scheduleCallbacks_();\n\n  if (state === CancellablePromise.State_.REJECTED && !x.IS_CANCELLATION_ERROR) {\n    CancellablePromise.addUnhandledRejection_(this, x);\n  }\n};\n\n\n/**\n * Attempts to call the {@code then} method on an object in the hopes that it is\n * a Promise-compatible instance. This allows interoperation between different\n * Promise implementations, however a non-compliant object may cause a Promise\n * to hang indefinitely. If the {@code then} method throws an exception, the\n * dependent Promise will be rejected with the thrown value.\n *\n * @see http://promisesaplus.com/#point-70\n *\n * @param {Thenable} thenable An object with a {@code then} method that may be\n *     compatible with the Promise/A+ specification.\n * @param {!Function} then The {@code then} method of the Thenable object.\n * @private\n */\nCancellablePromise.prototype.tryThen_ = function(thenable, then) {\n  this.state_ = CancellablePromise.State_.BLOCKED;\n  var promise = this;\n  var called = false;\n\n  var resolve = function(value) {\n    if (!called) {\n      called = true;\n      promise.unblockAndFulfill_(value);\n    }\n  };\n\n  var reject = function(reason) {\n    if (!called) {\n      called = true;\n      promise.unblockAndReject_(reason);\n    }\n  };\n\n  try {\n    then.call(thenable, resolve, reject);\n  } catch (e) {\n    reject(e);\n  }\n};\n\n\n/**\n * Executes the pending callbacks of a resolved Promise after a timeout.\n *\n * Section 2.2.4 of the Promises/A+ specification requires that Promise\n * callbacks must only be invoked from a call stack that only contains Promise\n * implementation code, which we accomplish by invoking callback execution after\n * a timeout. If {@code startExecution_} is called multiple times for the same\n * Promise, the callback chain will be evaluated only once. Additional callbacks\n * may be added during the evaluation phase, and will be executed in the same\n * event loop.\n *\n * All Promises added to the waiting list during the same browser event loop\n * will be executed in one batch to avoid using a separate timeout per Promise.\n *\n * @private\n */\nCancellablePromise.prototype.scheduleCallbacks_ = function() {\n  if (!this.executing_) {\n    this.executing_ = true;\n    async.run(this.executeCallbacks_, this);\n  }\n};\n\n\n/**\n * Executes all pending callbacks for this Promise.\n *\n * @private\n */\nCancellablePromise.prototype.executeCallbacks_ = function() {\n  while (this.callbackEntries_ && this.callbackEntries_.length) {\n    var entries = this.callbackEntries_;\n    this.callbackEntries_ = [];\n\n    for (var i = 0; i < entries.length; i++) {\n      this.executeCallback_(entries[i], this.state_, this.result_);\n    }\n  }\n  this.executing_ = false;\n};\n\n\n/**\n * Executes a pending callback for this Promise. Invokes an {@code onFulfilled}\n * or {@code onRejected} callback based on the resolved state of the Promise.\n *\n * @param {!CancellablePromise.CallbackEntry_} callbackEntry An entry containing the\n *     onFulfilled and/or onRejected callbacks for this step.\n * @param {CancellablePromise.State_} state The resolution status of the Promise,\n *     either FULFILLED or REJECTED.\n * @param {*} result The resolved result of the Promise.\n * @private\n */\nCancellablePromise.prototype.executeCallback_ = function(\ncallbackEntry, state, result) {\n  if (state === CancellablePromise.State_.FULFILLED) {\n    callbackEntry.onFulfilled(result);\n  } else {\n    this.removeUnhandledRejection_();\n    callbackEntry.onRejected(result);\n  }\n};\n\n\n/**\n * Marks this rejected Promise as having being handled. Also marks any parent\n * Promises in the rejected state as handled. The rejection handler will no\n * longer be invoked for this Promise (if it has not been called already).\n *\n * @private\n */\nCancellablePromise.prototype.removeUnhandledRejection_ = function() {\n  var p;\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    for (p = this; p && p.unhandledRejectionId_; p = p.parent_) {\n      clearTimeout(p.unhandledRejectionId_);\n      p.unhandledRejectionId_ = 0;\n    }\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    for (p = this; p && p.hadUnhandledRejection_; p = p.parent_) {\n      p.hadUnhandledRejection_ = false;\n    }\n  }\n};\n\n\n/**\n * Marks this rejected Promise as unhandled. If no {@code onRejected} callback\n * is called for this Promise before the {@code UNHANDLED_REJECTION_DELAY}\n * expires, the reason will be passed to the unhandled rejection handler. The\n * handler typically rethrows the rejection reason so that it becomes visible in\n * the developer console.\n *\n * @param {!CancellablePromise} promise The rejected Promise.\n * @param {*} reason The Promise rejection reason.\n * @private\n */\nCancellablePromise.addUnhandledRejection_ = function(promise, reason) {\n  if (CancellablePromise.UNHANDLED_REJECTION_DELAY > 0) {\n    promise.unhandledRejectionId_ = setTimeout(function() {\n      CancellablePromise.handleRejection_.call(null, reason);\n    }, CancellablePromise.UNHANDLED_REJECTION_DELAY);\n\n  } else if (CancellablePromise.UNHANDLED_REJECTION_DELAY === 0) {\n    promise.hadUnhandledRejection_ = true;\n    async.run(function() {\n      if (promise.hadUnhandledRejection_) {\n        CancellablePromise.handleRejection_.call(null, reason);\n      }\n    });\n  }\n};\n\n\n/**\n * A method that is invoked with the rejection reasons for Promises that are\n * rejected but have no {@code onRejected} callbacks registered yet.\n * @type {function(*)}\n * @private\n */\nCancellablePromise.handleRejection_ = async.throwException;\n\n\n/**\n * Sets a handler that will be called with reasons from unhandled rejected\n * Promises. If the rejected Promise (or one of its descendants) has an\n * {@code onRejected} callback registered, the rejection will be considered\n * handled, and the rejection handler will not be called.\n *\n * By default, unhandled rejections are rethrown so that the error may be\n * captured by the developer console or a {@code window.onerror} handler.\n *\n * @param {function(*)} handler A function that will be called with reasons from\n *     rejected Promises. Defaults to {@code async.throwException}.\n */\nCancellablePromise.setUnhandledRejectionHandler = function(handler) {\n  CancellablePromise.handleRejection_ = handler;\n};\n\n\n\n/**\n * Error used as a rejection reason for canceled Promises.\n *\n * @param {string=} opt_message\n * @constructor\n * @extends {Error}\n * @final\n */\nCancellablePromise.CancellationError = class extends Error {\n  constructor(opt_message) {\n     super(opt_message);\n\n     if (opt_message) {\n       this.message = opt_message;\n     }\n   }\n};\n\n/** @override */\nCancellablePromise.CancellationError.prototype.name = 'cancel';\n\nexport {CancellablePromise};\nexport default CancellablePromise;\n","'use strict';\n\n/**\n  * Debounces function execution.\n  * @param {!function()} fn\n  * @param {number} delay\n  * @return {!function()}\n  */\nfunction debounce(fn, delay) {\n\treturn function debounced() {\n\t\tvar args = arguments;\n\t\tcancelDebounce(debounced);\n\t\tdebounced.id = setTimeout(function() {\n\t\t\tfn.apply(null, args);\n\t\t}, delay);\n\t};\n}\n\n/**\n * Cancels the scheduled debounced function.\n */\nfunction cancelDebounce(debounced) {\n\tclearTimeout(debounced.id);\n}\n\nexport default debounce;\nexport { cancelDebounce, debounce };\n","'use strict';\n\nimport core from 'metal';\n\nconst REGEX = /([\\/])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])*)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?)/g;\n\n/**\n * Converts the given array of regex matches to a more readable object format.\n * @param {!Array<string>} matches\n * @return {!Object}\n */\nfunction convertMatchesToObj(matches) {\n\treturn {\n\t\tmatch: matches[0],\n\t\tprefix: matches[1],\n\t\tname: matches[2],\n\t\tparamPattern: matches[3],\n\t\tunnamedPattern: matches[4],\n\t\tmodifier: matches[5]\n\t};\n}\n\n/**\n * Converts the given tokens parsed from a route format string to a regex.\n * @param {!Array<string|!Object>} tokens\n * @return {!RegExp}\n */\nfunction convertTokensToRegex(tokens) {\n\tlet regex = '';\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (core.isString(tokens[i])) {\n\t\t\tregex += escape(tokens[i]);\n\t\t} else {\n\t\t\tlet capture = encloseNonCapturingGroup(tokens[i].pattern);\n\t\t\tif (tokens[i].repeat) {\n\t\t\t\tcapture += encloseNonCapturingGroup('\\\\/' + capture) + '*';\n\t\t\t}\n\t\t\tcapture = escape(tokens[i].prefix) + `(${capture})`;\n\t\t\tif (tokens[i].optional) {\n\t\t\t\tif (!tokens[i].partial) {\n\t\t\t\t\tcapture = encloseNonCapturingGroup(capture);\n\t\t\t\t}\n\t\t\t\tcapture += '?';\n\t\t\t}\n\t\t\tregex += capture;\n\t\t}\n\t}\n\treturn new RegExp('^' + makeTrailingSlashOptional(regex) + '$');\n}\n\n/**\n * Encloses the given regex pattern into a non capturing group.\n * @param {string} pattern\n * @return {string}\n */\nfunction encloseNonCapturingGroup(pattern) {\n\treturn `(?:${pattern})`;\n}\n\n/**\n * Escapes the given string to show up in the path regex.\n * @param {string} str\n * @return {string}\n */\nfunction escape(str) {\n\treturn str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Makes trailing slash optional on paths.\n * @param {string} regex\n * @param {string}\n */\nfunction makeTrailingSlashOptional(regex) {\n\tif (/\\/$/.test(regex)) {\n\t\tregex += '?';\n\t} else {\n\t\tregex += '\\\\/?';\n\t}\n\treturn regex;\n}\n\n/**\n * Parses the given route format string into tokens representing its contents.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!Array<string|!Object>} An array of tokens that can be either plain\n *     strings (part of the route) or objects containing informations on params.\n */\nexport function parse(routeOrTokens) {\n\tif (!core.isString(routeOrTokens)) {\n\t\treturn routeOrTokens;\n\t}\n\n\tconst route = routeOrTokens;\n\tlet unnamedCount = 0;\n\tconst tokens = [];\n\tlet currPath = '';\n\tlet index = 0;\n\n\tlet matches = REGEX.exec(route);\n\twhile (matches) {\n\t\tconst data = convertMatchesToObj(matches);\n\n\t\tcurrPath = route.slice(index, matches.index);\n\t\tindex = matches.index + data.match.length;\n\t\ttokens.push(currPath);\n\n\t\ttokens.push({\n\t\t\tname: data.name ? data.name : '' + unnamedCount++,\n\t\t\tpartial: route[index] && route[index] !== data.prefix,\n\t\t\tprefix: data.prefix || '',\n\t\t\tpattern: data.paramPattern || data.unnamedPattern || '[^\\\\/]+',\n\t\t\trepeat: data.modifier === '*' || data.modifier === '+',\n\t\t\toptional: data.modifier === '*' || data.modifier === '?'\n\t\t});\n\n\t\tmatches = REGEX.exec(route);\n\t}\n\n\tif (index < route.length) {\n\t\ttokens.push(route.substr(index));\n\t}\n\treturn tokens;\n}\n\n/**\n * Converts the given route format string to a regex that can extract param\n * data from paths matching it.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!RegExp}\n */\nexport function toRegex(routeOrTokens) {\n\treturn convertTokensToRegex(parse(routeOrTokens));\n}\n\n/**\n * Extracts data from the given path according to the specified route format.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @param {string} The path to extract param data from.\n * @return {Object<string, string>} The data object, or null if the path doesn't\n *     match the given format.\n */\nexport function extractData(routeOrTokens, path) {\n\tconst data = {};\n\tconst tokens = parse(routeOrTokens);\n\tconst match = path.match(convertTokensToRegex(tokens));\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tlet paramIndex = 1;\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (!core.isString(tokens[i])) {\n\t\t\tlet value = match[paramIndex++];\n\t\t\tif (core.isDef(value)) {\n\t\t\t\tif (tokens[i].repeat) {\n\t\t\t\t\tvalue = value.split('/');\n\t\t\t\t}\n\t\t\t\tdata[tokens[i].name] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n","'use strict';\n\nimport { isDefAndNotNull, isFunction, isString } from 'metal';\nimport { extractData, parse, toRegex } from 'metal-path-parser';\n\nclass Route {\n\n\t/**\n\t * Route class.\n\t * @param {!string|RegExp|Function} path\n\t * @param {!Function} handler\n\t * @constructor\n\t */\n\tconstructor(path, handler) {\n\t\tif (!isDefAndNotNull(path)) {\n\t\t\tthrow new Error('Route path not specified.');\n\t\t}\n\t\tif (!isFunction(handler)) {\n\t\t\tthrow new Error('Route handler is not a function.');\n\t\t}\n\n\t\t/**\n\t\t * Defines the handler which will execute once a URL in the application\n\t\t * matches the path.\n\t\t * @type {!Function}\n\t\t * @protected\n\t\t */\n\t\tthis.handler = handler;\n\n\t\t/**\n\t\t * Defines the path which will trigger the route handler.\n\t\t * @type {!string|RegExp|Function}\n\t\t * @protected\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t* Builds parsed data (regex and tokens) for this route.\n\t* @return {!Object}\n\t* @protected\n\t*/\n\tbuildParsedData_() {\n\t\tif (!this.parsedData_) {\n\t\t\tvar tokens = parse(this.path);\n\t\t\tvar regex = toRegex(tokens);\n\t\t\tthis.parsedData_ = {\n\t\t\t\tregex,\n\t\t\t\ttokens\n\t\t\t};\n\t\t}\n\t\treturn this.parsedData_;\n\t}\n\n\t/**\n\t * Extracts param data from the given path, according to this route.\n\t * @param {string} path The url path to extract params from.\n\t * @return {Object} The extracted data, if the path matches this route, or\n\t *     null otherwise.\n\t */\n\textractParams(path) {\n\t\tif (isString(this.path)) {\n\t\t\treturn extractData(this.buildParsedData_().tokens, path);\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Gets the route handler.\n\t * @return {!Function}\n\t */\n\tgetHandler() {\n\t\treturn this.handler;\n\t}\n\n\t/**\n\t * Gets the route path.\n\t * @return {!string|RegExp|Function}\n\t */\n\tgetPath() {\n\t\treturn this.path;\n\t}\n\n\t/**\n \t * Matches if the router can handle the tested path.\n \t * @param {!string} value Path to test (may contain the querystring part).\n\t * @return {boolean} Returns true if matches any route.\n\t */\n\tmatchesPath(value) {\n\t\tvar path = this.path;\n\n\t\tif (isFunction(path)) {\n\t\t\treturn path(value);\n\t\t}\n\t\tif (isString(path)) {\n\t\t\tpath = this.buildParsedData_().regex;\n\t\t}\n\t\tif (path instanceof RegExp) {\n\t\t\treturn value.search(path) > -1;\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nexport default Route;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\nclass Cacheable extends Disposable {\n\n\t/**\n\t * Abstract class for defining cacheable behavior.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the cached data.\n\t\t * @type {!Object}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.cache = null;\n\n\t\t/**\n\t\t * Holds whether class is cacheable.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.cacheable = false;\n\t}\n\n\t/**\n\t * Adds content to the cache.\n\t * @param {string} content Content to be cached.\n\t * @chainable\n\t */\n\taddCache(content) {\n\t\tif (this.cacheable) {\n\t\t\tthis.cache = content;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears the cache.\n\t * @chainable\n\t */\n\tclearCache() {\n\t\tthis.cache = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Gets the cached content.\n\t * @return {Object} Cached content.\n\t * @protected\n\t */\n\tgetCache() {\n\t\treturn this.cache;\n\t}\n\n\t/**\n\t * Whether the class is cacheable.\n\t * @return {boolean} Returns true when class is cacheable, false otherwise.\n\t */\n\tisCacheable() {\n\t\treturn this.cacheable;\n\t}\n\n\t/**\n\t * Sets whether the class is cacheable.\n\t * @param {boolean} cacheable\n\t */\n\tsetCacheable(cacheable) {\n\t\tif (!cacheable) {\n\t\t\tthis.clearCache();\n\t\t}\n\t\tthis.cacheable = cacheable;\n\t}\n\n}\n\nexport default Cacheable;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { globalEval } from 'metal-dom';\nimport Cacheable from '../cacheable/Cacheable';\nimport CancellablePromise from 'metal-promise';\n\nclass Screen extends Cacheable {\n\n\t/**\n\t * Screen class is a special type of route handler that provides helper\n\t * utilities that adds lifecycle and methods to provide content to each\n\t * registered surface.\n\t * @constructor\n\t * @extends {Cacheable}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the screen id.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.id = this.makeId_(getUid());\n\n\t\t/**\n\t\t * Holds the screen title. Relevant when the page title should be\n\t\t * upadated when screen is rendered.\n\t\t * @type {?string=}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.title = null;\n\t}\n\n\t/**\n\t * Fires when the screen is active. Allows a screen to perform any setup\n\t * that requires its DOM to be visible. Lifecycle.\n\t */\n\tactivate() {\n\t\tconsole.log('Screen [' + this + '] activate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * being deactivated. Can be used, for example, if the screen has unsaved\n\t * state. Lifecycle. Clean-up should not be preformed here, since the\n\t * navigation may still be cancelled. Do clean-up in deactivate.\n\t * @return {boolean=} If returns true, the current screen is locked and the\n\t *     next nagivation interrupted.\n\t */\n\tbeforeDeactivate() {\n\t\tconsole.log('Screen [' + this + '] beforeDeactivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the path before history update.\n\t * @path {!string} path Navigation path.\n\t * @return {!string} Navigation path to use on history.\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\treturn path;\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the state before history update.\n\t * @path {!object} state History state.\n\t * @return {!object} History state to use on history.\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\treturn state;\n\t}\n\n\t/**\n\t * Allows a screen to do any cleanup necessary after it has been\n\t * deactivated, for example cancelling outstanding requests or stopping\n\t * timers. Lifecycle.\n\t */\n\tdeactivate() {\n\t\tconsole.log('Screen [' + this + '] deactivate');\n\t}\n\n\t/**\n\t * Dispose a screen, either after it is deactivated (in the case of a\n\t * non-cacheable view) or when the App is itself disposed for whatever\n\t * reason. Lifecycle.\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tconsole.log('Screen [' + this + '] dispose');\n\t}\n\n\t/**\n\t * Allows a screen to evaluate scripts before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateScripts(surfaces) {\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tif (surfaces[sId].activeChild) {\n\t\t\t\tglobalEval.runScriptsInElement(surfaces[sId].activeChild);\n\t\t\t}\n\t\t});\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to evaluate styles before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateStyles() {\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to perform any setup immediately before the element is\n\t * made visible. Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\tflip(surfaces) {\n\t\tconsole.log('Screen [' + this + '] flip');\n\n\t\tvar transitions = [];\n\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tvar surface = surfaces[sId];\n\t\t\tvar deferred = surface.show(this.id);\n\t\t\ttransitions.push(deferred);\n\t\t});\n\n\t\treturn CancellablePromise.all(transitions);\n\t}\n\n\t/**\n\t * Gets the screen id.\n\t * @return {string}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Returns the content for the given surface, or null if the surface isn't\n\t * used by this screen. This will be called when a screen is initially\n\t * constructed or, if a screen is non-cacheable, when navigated.\n\t * @param {!string} surfaceId The id of the surface DOM element.\n\t * @param {!Object} params Params extracted from the current path.\n\t * @return {?string|Element=} This can return a string or node representing\n\t *     the content of the surface. If returns falsy values surface default\n\t *     content is restored.\n\t */\n\tgetSurfaceContent() {\n\t\tconsole.log('Screen [' + this + '] getSurfaceContent');\n\t}\n\n\t/**\n\t * Gets the screen title.\n\t * @return {?string=}\n\t */\n\tgetTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * Returns all contents for the surfaces. This will pass the loaded content\n\t * to <code>Screen.load</code> with all information you\n\t * need to fulfill the surfaces. Lifecycle.\n\t * @param {!string=} path The requested path.\n\t * @return {!CancellablePromise} This can return a string representing the\n\t *     contents of the surfaces or a promise, which will pause the navigation\n\t *     until it is resolved. This is useful for loading async content.\n\t */\n\tload() {\n\t\tconsole.log('Screen [' + this + '] load');\n\t\treturn CancellablePromise.resolve();\n\t}\n\n\t/**\n\t * Makes the id for the screen.\n\t * @param {!string} id The screen id the content belongs too.\n\t * @return {string}\n\t * @private\n\t */\n\tmakeId_(id) {\n\t\treturn 'screen_' + id;\n\t}\n\n\t/**\n\t * Sets the screen id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the screen title.\n\t * @param {?string=} title\n\t */\n\tsetTitle(title) {\n\t\tthis.title = title;\n\t}\n\n\t/**\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n}\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements\n * <code>Screen</code>.\n */\nScreen.isImplementedBy = function(object) {\n\treturn object instanceof Screen;\n};\n\nexport default Screen;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport { Disposable, isDefAndNotNull } from 'metal';\nimport { append, removeChildren, exitDocument } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tremoveChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tappend(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tappend(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {CancellablePromise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\t\treturn this.transition(from, to).thenAlways(() => {\n\t\t\tif (from && from !== to) {\n\t\t\t\texitDocument(from);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\texitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?CancellablePromise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn CancellablePromise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n","'use strict';\n\nimport { addClasses, delegate, match, on, removeClasses } from 'metal-dom';\nimport { array, async, isDefAndNotNull, isString } from 'metal';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport CancellablePromise from 'metal-promise';\nimport debounce from 'metal-debounce';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Holds the value of the browser path before a navigation is performed.\n\t\t * @type {!string}\n\t\t * @default the current browser path.\n\t\t * @protected\n\t\t */\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * When enabled, the route matching ignores query string from the path.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.ignoreQueryStringFromRoutePath = false;\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * When set to true there is a pendingNavigate that has not yet been\n\t\t * resolved or rejected.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.isNavigationPending = false;\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?CancellablePromise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\ton(globals.window, 'scroll', debounce(this.onScroll_.bind(this), 100)),\n\t\t\ton(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\ton(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tvar path = utils.getUrlPath(url);\n\t\tvar uri = new Uri(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHostname())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif (uri.getHash() && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tif (this.activeScreen && this.activeScreen.beforeDeactivate()) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('Cancelled by active screen'));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\t\tthis.isNavigationPending = true;\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(\n\t\t\t\t\tnextScreen,\n\t\t\t\t\tthis.surfaces,\n\t\t\t\t\tthis.extractParams(route, path)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.maybeUpdateScrollPositionState_())\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.isNavigationPending = false;\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Extracts params according to the given path and route.\n\t * @param {!Route} route\n\t * @param {string} path\n\t * @param {!Object}\n\t */\n\textractParams(route, path) {\n\t\treturn route.extractParams(this.getRoutePath(path));\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.isNavigationPending = false;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tglobals.capturedFormButtonElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\tpath = this.getRoutePath(path);\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Check if route matching is ignoring query string from the route path.\n\t * @return {boolean}\n\t */\n\tgetIgnoreQueryStringFromRoutePath() {\n\t\treturn this.ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Returns the given path formatted to be matched by a route. This will,\n   * for example, remove the base path from it, but make sure it will end\n   * with a '/'.\n\t * @param {string} path\n\t * @return {string}\n\t */\n\tgetRoutePath(path) {\n\t\tif (this.getIgnoreQueryStringFromRoutePath()) {\n\t\t\tpath = utils.getUrlPathWithoutHashAndSearch(path);\n\t\t\treturn utils.getUrlPathWithoutHashAndSearch(path.substr(this.basePath.length));\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\t\treturn utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, err) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + err + ')');\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tif (this.isNavigationPending && this.pendingNavigate) {\n\t\t\t\tthis.pendingNavigate.thenAlways(() => this.removeScreen(path), this);\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if hostname is an offsite link.\n\t * @param {!string} hostname Link hostname to compare with\n\t *     <code>globals.window.location.hostname</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(hostname) {\n\t\treturn hostname === globals.window.location.hostname;\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tglobals.capturedFormElement = event.capturedFormElement;\n\t\tglobals.capturedFormButtonElement = event.capturedFormButtonElement;\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href), false, event);\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tvar hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tglobals.window.scrollTo(anchorElement.offsetLeft, anchorElement.offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Maybe restore redirected path hash in case both the current path and\n\t * the given path are the same.\n\t * @param {!string} path Path before navigation.\n\t * @param {!string} redirectPath Path after navigation.\n\t * @param {!string} hash Hash to be added to the path.\n\t * @return {!string} Returns the path with the hash restored.\n\t */\n\tmaybeRestoreRedirectPathHash_(path, redirectPath, hash) {\n\t\tif (redirectPath === utils.getUrlPathWithoutHash(path)) {\n\t\t\treturn redirectPath + hash;\n\t\t}\n\t\treturn redirectPath;\n\t}\n\n\t/**\n\t * Maybe update scroll position in history state to anchor on path.\n\t * @param {!string} path Path containing anchor\n\t */\n\tmaybeUpdateScrollPositionState_() {\n\t\tvar hash = globals.window.location.hash;\n\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\tif (anchorElement) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(anchorElement.offsetTop, anchorElement.offsetLeft);\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @param {Event=} event Optional event object that triggered the navigation.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tnavigate(path, opt_replaceHistory, opt_event) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tevent: opt_event,\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tconst buttonSelector = 'button:not([type]),button[type=submit],input[type=submit]';\n\t\tif (match(globals.document.activeElement, buttonSelector)) {\n\t\t\tevent.capturedFormButtonElement = globals.document.activeElement;\n\t\t} else {\n\t\t\tevent.capturedFormButtonElement = form.querySelector(buttonSelector);\n\t\t}\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not navigate if the popstate was triggered by a hash change.\n\t\tif (utils.isCurrentBrowserPath(this.browserPathBeforeNavigate)) {\n\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(globals.window.pageYOffset, globals.window.pageXOffset);\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\taddClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.catch((reason) => {\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t})\n\t\t\t.thenAlways(() => {\n\t\t\t\tif (!this.pendingNavigate) {\n\t\t\t\t\tremoveClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t\t}\n\t\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {CancellablePromise} Returns a pending request cancellable promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn CancellablePromise.reject(new CancellablePromise.CancellationError('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tlet title = nextScreen.getTitle();\n\t\tif (!isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tlet redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tconst historyState = {\n\t\t\tform: isDefAndNotNull(globals.capturedFormElement),\n\t\t\tpath,\n\t\t\tredirectPath,\n\t\t\tscrollLeft: 0,\n\t\t\tscrollTop: 0,\n\t\t\tsenna: true\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tconst hash = new Uri(path).getHash();\n\t\tredirectPath = this.maybeRestoreRedirectPathHash_(path, redirectPath, hash);\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!Object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @param {!Object} params Params extracted from the current path.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces, params) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id, params);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves given scroll position into history state.\n\t * @param {!number} scrollTop Number containing the top scroll position to be saved.\n\t * @param {!number} scrollLeft Number containing the left scroll position to be saved.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_(scrollTop, scrollLeft) {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\t[state.scrollTop, state.scrollLeft] = [scrollTop, scrollLeft];\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = basePath;\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets if route matching should ignore query string from the route path.\n\t * @param {boolean} ignoreQueryStringFromRoutePath\n\t */\n\tsetIgnoreQueryStringFromRoutePath(ignoreQueryStringFromRoutePath) {\n\t\tthis.ignoreQueryStringFromRoutePath = ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Cancels pending navigate with <code>Cancel pending navigation</code> error.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tif (this.pendingNavigate) {\n\t\t\tthis.pendingNavigate.cancel('Cancel pending navigation');\n\t\t\tthis.pendingNavigate = null;\n\t\t}\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?CancellablePromise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new CancellablePromise((resolve) => sync() & async.nextTick(() => sync() & resolve()));\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\n\t\tlet titleNode = globals.document.querySelector('title');\n\t\tif (titleNode) {\n\t\t\ttitleNode.innerHTML = title;\n\t\t} else {\n\t\t\tglobals.document.title = title;\n\t\t}\n\t}\n\n}\n\nexport default App;\n","'use strict';\n\nimport { isDef, isDefAndNotNull } from 'metal';\nimport Uri from 'metal-uri';\nimport { CancellablePromise as Promise } from 'metal-promise';\n\nclass Ajax {\n\n\t/**\n\t * XmlHttpRequest's getAllResponseHeaders() method returns a string of\n\t * response headers according to the format described on the spec:\n\t * {@link http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method}.\n\t * This method parses that string into a user-friendly name/value pair\n\t * object.\n\t * @param {string} allHeaders All headers as string.\n\t * @return {!Array.<Object<string, string>>}\n\t */\n\tstatic parseResponseHeaders(allHeaders) {\n\t\tvar headers = [];\n\t\tif (!allHeaders) {\n\t\t\treturn headers;\n\t\t}\n\t\tvar pairs = allHeaders.split('\\u000d\\u000a');\n\t\tfor (var i = 0; i < pairs.length; i++) {\n\t\t\tvar index = pairs[i].indexOf('\\u003a\\u0020');\n\t\t\tif (index > 0) {\n\t\t\t\tvar name = pairs[i].substring(0, index);\n\t\t\t\tvar value = pairs[i].substring(index + 2);\n\t\t\t\theaders.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\n\t/**\n\t * Requests the url using XMLHttpRequest.\n\t * @param {!string} url\n\t * @param {!string} method\n\t * @param {?string} body\n\t * @param {MultiMap=} opt_headers\n\t * @param {MultiMap=} opt_params\n\t * @param {number=} opt_timeout\n\t * @param {boolean=} opt_sync\n\t * @param {boolean=} opt_withCredentials\n\t * @return {Promise} Deferred ajax request.\n\t * @protected\n\t */\n\tstatic request(url, method, body, opt_headers, opt_params, opt_timeout, opt_sync, opt_withCredentials) {\n\t\turl = url || '';\n\t\tmethod = method || 'GET';\n\n\t\tvar request = new XMLHttpRequest();\n\n\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\trequest.onload = function() {\n\t\t\t\tif (request.aborted) {\n\t\t\t\t\trequest.onerror();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolve(request);\n\t\t\t};\n\t\t\trequest.onerror = function() {\n\t\t\t\tvar error = new Error('Request error');\n\t\t\t\terror.request = request;\n\t\t\t\treject(error);\n\t\t\t};\n\t\t}).thenCatch(function(reason) {\n\t\t\trequest.abort();\n\t\t\tthrow reason;\n\t\t}).thenAlways(function() {\n\t\t\tclearTimeout(timeout);\n\t\t});\n\n\t\tif (opt_params) {\n\t\t\turl = new Uri(url).addParametersFromMultiMap(opt_params).toString();\n\t\t}\n\n\t\trequest.open(method, url, !opt_sync);\n\n\t\tif (opt_withCredentials) {\n\t\t\trequest.withCredentials = true;\n\t\t}\n\n\t\tif (opt_headers) {\n\t\t\topt_headers.names().forEach(function(name) {\n\t\t\t\trequest.setRequestHeader(name, opt_headers.getAll(name).join(', '));\n\t\t\t});\n\t\t}\n\n\t\trequest.send(isDef(body) ? body : null);\n\n\t\tif (isDefAndNotNull(opt_timeout)) {\n\t\t\tvar timeout = setTimeout(function() {\n\t\t\t\tpromise.cancel('Request timeout');\n\t\t\t}, opt_timeout);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n}\n\nexport default Ajax;\n","'use strict';\n\n/**\n * Holds value error messages.\n * @const\n */\nclass errors {\n}\n\n/**\n * Invalid status error message.\n * @type {string}\n * @static\n */\nerrors.INVALID_STATUS = 'Invalid status code';\n\n/**\n * Request error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_ERROR = 'Request error';\n\n/**\n * Request timeout error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_TIMEOUT = 'Request timeout';\n\nexport default errors;","'use strict';\n\n/**\n * Metal.js browser user agent detection. It's extremely recommended the usage\n * of feature checking over browser user agent sniffing. Unfortunately, in some\n * situations feature checking can be slow or even impossible, therefore use\n * this utility with caution.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>.\n */\nclass UA {\n\t/**\n\t * Gets the native userAgent string from navigator if it exists. If\n\t * navigator or navigator.userAgent string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativeUserAgent() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar userAgent = navigator.userAgent;\n\t\t\tif (userAgent) {\n\t\t\t\treturn userAgent;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Gets the native platform string from navigator if it exists. If\n\t * navigator or navigator.platform string is missing, returns an empty\n\t * string.\n\t * @return {string}\n\t * @private\n\t * @static\n\t */\n\tstatic getNativePlatform() {\n\t\tvar navigator = UA.globals.window.navigator;\n\t\tif (navigator) {\n\t\t\tvar platform = navigator.platform;\n\t\t\tif (platform) {\n\t\t\t\treturn platform;\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Whether the platform contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchPlatform(str) {\n\t\treturn UA.platform.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Whether the user agent contains the given string, ignoring case.\n\t * @param {string} str\n\t * @return {boolean}\n\t * @private\n\t * @static\n\t*/\n\tstatic matchUserAgent(str) {\n\t\treturn UA.userAgent.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Tests the user agent.\n\t * @param {string} userAgent The user agent string.\n\t * @static\n\t */\n\tstatic testUserAgent(userAgent = '', platform = '') {\n\t\t/**\n\t\t * Holds the user agent value extracted from browser native user agent.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.userAgent = userAgent;\n\n\t\t/**\n\t\t * Holds the platform value extracted from browser native platform.\n\t\t * @type {string}\n\t\t * @static\n\t\t */\n\t\tUA.platform = platform;\n\n\t\t/**\n\t\t * Whether the user's OS is Mac.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isMac = UA.matchPlatform('Mac');\n\n\t\t/**\n\t\t * Whether the user's OS is Win.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isWin = UA.matchPlatform('Win');\n\n\t\t/**\n\t\t * Whether the user's browser is Opera.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isOpera = UA.matchUserAgent('Opera') || UA.matchUserAgent('OPR');\n\n\t\t/**\n\t\t * Whether the user's browser is IE.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIe = UA.matchUserAgent('Trident') || UA.matchUserAgent('MSIE');\n\n\t\t/**\n\t\t * Whether the user's browser is Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isEdge = UA.matchUserAgent('Edge');\n\n\t\t/**\n\t\t * Whether the user's browser is IE or Edge.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isIeOrEdge = UA.isIe || UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Chrome.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isChrome = (UA.matchUserAgent('Chrome') || UA.matchUserAgent('CriOS')) && !UA.isOpera && !UA.isEdge;\n\n\t\t/**\n\t\t * Whether the user's browser is Safari.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isSafari = UA.matchUserAgent('Safari') && !(UA.isChrome || UA.isOpera || UA.isEdge);\n\n\t\t/**\n\t\t * Whether the user's browser is Firefox.\n\t\t * @type {boolean}\n\t\t * @static\n\t\t */\n\t\tUA.isFirefox = UA.matchUserAgent('Firefox');\n\t}\n}\n\n/**\n * Exposes global references.\n * @type {object}\n * @static\n */\nUA.globals = {\n\twindow: window\n};\n\nUA.testUserAgent(UA.getNativeUserAgent(), UA.getNativePlatform());\n\nexport default UA;\n","'use strict';\n\nimport { isDefAndNotNull } from 'metal';\nimport Ajax from 'metal-ajax';\nimport { MultiMap } from 'metal-structs';\nimport CancellablePromise from 'metal-promise';\nimport errors from '../errors/errors';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Screen from './Screen';\nimport Uri from 'metal-uri';\nimport UA from 'metal-useragent';\n\nclass RequestScreen extends Screen {\n\n\t/**\n\t * Request screen abstract class to perform io operations on descendant\n\t * screens.\n\t * @constructor\n\t * @extends {Screen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t * @default true\n\t\t */\n\t\tthis.cacheable = true;\n\n\t\t/**\n\t\t * Holds default http headers to set on request.\n\t\t * @type {?Object=}\n\t\t * @default {\n\t\t *   'X-PJAX': 'true',\n\t\t *   'X-Requested-With': 'XMLHttpRequest'\n\t\t * }\n\t\t * @protected\n\t\t */\n\t\tthis.httpHeaders = {\n\t\t\t'X-PJAX': 'true',\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t};\n\n\t\t/**\n\t\t * Holds default http method to perform the request.\n\t\t * @type {!string}\n\t\t * @default RequestScreen.GET\n\t\t * @protected\n\t\t */\n\t\tthis.httpMethod = RequestScreen.GET;\n\n\t\t/**\n\t\t * Holds the XHR object responsible for the request.\n\t\t * @type {XMLHttpRequest}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.request = null;\n\n\t\t/**\n\t\t * Holds the request timeout in milliseconds.\n\t\t * @type {!number}\n\t\t * @default 30000\n\t\t * @protected\n\t\t */\n\t\tthis.timeout = 30000;\n\t}\n\n\t/**\n\t * Asserts that response status code is valid.\n\t * @param {number} status\n\t * @protected\n\t */\n\tassertValidResponseStatusCode(status) {\n\t\tif (!this.isValidResponseStatusCode(status)) {\n\t\t\tvar error = new Error(errors.INVALID_STATUS);\n\t\t\terror.invalidStatus = true;\n\t\t\terror.statusCode = status;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\tvar redirectPath = this.getRequestPath();\n\t\tif (redirectPath && redirectPath !== path) {\n\t\t\treturn redirectPath;\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\t// If state is ours and navigate to post-without-redirect-get set\n\t\t// history state to null, that way Senna will reload the page on\n\t\t// popstate since it cannot predict post data.\n\t\tif (state.senna && state.form && state.redirectPath === state.path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Formats load path before invoking ajax call.\n\t * @param {string} path\n\t * @return {string} Formatted path;\n\t * @protected\n\t */\n\tformatLoadPath(path) {\n\t\tvar uri = new Uri(path);\n\n\t\turi.setHostname(globals.window.location.hostname);\n\t\turi.setProtocol(globals.window.location.protocol);\n\n\t\tif (globals.window.location.port) {\n\t\t\turi.setPort(globals.window.location.port);\n\t\t}\n\n\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\treturn uri.makeUnique().toString();\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets the http headers.\n\t * @return {?Object=}\n\t */\n\tgetHttpHeaders() {\n\t\treturn this.httpHeaders;\n\t}\n\n\t/**\n\t * Gets the http method.\n\t * @return {!string}\n\t */\n\tgetHttpMethod() {\n\t\treturn this.httpMethod;\n\t}\n\n\t/**\n\t * Gets request path.\n\t * @return {string=}\n\t */\n\tgetRequestPath() {\n\t\tvar request = this.getRequest();\n\t\tif (request) {\n\t\t\tvar requestPath = request.requestPath;\n\t\t\tvar responseUrl = this.maybeExtractResponseUrlFromRequest(request);\n\t\t\tif (responseUrl) {\n\t\t\t\trequestPath = responseUrl;\n\t\t\t}\n\t\t\tif (UA.isIeOrEdge && this.httpMethod === RequestScreen.GET) {\n\t\t\t\trequestPath = new Uri(requestPath).removeUnique().toString();\n\t\t\t}\n\t\t\treturn utils.getUrlPath(requestPath);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the request object.\n\t * @return {?Object}\n\t */\n\tgetRequest() {\n\t\treturn this.request;\n\t}\n\n\t/**\n\t * Gets the request timeout.\n\t * @return {!number}\n\t */\n\tgetTimeout() {\n\t\treturn this.timeout;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered\n\t * valid.\n\t * @param {number} statusCode\n\t */\n\tisValidResponseStatusCode(statusCode) {\n\t\treturn statusCode >= 200 && statusCode <= 399;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\tconst cache = this.getCache();\n\t\tif (isDefAndNotNull(cache)) {\n\t\t\treturn CancellablePromise.resolve(cache);\n\t\t}\n\t\tlet body = null;\n\t\tlet httpMethod = this.httpMethod;\n\t\tconst headers = new MultiMap();\n\t\tObject.keys(this.httpHeaders).forEach(header => headers.add(header, this.httpHeaders[header]));\n\t\tif (globals.capturedFormElement) {\n\t\t\tbody = new FormData(globals.capturedFormElement);\n\t\t\tthis.maybeAppendSubmitButtonValue(body);\n\t\t\thttpMethod = RequestScreen.POST;\n\t\t\tif (UA.isIeOrEdge) {\n\t\t\t\theaders.add('If-None-Match', '\"0\"');\n\t\t\t}\n\t\t}\n\t\tconst requestPath = this.formatLoadPath(path);\n\t\treturn Ajax\n\t\t\t.request(requestPath, httpMethod, body, headers, null, this.timeout)\n\t\t\t.then(xhr => {\n\t\t\t\tthis.setRequest(xhr);\n\t\t\t\tthis.assertValidResponseStatusCode(xhr.status);\n\t\t\t\tif (httpMethod === RequestScreen.GET && this.isCacheable()) {\n\t\t\t\t\tthis.addCache(xhr.responseText);\n\t\t\t\t}\n\t\t\t\txhr.requestPath = requestPath;\n\t\t\t\treturn xhr.responseText;\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tswitch (reason.message) {\n\t\t\t\t\tcase errors.REQUEST_TIMEOUT:\n\t\t\t\t\t\treason.timeout = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase errors.REQUEST_ERROR:\n\t\t\t\t\t\treason.requestError = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Adds aditional data to the body of the request in case a submit button\n\t * is captured during form submission.\n\t * @param {!FormData} body The FormData containing the request body.\n\t */\n\tmaybeAppendSubmitButtonValue(body) {\n\t\tconst button = globals.capturedFormButtonElement;\n\t\tif (button && button.name) {\n\t\t\tbody.append(button.name, button.value);\n\t\t}\n\t}\n\n\t/**\n\t * The following method tries to extract the response url value by checking\n\t * the custom response header 'X-Request-URL' if proper value is not present\n\t * in XMLHttpRequest. The value of responseURL will be the final URL\n\t * obtained after any redirects. Internet Explorer, Edge and Safari <= 7\n\t * does not yet support the feature. For more information see:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n\t * https://xhr.spec.whatwg.org/#the-responseurl-attribute\n\t * @param {XMLHttpRequest} request\n\t * @return {?string} Response url best match.\n\t */\n\tmaybeExtractResponseUrlFromRequest(request) {\n\t\tvar responseUrl = request.responseURL;\n\t\tif (responseUrl) {\n\t\t\treturn responseUrl;\n\t\t}\n\t\treturn request.getResponseHeader(RequestScreen.X_REQUEST_URL_HEADER);\n\t}\n\n\t/**\n\t * Sets the http headers.\n\t * @param {?Object=} httpHeaders\n\t */\n\tsetHttpHeaders(httpHeaders) {\n\t\tthis.httpHeaders = httpHeaders;\n\t}\n\n\t/**\n\t * Sets the http method.\n\t * @param {!string} httpMethod\n\t */\n\tsetHttpMethod(httpMethod) {\n\t\tthis.httpMethod = httpMethod.toLowerCase();\n\t}\n\n\t/**\n\t * Sets the request object.\n\t * @param {?Object} request\n\t */\n\tsetRequest(request) {\n\t\tthis.request = request;\n\t}\n\n\t/**\n\t * Sets the request timeout in milliseconds.\n\t * @param {!number} timeout\n\t */\n\tsetTimeout(timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n}\n\n/**\n * Holds value for method get.\n * @type {string}\n * @default 'get'\n * @static\n */\nRequestScreen.GET = 'get';\n\n/**\n * Holds value for method post.\n * @type {string}\n * @default 'post'\n * @static\n */\nRequestScreen.POST = 'post';\n\n/**\n * Fallback http header to retrieve response request url.\n * @type {string}\n * @default 'X-Request-URL'\n * @static\n */\nRequestScreen.X_REQUEST_URL_HEADER = 'X-Request-URL';\n\nexport default RequestScreen;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { buildFragment, exitDocument, globalEval, globalEvalStyles, match } from 'metal-dom';\nimport CancellablePromise from 'metal-promise';\nimport globals from '../globals/globals';\nimport RequestScreen from './RequestScreen';\nimport Surface from '../surface/Surface';\nimport UA from 'metal-useragent';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass HtmlScreen extends RequestScreen {\n\n\t/**\n\t * Screen class that perform a request and extracts surface contents from\n\t * the response content.\n\t * @constructor\n\t * @extends {RequestScreen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the title selector. Relevant to extract the <code><title></code>\n\t\t * element from request fragments to use as the screen title.\n\t\t * @type {!string}\n\t\t * @default title\n\t\t * @protected\n\t\t */\n\t\tthis.titleSelector = 'title';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tactivate() {\n\t\tsuper.activate();\n\t\tthis.releaseVirtualDocument();\n\t\tthis.pendingStyles = null;\n\t}\n\n\t/**\n\t * Allocates virtual document for content. After allocated virtual document\n\t * can be accessed by <code>this.virtualDocument</code>.\n\t * @param {!string} htmlString\n\t */\n\tallocateVirtualDocumentForContent(htmlString) {\n\t\tif (!this.virtualDocument) {\n\t\t\tthis.virtualDocument = globals.document.createElement('html');\n\t\t}\n\n\t\tthis.copyNodeAttributesFromContent_(htmlString, this.virtualDocument);\n\n\t\tthis.virtualDocument.innerHTML = htmlString;\n\t}\n\n\t/**\n\t * Customizes logic to append styles into document. Relevant to when\n\t * tracking a style by id make sure to re-positions the new style in the\n\t * same dom order.\n\t * @param {Element} newStyle\n\t */\n\tappendStyleIntoDocument_(newStyle) {\n\t\tvar isTemporaryStyle = match(newStyle, HtmlScreen.selectors.stylesTemporary);\n\t\tif (isTemporaryStyle) {\n\t\t\tthis.pendingStyles.push(newStyle);\n\t\t}\n\t\tif (newStyle.id) {\n\t\t\tvar styleInDoc = globals.document.getElementById(newStyle.id);\n\t\t\tif (styleInDoc) {\n\t\t\t\tstyleInDoc.parentNode.insertBefore(newStyle, styleInDoc.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tglobals.document.head.appendChild(newStyle);\n\t}\n\n\t/**\n\t * If body is used as surface forces the requested documents to have same id\n\t * of the initial page.\n\t */\n\tassertSameBodyIdInVirtualDocument() {\n\t\tvar bodySurface = this.virtualDocument.querySelector('body');\n\t\tif (!globals.document.body.id) {\n\t\t\tglobals.document.body.id = 'senna_surface_' + getUid();\n\t\t}\n\t\tif (bodySurface) {\n\t\t\tbodySurface.id = globals.document.body.id;\n\t\t}\n\t}\n\n\t/**\n\t * Copies attributes from the <html> tag of content to the given node.\n\t */\n\tcopyNodeAttributesFromContent_(content, node) {\n\t\tcontent = content.replace(/[<]\\s*html/ig, '<senna');\n\t\tcontent = content.replace(/\\/html\\s*\\>/ig, '/senna>');\n\t\tnode.innerHTML = content;\n\t\tvar placeholder = node.querySelector('senna');\n\t\tif (placeholder) {\n\t\t\tutils.clearNodeAttributes(node);\n\t\t\tutils.copyNodeAttributes(placeholder, node);\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tdisposeInternal() {\n\t\tthis.disposePendingStyles();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Disposes pending styles if screen get disposed prior to its loading.\n\t */\n\tdisposePendingStyles() {\n\t\tif (this.pendingStyles) {\n\t\t\tthis.pendingStyles.forEach((style) => exitDocument(style));\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateScripts(surfaces) {\n\t\tvar evaluateTrackedScripts = this.evaluateTrackedResources_(\n\t\t\tglobalEval.runScriptsInElement, HtmlScreen.selectors.scripts,\n\t\t\tHtmlScreen.selectors.scriptsTemporary, HtmlScreen.selectors.scriptsPermanent);\n\n\t\treturn evaluateTrackedScripts.then(() => super.evaluateScripts(surfaces));\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateStyles(surfaces) {\n\t\tthis.pendingStyles = [];\n\t\tvar evaluateTrackedStyles = this.evaluateTrackedResources_(\n\t\t\tglobalEvalStyles.runStylesInElement, HtmlScreen.selectors.styles,\n\t\t\tHtmlScreen.selectors.stylesTemporary, HtmlScreen.selectors.stylesPermanent,\n\t\t\tthis.appendStyleIntoDocument_.bind(this));\n\n\t\treturn evaluateTrackedStyles.then(() => super.evaluateStyles(surfaces));\n\t}\n\n\t/**\n\t * Evaluates tracked resources inside incoming fragment and remove existing\n\t * temporary resources.\n\t * @param {?function()} appendFn Function to append the node into document.\n\t * @param {!string} selector Selector used to find resources to track.\n\t * @param {!string} selectorTemporary Selector used to find temporary\n\t *     resources to track.\n\t * @param {!string} selectorPermanent Selector used to find permanent\n\t *     resources to track.\n\t * @param {!function} opt_appendResourceFn Optional function used to\n\t *     evaluate fragment containing resources.\n\t * @return {CancellablePromise} Deferred that waits resources evaluation to\n\t *     complete.\n\t * @private\n\t */\n\tevaluateTrackedResources_(evaluatorFn, selector, selectorTemporary, selectorPermanent, opt_appendResourceFn) {\n\t\tvar tracked = this.virtualQuerySelectorAll_(selector);\n\t\tvar temporariesInDoc = this.querySelectorAll_(selectorTemporary);\n\t\tvar permanentsInDoc = this.querySelectorAll_(selectorPermanent);\n\n\t\t// Adds permanent resources in document to cache.\n\t\tpermanentsInDoc.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\tif (resourceKey) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\tvar frag = buildFragment();\n\t\ttracked.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\t// Do not load permanent resources if already in document.\n\t\t\tif (!HtmlScreen.permanentResourcesInDoc[resourceKey]) {\n\t\t\t\tfrag.appendChild(resource);\n\t\t\t}\n\t\t\t// If resource has key and is permanent add to cache.\n\t\t\tif (resourceKey && match(resource, selectorPermanent)) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\treturn new CancellablePromise((resolve) => {\n\t\t\tevaluatorFn(frag, () => {\n\t\t\t\ttemporariesInDoc.forEach((resource) => exitDocument(resource));\n\t\t\t\tresolve();\n\t\t\t}, opt_appendResourceFn);\n\t\t});\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tflip(surfaces) {\n\t\treturn super.flip(surfaces).then(() => {\n\t\t\tutils.clearNodeAttributes(document.documentElement);\n\t\t\tutils.copyNodeAttributes(this.virtualDocument, document.documentElement);\n\t\t});\n\t}\n\n\t/**\n\t * Extracts a key to identify the resource based on its attributes.\n\t * @param {Element} resource\n\t * @return {string} Extracted key based on resource attributes in order of\n\t *     preference: id, href, src.\n\t */\n\tgetResourceKey_(resource) {\n\t\treturn resource.id || resource.href || resource.src || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetSurfaceContent(surfaceId) {\n\t\tvar surface = this.virtualDocument.querySelector('#' + surfaceId);\n\t\tif (surface) {\n\t\t\tvar defaultChild = surface.querySelector('#' + surfaceId + '-' + Surface.DEFAULT);\n\t\t\tif (defaultChild) {\n\t\t\t\treturn defaultChild.innerHTML;\n\t\t\t}\n\t\t\treturn surface.innerHTML; // If default content not found, use surface content\n\t\t}\n\t}\n\n\t/**\n\t * Gets the title selector.\n\t * @return {!string}\n\t */\n\tgetTitleSelector() {\n\t\treturn this.titleSelector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\treturn super.load(path)\n\t\t\t.then(content => {\n\t\t\t\tthis.allocateVirtualDocumentForContent(content);\n\t\t\t\tthis.resolveTitleFromVirtualDocument();\n\t\t\t\tthis.assertSameBodyIdInVirtualDocument();\n\t\t\t\tif (UA.isIe) {\n\t\t\t\t\tthis.makeTemporaryStylesHrefsUnique_();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queries temporary styles from virtual document, and makes them unique.\n\t * This is necessary for caching and load event firing issues specific to\n\t * IE11. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7940171/\n\t */\n\tmakeTemporaryStylesHrefsUnique_() {\n\t\tvar temporariesInDoc = this.virtualQuerySelectorAll_(HtmlScreen.selectors.stylesTemporary);\n\t\ttemporariesInDoc.forEach((style) => this.replaceStyleAndMakeUnique_(style));\n\t}\n\n\t/**\n\t * Creates a new element from given, copies attributes, mutates href to be\n\t * unique to prevent caching and more than one load/error event from firing.\n\t */\n\treplaceStyleAndMakeUnique_(style) {\n\t\tif (style.href) {\n\t\t\tvar newStyle = globals.document.createElement(style.tagName);\n\t\t\tstyle.href = new Uri(style.href).makeUnique().toString();\n\t\t\tutils.copyNodeAttributes(style, newStyle);\n\t\t\tstyle.parentNode.replaceChild(newStyle, style);\n\t\t\tstyle.disabled = true;\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from virtual document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tvirtualQuerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(this.virtualDocument.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Releases virtual document allocated for content.\n\t */\n\treleaseVirtualDocument() {\n\t\tthis.virtualDocument = null;\n\t}\n\n\t/**\n\t * Resolves title from allocated virtual document.\n\t */\n\tresolveTitleFromVirtualDocument() {\n\t\tvar title = this.virtualDocument.querySelector(this.titleSelector);\n\t\tif (title) {\n\t\t\tthis.setTitle(title.textContent.trim());\n\t\t}\n\t}\n\n\t/**\n\t * Sets the title selector.\n\t * @param {!string} titleSelector\n\t */\n\tsetTitleSelector(titleSelector) {\n\t\tthis.titleSelector = titleSelector;\n\t}\n\n}\n\n/**\n * Helper selectors for tracking resources.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.selectors = {\n\tscripts: 'script[data-senna-track]',\n\tscriptsPermanent: 'script[data-senna-track=\"permanent\"]',\n\tscriptsTemporary: 'script[data-senna-track=\"temporary\"]',\n\tstyles: 'style[data-senna-track],link[data-senna-track]',\n\tstylesPermanent: 'style[data-senna-track=\"permanent\"],link[data-senna-track=\"permanent\"]',\n\tstylesTemporary: 'style[data-senna-track=\"temporary\"],link[data-senna-track=\"temporary\"]'\n};\n\n/**\n * Caches permanent resource keys.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.permanentResourcesInDoc = {};\n\nexport default HtmlScreen;\n","'use strict';\n\nimport { Disposable, getUid, isDefAndNotNull, isElement, object } from 'metal';\nimport dataAttributes from './dataAttributes';\nimport globals from '../globals/globals';\nimport App from './App';\nimport HtmlScreen from '../screen/HtmlScreen';\nimport Route from '../route/Route';\n\nclass AppDataAttributeHandler extends Disposable {\n\n\t/**\n\t * Initilizes App, register surfaces and routes from data attributes.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the app reference initialized by data attributes.\n\t\t * @type {App}\n\t\t * @default null\n\t\t */\n\t\tthis.app = null;\n\n\t\t/**\n\t\t * Holds the base element to search initialization data attributes. This\n\t\t * element is the container used to enable initialization based on the\n\t\t * presence of `data-senna` attribute.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t */\n\t\tthis.baseElement = null;\n\t}\n\n\t/**\n\t * Inits application based on information scanned from document.\n\t */\n\thandle() {\n\t\tif (!isElement(this.baseElement)) {\n\t\t\tthrow new Error('Senna data attribute handler base element ' +\n\t\t\t\t'not set or invalid, try setting a valid element that ' +\n\t\t\t\t'contains a `data-senna` attribute.');\n\t\t}\n\n\t\tif (!this.baseElement.hasAttribute(dataAttributes.senna)) {\n\t\t\tconsole.log('Senna was not initialized from data attributes. ' +\n\t\t\t\t'In order to enable its usage from data attributes try setting ' +\n\t\t\t\t'in the base element, e.g. `<body data-senna>`.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.app) {\n\t\t\tthrow new Error('Senna app was already initialized.');\n\t\t}\n\n\t\tconsole.log('Senna initialized from data attribute.');\n\n\t\tthis.app = new App();\n\t\tthis.maybeAddRoutes_();\n\t\tthis.maybeAddSurfaces_();\n\t\tthis.maybeSetBasePath_();\n\t\tthis.maybeSetLinkSelector_();\n\t\tthis.maybeSetLoadingCssClass_();\n\t\tthis.maybeSetUpdateScrollPosition_();\n\t\tthis.maybeDispatch_();\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tif (this.app) {\n\t\t\tthis.app.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the app reference.\n\t * @return {App}\n\t */\n\tgetApp() {\n\t\treturn this.app;\n\t}\n\n\t/**\n\t * Gets the base element.\n\t * @return {Element} baseElement\n\t */\n\tgetBaseElement() {\n\t\treturn this.baseElement;\n\t}\n\n\t/**\n\t * Maybe adds app routes from link elements that are `senna-route`.\n\t */\n\tmaybeAddRoutes_() {\n\t\tvar routesSelector = 'link[rel=\"senna-route\"]';\n\t\tthis.querySelectorAllAsArray_(routesSelector).forEach((link) => this.maybeParseLinkRoute_(link));\n\t\tif (!this.app.hasRoutes()) {\n\t\t\tthis.app.addRoutes(new Route(/.*/, HtmlScreen));\n\t\t\tconsole.log('Senna can\\'t find route elements, adding default.');\n\t\t}\n\t}\n\n\t/**\n\t * Maybe adds app surfaces by scanning `data-senna-surface` data attribute.\n\t */\n\tmaybeAddSurfaces_() {\n\t\tvar surfacesSelector = '[' + dataAttributes.surface + ']';\n\t\tthis.querySelectorAllAsArray_(surfacesSelector).forEach((surfaceElement) => {\n\t\t\tthis.updateElementIdIfSpecialSurface_(surfaceElement);\n\t\t\tthis.app.addSurfaces(surfaceElement.id);\n\t\t});\n\t}\n\n\t/**\n\t * Dispatches app navigation to the current path when initializes.\n\t */\n\tmaybeDispatch_() {\n\t\tif (this.baseElement.hasAttribute(dataAttributes.dispatch)) {\n\t\t\tthis.app.dispatch();\n\t\t}\n\t}\n\n\t/**\n\t * Adds app route by parsing valid link elements. A valid link element is of\n\t * the kind `rel=\"senna-route\"`.\n\t * @param {Element} link\n\t */\n\tmaybeParseLinkRoute_(link) {\n\t\tvar route = new Route(this.maybeParseLinkRoutePath_(link), this.maybeParseLinkRouteHandler_(link));\n\t\tthis.app.addRoutes(route);\n\t\tconsole.log('Senna scanned route ' + route.getPath());\n\t}\n\n\t/**\n\t * Maybe parse link route handler.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRouteHandler_(link) {\n\t\tvar handler = link.getAttribute('type');\n\t\tif (isDefAndNotNull(handler)) {\n\t\t\thandler = object.getObjectByName(handler);\n\t\t}\n\t\treturn handler;\n\t}\n\n\t/**\n\t * Maybe parse link route path.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRoutePath_(link) {\n\t\tvar path = link.getAttribute('href');\n\t\tif (isDefAndNotNull(path)) {\n\t\t\tif (path.indexOf('regex:') === 0) {\n\t\t\t\tpath = new RegExp(path.substring(6));\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Maybe sets app base path from `data-senna-base-path` data attribute.\n\t */\n\tmaybeSetBasePath_() {\n\t\tvar basePath = this.baseElement.getAttribute(dataAttributes.basePath);\n\t\tif (isDefAndNotNull(basePath)) {\n\t\t\tthis.app.setBasePath(basePath);\n\t\t\tconsole.log('Senna scanned base path ' + basePath);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link selector from `data-senna-link-selector` data\n\t * attribute.\n\t */\n\tmaybeSetLinkSelector_() {\n\t\tvar linkSelector = this.baseElement.getAttribute(dataAttributes.linkSelector);\n\t\tif (isDefAndNotNull(linkSelector)) {\n\t\t\tthis.app.setLinkSelector(linkSelector);\n\t\t\tconsole.log('Senna scanned link selector ' + linkSelector);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link loading css class from `data-senna-loading-css-class`\n\t * data attribute.\n\t */\n\tmaybeSetLoadingCssClass_() {\n\t\tvar loadingCssClass = this.baseElement.getAttribute(dataAttributes.loadingCssClass);\n\t\tif (isDefAndNotNull(loadingCssClass)) {\n\t\t\tthis.app.setLoadingCssClass(loadingCssClass);\n\t\t\tconsole.log('Senna scanned loading css class ' + loadingCssClass);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app update scroll position from\n\t * `data-senna-update-scroll-position` data attribute.\n\t */\n\tmaybeSetUpdateScrollPosition_() {\n\t\tvar updateScrollPosition = this.baseElement.getAttribute(dataAttributes.updateScrollPosition);\n\t\tif (isDefAndNotNull(updateScrollPosition)) {\n\t\t\tif (updateScrollPosition === 'false') {\n\t\t\t\tthis.app.setUpdateScrollPosition(false);\n\t\t\t} else {\n\t\t\t\tthis.app.setUpdateScrollPosition(true);\n\t\t\t}\n\t\t\tconsole.log('Senna scanned update scroll position ' + updateScrollPosition);\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAllAsArray_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Updates element id if handled as special surface element. Some surfaces\n\t * are slightly different from others, like when threating <code>body</code>\n\t * as surface.\n\t * @param {Element} element\n\t */\n\tupdateElementIdIfSpecialSurface_(element) {\n\t\tif (!element.id && element === globals.document.body) {\n\t\t\telement.id = 'senna_surface_' + getUid();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the base element.\n\t * @param {Element} baseElement\n\t */\n\tsetBaseElement(baseElement) {\n\t\tthis.baseElement = baseElement;\n\t}\n\n}\n\nexport default AppDataAttributeHandler;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport AppDataAttributeHandler from './AppDataAttributeHandler';\n\n/**\n * Data attribute handler.\n * @type {AppDataAttributeHandler}\n */\nvar dataAttributeHandler = new AppDataAttributeHandler();\n\nglobals.document.addEventListener('DOMContentLoaded', function() {\n\tdataAttributeHandler.setBaseElement(globals.document.body);\n\tdataAttributeHandler.handle();\n});\n\nexport default dataAttributeHandler;"],"names":["globals","window","document","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","Math","random","abstractMethod","Error","disableCompatibilityMode","undefined","enableCompatibilityMode","opt_data","getCompatibilityModeData","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","getFunctionName","fn","name","str","toString","substring","indexOf","getStaticProperty","ctor","propertyName","opt_mergeFn","mergedName","hasOwnProperty","merged","__proto__","isPrototypeOf","Function","mergeFn","getUid","opt_object","opt_noInheritance","id","identityFunction","opt_returnValue","isBoolean","val","isDef","isDefAndNotNull","isNull","isDocument","nodeType","isDocumentFragment","isElement","isFunction","isNumber","isWindow","isObject","type","isPromise","then","isString","String","nullFunction","array","arr1","arr2","length","i","arr","opt_output","output","Array","isArray","flatten","push","obj","rv","removeAt","prototype","splice","call","start","opt_end","sliced","end","async","throwException","exception","nextTick","run","callback","opt_context","workQueueScheduled_","processWorkQueue","workQueue_","WorkItem_","workItems","workItem","scope","e","cb","bind","wrapCallback_","setImmediate","setImmediate_","getSetImmediateEmulator_","Channel","MessageChannel","postMessage","addEventListener","iframe","createElement","style","display","src","documentElement","appendChild","win","contentWindow","doc","open","write","close","message","origin","location","protocol","host","onmessage","data","port1","port2","channel","head","tail","next","script","onreadystatechange","parentNode","removeChild","Disposable","disposed_","disposeInternal","object","target","key","source","arguments","opt_obj","parts","split","reduce","part","mappedObj","keys","Object","obj1","obj2","keys1","keys2","string","str1","str2","test1","toLowerCase","test2","replace","x","floor","abs","Date","now","hash","len","charCodeAt","value","parseFromAnchor","opt_uri","link","href","hostname","password","pathname","port","search","username","parse","URL","create","MultiMap","values","size","map","names","JSON","stringify","set","TreeNode","value_","parent_","children_","child","setParent","node","current","getParent","ancestors","index","getChildren","EMPTY_ARRAY","depth","root","getChildCount","remove","parent","opt_preorderFn","opt_postorderFn","forEach","traverse","assertChildHasNoParent","parseFn_","Uri","url","maybeAddProtocolAndHostname_","multimap","getAll","addParameterValue","ensureQueryInitialized_","query","add","param","urlDecode","getHostname","getPort","HOSTNAME_PLACEHOLDER","getHost","getProtocol","get","querystring","getParameterNames","getParameterValues","encodeURIComponent","slice","contains","setParameterValue","RANDOM_PARAM","getRandomString","DEFAULT_PROTOCOL","charAt","removeParameter","getPathname","getSearch","getHash","parsed","substr","normalizeObject","parseFn","basePath","paths","path","concat","join","decodeURIComponent","utils","attributes","attribute","setAttribute","getCurrentBrowserPathWithoutHash","uri","currentBrowserPath","getUrlPathWithoutHash","getUrlPath","history","pushState","removeAttribute","METAL_DATA","domData","element","opt_name","opt_initialVal","EventHandle","emitter","event","listener","emitter_","event_","listener_","removeListener","isDisposed","singleArray_","EventEmitter","events_","listenerHandlers_","shouldUseFacade_","holder","handler","opt_default","validateListener_","events","toEventsArray_","addSingleListener_","opt_origin","runListenerHandlers_","addHandler_","getShouldUseFacade","facade","preventedDefault","listeners","getRawListeners_","args","runListeners_","buildFacade_","directListeners","toArray","amount","many_","self","handlerInternal","apply","listenerObj","removeMatchingListenerObjs_","addListener","many","opt_events","listenerObjs","finalListeners","matchesListener_","off","handlers","defaultListeners","default","j","shouldUseFacade","TypeError","EventEmitterProxy","originEmitter","targetEmitter","opt_blacklist","opt_whitelist","blacklist_","originEmitter_","pendingEvents_","proxiedEvents_","targetEmitter_","whitelist_","startProxy_","on","removeListeners_","emit","shouldProxyEvent_","tryToAddListener_","proxyEvent","onListener","addListener_","emitOnTarget_","EventHandler","eventHandles_","DomDelegatedEventHandle","opt_selector","selector_","delegating","selector","selectors","DomEventHandle","opt_capture","capture_","removeEventListener","elementsByTag_","supportCache_","customEvents","LAST_CONTAINER","USE_CAPTURE","addClasses","elements","classes","addClassesWithNative_","className","classList","addClassesWithoutNative_","elementClassName","classesToAppend","addElementListener_","eventName","addSelectorListener_","delegatingData","addToArr_","attachDelegateEvent_","handleDelegateEvent_","closest","match","append","buildFragment","NodeList","childArr","htmlString","tempDiv","innerHTML","firstChild","fragment","createDocumentFragment","element1","element2","delegate","selectorOrTarget","customConfig","originalEvent","defaultListener_","isAbleToInteractWith_","opt_eventObj","button","matchesSelector","tagName","disabled","exitDocument","ret","container","currentTarget","defFns","triggerDelegatedListeners_","triggerDefaultDelegatedListeners_","delegateTarget","p","Element","m","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchFallback_","nodes","querySelectorAll","normalizeDelegateEvent_","stopPropagation","stopPropagation_","stopImmediatePropagation","stopImmediatePropagation_","once","domEventHandle","registerCustomEvent","removeChildren","removeClasses","removeClassesWithNative_","removeClassesWithoutNative_","trim","stopped","stoppedImmediate","supportsEvent","tag","defaultPrevented","defaultFns","currElement","limit","triggerElementListeners_","triggerSelectorListeners_","lastContainer","triggerListeners_","DomEventEmitterProxy","isDelegateEvent_","babelHelpers.get","isSupportedDomEvent_","features","animationEventName_","checkAnimationEventName_","prefixes","typeTitleCase","replaceInterval","toUpperCase","suffixes","animationElement_","attrOrderChange_","originalContent","globalEval","text","opt_appendFn","opt_callback","runFile","scripts","runScriptsInOrder","runScript","item","globalEvalStyles","rel","runStyle","styles","loadCount","mouseEventMap","related","relatedTarget","customType","animationEventMap","eventType","checkAnimationEventName","Thenable","IMPLEMENTED_BY_PROP","addImplementation","$goog_Thenable","isImplementedBy","partial","newArgs","CancellablePromise","resolver","state_","State_","PENDING","result_","callbackEntries_","executing_","UNHANDLED_REJECTION_DELAY","unhandledRejectionId_","hadUnhandledRejection_","resolve_","FULFILLED","reason","REJECTED","CallbackEntry_","resolve","opt_value","reject","opt_reason","race","promises","promise","all","toFulfill","onFulfill","onReject","firstFulfilled","toReject","reasons","opt_onFulfilled","opt_onRejected","addChildPromise_","thenAlways","onResolved","err","handleRejection_","addCallbackEntry_","thenCatch","onRejected","catch","cancel","opt_message","CancellationError","IS_CANCELLATION_ERROR","cancelInternal_","cancelChild_","childPromise","childCount","childIndex","entry","callbackEntry","executeCallback_","scheduleCallbacks_","onFulfilled","result","unblockAndFulfill_","BLOCKED","unblockAndReject_","state","tryThen_","addUnhandledRejection_","thenable","called","executeCallbacks_","entries","removeUnhandledRejection_","setTimeout","setUnhandledRejectionHandler","debounce","delay","debounced","cancelDebounce","REGEX","convertMatchesToObj","convertTokensToRegex","tokens","regex","core","escape","capture","encloseNonCapturingGroup","pattern","repeat","prefix","optional","RegExp","makeTrailingSlashOptional","test","routeOrTokens","route","unnamedCount","currPath","exec","paramPattern","unnamedPattern","modifier","toRegex","extractData","paramIndex","Route","parsedData_","buildParsedData_","Cacheable","cache","cacheable","content","clearCache","Screen","makeId_","title","log","surfaces","sId","activeChild","runScriptsInElement","transitions","surface","deferred","show","Surface","defaultChild","transitionFn","getChild","DEFAULT","maybeWrapContentAsDefault_","screenId","opt_content","createChild","transition","getElement","getElementById","addContent","from","to","defaultTransition","App","activeScreen","activePath","allowPreventNavigate","browserPathBeforeNavigate","captureScrollPositionFromScrollEvent","defaultTitle","formSelector","ignoreQueryStringFromRoutePath","linkSelector","loadingCssClass","nativeScrollRestorationSupported","isNavigationPending","pendingNavigate","popstateScrollLeft","popstateScrollTop","redirectPath","routes","screens","skipLoadPopstate","updateScrollPosition","appEventHandlers_","onScroll_","onLoad_","onPopstate_","onStartNavigate_","onBeforeNavigate_","onBeforeNavigateDefault_","setLinkSelector","setFormSelector","getId","isLinkSameOrigin_","isSameBasePath_","isCurrentBrowserPath","findRoute","removeScreen","screen","getHandler","clearScreensCache","formEventHandler_","linkEventHandler_","removeAllListeners","navigate","getCurrentBrowserPath","opt_replaceHistory","beforeDeactivate","stopPendingNavigate_","nextScreen","createScreenInstance","load","deactivate","prepareNavigateHistory_","prepareNavigateSurfaces_","extractParams","evaluateStyles","flip","evaluateScripts","maybeUpdateScrollPositionState_","syncScrollPositionSyncThenAsync_","finalizeNavigate_","handleNavigateError_","getRoutePath","activate","isCacheable","capturedFormElement","capturedFormButtonElement","matchesPath","getIgnoreQueryStringFromRoutePath","getUrlPathWithoutHashAndSearch","winner","switchScrollPositionRace","scrollTo","scrollLeft","scrollTop","nativeScrollRestoration_","scrollRestoration","canNavigate","navigateFailed","preventDefault","anchorElement","offsetLeft","offsetTop","saveHistoryCurrentPageScrollPosition_","opt_event","isHtml5HistorySupported","form","replaceHistory","altKey","ctrlKey","metaKey","shiftKey","maybeNavigate_","method","buttonSelector","activeElement","querySelector","action","maybeRepositionScrollToHashedAnchor","reloadPage","senna","lockHistoryScrollPosition_","pageYOffset","pageXOffset","maybeDisableNativeScrollRestoration","endNavigatePayload","doNavigate_","error","maybeRestoreNativeScrollRestoration","getTitle","getDefaultTitle","beforeUpdateHistoryPath","historyState","maybeRestoreRedirectPathHash_","updateHistory_","beforeUpdateHistoryState","params","surfaceContent","getSurfaceContent","reload","surfaceId","dispose","replaceState","onDocSubmitDelegate_","onDocClickDelegate_","sync","titleNode","Ajax","allHeaders","headers","pairs","body","opt_headers","opt_params","opt_timeout","opt_sync","opt_withCredentials","request","XMLHttpRequest","Promise","onload","aborted","onerror","abort","timeout","addParametersFromMultiMap","withCredentials","setRequestHeader","send","errors","INVALID_STATUS","REQUEST_ERROR","REQUEST_TIMEOUT","UA","navigator","userAgent","platform","isMac","matchPlatform","isWin","isOpera","matchUserAgent","isIe","isEdge","isIeOrEdge","isChrome","isSafari","isFirefox","testUserAgent","getNativeUserAgent","getNativePlatform","RequestScreen","httpHeaders","httpMethod","GET","status","isValidResponseStatusCode","invalidStatus","statusCode","getRequestPath","setHostname","setProtocol","setPort","makeUnique","getRequest","requestPath","responseUrl","maybeExtractResponseUrlFromRequest","removeUnique","getCache","header","FormData","maybeAppendSubmitButtonValue","POST","formatLoadPath","setRequest","xhr","assertValidResponseStatusCode","addCache","responseText","requestError","responseURL","getResponseHeader","X_REQUEST_URL_HEADER","HtmlScreen","titleSelector","releaseVirtualDocument","pendingStyles","virtualDocument","copyNodeAttributesFromContent_","newStyle","isTemporaryStyle","stylesTemporary","styleInDoc","insertBefore","nextSibling","bodySurface","placeholder","clearNodeAttributes","copyNodeAttributes","disposePendingStyles","evaluateTrackedScripts","evaluateTrackedResources_","scriptsTemporary","scriptsPermanent","evaluateTrackedStyles","runStylesInElement","stylesPermanent","appendStyleIntoDocument_","evaluatorFn","selectorTemporary","selectorPermanent","opt_appendResourceFn","tracked","virtualQuerySelectorAll_","temporariesInDoc","querySelectorAll_","permanentsInDoc","resource","resourceKey","getResourceKey_","permanentResourcesInDoc","frag","allocateVirtualDocumentForContent","resolveTitleFromVirtualDocument","assertSameBodyIdInVirtualDocument","makeTemporaryStylesHrefsUnique_","replaceStyleAndMakeUnique_","replaceChild","setTitle","textContent","AppDataAttributeHandler","app","baseElement","hasAttribute","dataAttributes","maybeAddRoutes_","maybeAddSurfaces_","maybeSetBasePath_","maybeSetLinkSelector_","maybeSetLoadingCssClass_","maybeSetUpdateScrollPosition_","maybeDispatch_","routesSelector","querySelectorAllAsArray_","maybeParseLinkRoute_","hasRoutes","addRoutes","surfacesSelector","surfaceElement","updateElementIdIfSpecialSurface_","addSurfaces","dispatch","maybeParseLinkRoutePath_","maybeParseLinkRouteHandler_","getPath","getAttribute","getObjectByName","setBasePath","setLoadingCssClass","setUpdateScrollPosition","dataAttributeHandler","setBaseElement","handle"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}