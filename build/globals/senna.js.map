{"version":3,"file":"senna.js","sources":["node_modules/metal-dom/node_modules/metal/src/coreNamed.js","node_modules/metal-dom/node_modules/metal/src/core.js","node_modules/metal-dom/node_modules/metal/src/array/array.js","node_modules/metal-dom/node_modules/metal/src/async/async.js","node_modules/metal-dom/node_modules/metal/src/disposable/Disposable.js","node_modules/metal-dom/node_modules/metal/src/object/object.js","node_modules/metal-dom/node_modules/metal/src/string/string.js","node_modules/metal-dom/src/domData.js","node_modules/metal-dom/node_modules/metal-events/src/EventHandle.js","node_modules/metal-dom/node_modules/metal-events/src/EventEmitter.js","node_modules/metal-dom/node_modules/metal-events/src/EventEmitterProxy.js","node_modules/metal-dom/node_modules/metal-events/src/EventHandler.js","node_modules/metal-dom/src/DomDelegatedEventHandle.js","node_modules/metal-dom/src/DomEventHandle.js","node_modules/metal-dom/src/domNamed.js","node_modules/metal-dom/src/dom.js","node_modules/metal-dom/src/DomEventEmitterProxy.js","node_modules/metal-dom/src/features.js","node_modules/metal-dom/src/globalEval.js","node_modules/metal-dom/src/globalEvalStyles.js","node_modules/metal-dom/src/events.js","src/globals/globals.js","node_modules/metal/src/coreNamed.js","node_modules/metal/src/core.js","node_modules/metal/src/array/array.js","node_modules/metal/src/async/async.js","node_modules/metal/src/disposable/Disposable.js","node_modules/metal/src/object/object.js","node_modules/metal/src/string/string.js","node_modules/metal-uri/src/parseFromAnchor.js","node_modules/metal-uri/src/parse.js","node_modules/metal-structs/src/MultiMap.js","node_modules/metal-structs/src/TreeNode.js","node_modules/metal-uri/src/Uri.js","src/utils/utils.js","src/app/dataAttributes.js","node_modules/metal-events/src/EventHandle.js","node_modules/metal-events/src/EventEmitter.js","node_modules/metal-events/src/EventEmitterProxy.js","node_modules/metal-events/src/EventHandler.js","node_modules/metal-path-parser/src/pathParser.js","src/route/Route.js","src/cacheable/Cacheable.js","src/screen/Screen.js","src/surface/Surface.js","src/app/App.js","src/errors/errors.js","src/screen/RequestScreen.js","src/screen/HtmlScreen.js","src/app/AppDataAttributeHandler.js","src/app/dataAttributeHandler.js","src/app/version.js"],"sourcesContent":["'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${(Math.random() * 1e9) >>> 0}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(data = {}) {\n\tcompatibilityModeData_ = data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, like IE11, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n * @return {Object}\n */\nexport function getStaticProperty(\n\tctor,\n\tpropertyName,\n\tmergeFn = getFirstTruthy_\n) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\t// eslint-disable-next-line\n\t\tlet merged = ctor.hasOwnProperty(propertyName)\n\t\t\t? ctor[propertyName]\n\t\t\t: null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n * @return {number}\n */\nexport function getUid(object, noInheritance) {\n\tif (object) {\n\t\tlet id = object[UID_PROPERTY];\n\t\tif (noInheritance && !object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(returnValue) {\n\treturn returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn (type === 'object' && val !== null) || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Sets to true if running inside Node.js environment with extra check for\n * `process.browser` to skip Karma runner environment. Karma environment has\n * `process` defined even though it runs on the browser.\n * @param {?Object} options Contains `checkEnv` property which if true, checks\n * the NODE_ENV variable. If NODE_ENV equals 'test', the function returns false.\n * @return {boolean}\n */\nexport function isServerSide(options = {checkEnv: true}) {\n\tlet serverSide = typeof process !== 'undefined' && !process.browser;\n\tif (serverSide && options.checkEnv) {\n\t\tserverSide =\n\t\t\ttypeof process.env !== 'undefined' &&\n\t\t\tprocess.env.NODE_ENV !== 'test';\n\t}\n\treturn serverSide;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport {core};\nexport * from './coreNamed';\n","'use strict';\n\n/**\n * Set of utilities for array operations\n */\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1 === arr2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>=} output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, output = []) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tconst i = arr.indexOf(obj);\n\t\tlet rv;\n\t\tif ((rv = i >= 0)) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, end = arr.length) {\n\t\tconst sliced = [];\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/* !\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nimport {isServerSide} from '../coreNamed';\n\nconst async = {};\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(new async.run.WorkItem_(callback, context));\n};\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tconst workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (let i = 0; i < workItems.length; i++) {\n\t\t\tconst workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, context) {\n\tlet cb = callback;\n\tif (context) {\n\t\tcb = callback.bind(context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tif (\n\t\t\ttypeof setImmediate === 'function' &&\n\t\t\tisServerSide({checkEnv: false})\n\t\t) {\n\t\t\tasync.nextTick.setImmediate_ = setImmediate;\n\t\t} else {\n\t\t\t// eslint-disable-next-line\n\t\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t\t}\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tlet Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (\n\t\ttypeof Channel === 'undefined' &&\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.postMessage &&\n\t\twindow.addEventListener\n\t) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tconst iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tiframe.title = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tconst win = iframe.contentWindow;\n\t\t\tconst doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tconst message = 'callImmediate' + Math.random();\n\t\t\tconst origin = win.location.protocol + '//' + win.location.host;\n\t\t\tconst onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tconst channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tlet head = {};\n\t\tlet tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tconst cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb,\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (\n\t\ttypeof document !== 'undefined' &&\n\t\t'onreadystatechange' in document.createElement('script')\n\t) {\n\t\treturn function(cb) {\n\t\t\tlet script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(callback) {\n\treturn callback;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\t/**\n\t * Disposable constructor\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\n/**\n * Set of utilities for object operations\n */\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target, ...args) {\n\t\tlet key;\n\t\tlet source;\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tsource = args[i];\n\t\t\t// Possible prototype chain leak, breaks 1 metal-dom and\n\t\t\t// 1 metal-incremental-dom test if guard-for-in rule is addressed\n\t\t\t// eslint-disable-next-line\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} scope The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, scope = window) {\n\t\tconst parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tconst mappedObj = {};\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @param {Object} obj1\n\t * @param {Object} obj2\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst keys1 = Object.keys(obj1);\n\t\tconst keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\n/**\n * Set of utilities for string operations\n */\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t\tconst test1 = String(str1).toLowerCase();\n\t\tconst test2 = String(str2).toLowerCase();\n\n\t\tif (test1 < test2) {\n\t\t\treturn -1;\n\t\t} else if (test1 === test2) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str\n\t\t\t.replace(/[\\t\\r\\n ]+/g, ' ')\n\t\t\t.replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t * Escapes characters in the string that are not safe to use in a RegExp.\n\t * @param {*} str The string to escape. If not a string, it will be casted\n\t *     to one.\n\t * @return {string} A RegExp safe, escaped copy of {@code s}.\n\t */\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()[\\]{}+?*.$^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08'); // eslint-disable-line\n\t}\n\n\t/**\n\t * Returns a string with at least 64-bits of randomness.\n\t * @return {string} A random string, e.g. sn1s7vb4gcic.\n\t */\n\tstatic getRandomString() {\n\t\tconst x = 2147483648;\n\t\treturn (\n\t\t\tMath.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36)\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tlet hash = 0;\n\t\tfor (let i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\nimport {isDef} from 'metal';\n\nconst METAL_DATA = '__metal_data__';\n\n/**\n * Set of utilities for dom data operations\n */\nclass domData {\n\t/**\n\t * Gets Metal.js's data for the given element.\n\t * @param {!Element} element\n\t * @param {string=} name Optional property from the data to be returned.\n\t * @param {*=} initialValue Optional value to the set the requested property\n\t *     to if it doesn't exist yet in the data.\n\t * @return {!Object}\n\t */\n\tstatic get(element, name, initialValue) {\n\t\tif (!element[METAL_DATA]) {\n\t\t\telement[METAL_DATA] = {};\n\t\t}\n\t\tif (!name) {\n\t\t\treturn element[METAL_DATA];\n\t\t}\n\t\tif (!isDef(element[METAL_DATA][name]) && isDef(initialValue)) {\n\t\t\telement[METAL_DATA][name] = initialValue;\n\t\t}\n\t\treturn element[METAL_DATA][name];\n\t}\n\n\t/**\n\t * Checks if the given element has data stored in it.\n\t * @param {!Element} element\n\t * @return {boolean}\n\t */\n\tstatic has(element) {\n\t\treturn !!element[METAL_DATA];\n\t}\n\n\t/**\n\t * Sets Metal.js's data for the given element.\n\t * @param {!Element} element\n\t * @param {string=} name Property from the data to be set.\n\t * @param {*=} value Value to be set on the element.\n\t * @return {!Object|*}\n\t */\n\tstatic set(element, name, value) {\n\t\tif (!element[METAL_DATA]) {\n\t\t\telement[METAL_DATA] = {};\n\t\t}\n\t\tif (!name || !isDef(value)) {\n\t\t\treturn element[METAL_DATA];\n\t\t}\n\t\telement[METAL_DATA][name] = value;\n\t\treturn element[METAL_DATA][name];\n\t}\n}\n\nexport default domData;\n","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\t/**\n\t * EventHandle constructor\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t */\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n","'use strict';\n\nimport {array, Disposable, isFunction, isString} from 'metal';\nimport EventHandle from './EventHandle';\n\nconst singleArray_ = [0];\n\n/**\n * EventEmitter utility.\n * @extends {Disposable}\n */\nclass EventEmitter extends Disposable {\n\t/**\n\t * EventEmitter constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds event listeners scoped by event type.\n\t\t * @type {Object<string, !Array<!function()>>}\n\t\t * @protected\n\t\t */\n\t\tthis.events_ = null;\n\n\t\t/**\n\t\t * Handlers that are triggered when an event is listened to.\n\t\t * @type {Array}\n\t\t */\n\t\tthis.listenerHandlers_ = null;\n\n\t\t/**\n\t\t * Configuration option which determines if an event facade should be sent\n\t\t * as a param of listeners when emitting events. If set to true, the facade\n\t\t * will be passed as the first argument of the listener.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.shouldUseFacade_ = false;\n\t}\n\n\t/**\n\t * Adds a handler to given holder variable. If the holder doesn't have a\n\t * value yet, it will receive the handler directly. If the holder is an array,\n\t * the value will just be added to it. Otherwise, the holder will be set to a\n\t * new array containing its previous value plus the new handler.\n\t * @param {*} holder\n\t * @param {!function()|Object} handler\n\t * @return {*} The holder's new value.\n\t * @protected\n\t */\n\taddHandler_(holder, handler) {\n\t\tif (!holder) {\n\t\t\tholder = handler;\n\t\t} else {\n\t\t\tif (!Array.isArray(holder)) {\n\t\t\t\tholder = [holder];\n\t\t\t}\n\t\t\tholder.push(handler);\n\t\t}\n\t\treturn holder;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @param {boolean} defaultListener Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\taddListener(event, listener, defaultListener) {\n\t\tthis.validateListener_(listener);\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.addSingleListener_(events[i], listener, defaultListener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for a single event.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {boolean} defaultListener Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @param {Function=} origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t */\n\taddSingleListener_(event, listener, defaultListener, origin) {\n\t\tthis.runListenerHandlers_(event);\n\t\tif (defaultListener || origin) {\n\t\t\tlistener = {\n\t\t\t\tdefault: defaultListener,\n\t\t\t\tfn: listener,\n\t\t\t\torigin: origin,\n\t\t\t};\n\t\t}\n\t\tthis.events_ = this.events_ || {};\n\t\tthis.events_[event] = this.addHandler_(this.events_[event], listener);\n\t}\n\n\t/**\n\t * Builds facade for the given event.\n\t * @param {string} event\n\t * @return {Object}\n\t * @protected\n\t */\n\tbuildFacade_(event) {\n\t\tif (this.getShouldUseFacade()) {\n\t\t\tconst facade = {\n\t\t\t\tpreventDefault: function() {\n\t\t\t\t\tfacade.preventedDefault = true;\n\t\t\t\t},\n\t\t\t\ttarget: this,\n\t\t\t\ttype: event,\n\t\t\t};\n\t\t\treturn facade;\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.events_ = null;\n\t}\n\n\t/**\n\t * Execute each of the listeners in order with the supplied arguments.\n\t * @param {string} event\n\t * @param {*} opt_args [arg1], [arg2], [...]\n\t * @return {boolean} Returns true if event had listeners, false otherwise.\n\t */\n\temit(event) {\n\t\tconst listeners = this.getRawListeners_(event);\n\t\tif (listeners.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst args = array.slice(arguments, 1); // eslint-disable-line\n\t\tthis.runListeners_(listeners, args, this.buildFacade_(event));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the listener objects for the given event, if there are any.\n\t * @param {string} event\n\t * @return {!Array}\n\t * @protected\n\t */\n\tgetRawListeners_(event) {\n\t\tconst directListeners = toArray(this.events_ && this.events_[event]);\n\t\treturn directListeners.concat(\n\t\t\ttoArray(this.events_ && this.events_['*'])\n\t\t);\n\t}\n\n\t/**\n\t * Gets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @return {boolean}\n\t */\n\tgetShouldUseFacade() {\n\t\treturn this.shouldUseFacade_;\n\t}\n\n\t/**\n\t * Returns an array of listeners for the specified event.\n\t * @param {string} event\n\t * @return {Array} Array of listeners.\n\t */\n\tlisteners(event) {\n\t\treturn this.getRawListeners_(event).map(\n\t\t\tlistener => (listener.fn ? listener.fn : listener)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for the\n\t * events. After each event is triggered the specified amount of times, the\n\t * listener is removed for it.\n\t * @param {!(Array|string)} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tmany(event, amount, listener) {\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.many_(events[i], amount, listener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for a single\n\t * event. After the event is triggered the specified amount of times, the\n\t * listener is removed.\n\t * @param {string} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @protected\n\t */\n\tmany_(event, amount, listener) {\n\t\tconst self = this;\n\n\t\tif (amount <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction handlerInternal() {\n\t\t\tif (--amount === 0) {\n\t\t\t\tself.removeListener(event, handlerInternal);\n\t\t\t}\n\t\t\tlistener.apply(self, arguments); // eslint-disable-line\n\t\t}\n\n\t\tself.addSingleListener_(event, handlerInternal, false, listener);\n\t}\n\n\t/**\n\t * Checks if a listener object matches the given listener function. To match,\n\t * it needs to either point to that listener or have it as its origin.\n\t * @param {!Object} listenerObj\n\t * @param {!Function} listener\n\t * @return {boolean}\n\t * @protected\n\t */\n\tmatchesListener_(listenerObj, listener) {\n\t\tconst fn = listenerObj.fn || listenerObj;\n\t\treturn (\n\t\t\tfn === listener ||\n\t\t\t(listenerObj.origin && listenerObj.origin === listener) // eslint-disable-line\n\t\t);\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\toff(event, listener) {\n\t\tthis.validateListener_(listener);\n\t\tif (!this.events_) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.events_[events[i]] = this.removeMatchingListenerObjs_(\n\t\t\t\ttoArray(this.events_[events[i]]),\n\t\t\t\tlistener\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\ton() {\n\t\treturn this.addListener.apply(this, arguments); // eslint-disable-line\n\t}\n\n\t/**\n\t * Adds handler that gets triggered when an event is listened to on this\n\t * instance.\n\t * @param {!function()} handler\n\t */\n\tonListener(handler) {\n\t\tthis.listenerHandlers_ = this.addHandler_(\n\t\t\tthis.listenerHandlers_,\n\t\t\thandler\n\t\t); // eslint-disable-line\n\t}\n\n\t/**\n\t * Adds a one time listener for the events. This listener is invoked only the\n\t * next time each event is fired, after which it is removed.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tonce(events, listener) {\n\t\treturn this.many(events, 1, listener);\n\t}\n\n\t/**\n\t * Removes all listeners, or those of the specified events. It's not a good\n\t * idea to remove listeners that were added elsewhere in the code,\n\t * especially when it's on an emitter that you didn't create.\n\t * @param {(Array|string)=} event\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveAllListeners(event) {\n\t\tif (this.events_) {\n\t\t\tif (event) {\n\t\t\t\tconst events = this.toEventsArray_(event);\n\t\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\t\tthis.events_[events[i]] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.events_ = null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all listener objects from the given array that match the given\n\t * listener function.\n\t * @param {Array.<Object>} listenerObjs\n\t * @param {!Function} listener\n\t * @return {Array.<Object>|Object} The new listeners array for this event.\n\t * @protected\n\t */\n\tremoveMatchingListenerObjs_(listenerObjs, listener) {\n\t\tconst finalListeners = [];\n\t\tfor (let i = 0; i < listenerObjs.length; i++) {\n\t\t\tif (!this.matchesListener_(listenerObjs[i], listener)) {\n\t\t\t\tfinalListeners.push(listenerObjs[i]);\n\t\t\t}\n\t\t}\n\t\treturn finalListeners.length > 0 ? finalListeners : null;\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveListener() {\n\t\treturn this.off.apply(this, arguments); // eslint-disable-line\n\t}\n\n\t/**\n\t * Runs the handlers when an event is listened to.\n\t * @param {string} event\n\t * @protected\n\t */\n\trunListenerHandlers_(event) {\n\t\tlet handlers = this.listenerHandlers_;\n\t\tif (handlers) {\n\t\t\thandlers = toArray(handlers);\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i](event);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given listeners.\n\t * @param {!Array} listeners\n\t * @param {!Array} args\n\t * @param {Object} facade\n\t * @protected\n\t */\n\trunListeners_(listeners, args, facade) {\n\t\tif (facade) {\n\t\t\targs.push(facade);\n\t\t}\n\n\t\tconst defaultListeners = [];\n\t\tfor (let i = 0; i < listeners.length; i++) {\n\t\t\tconst listener = listeners[i].fn || listeners[i];\n\t\t\tif (listeners[i].default) {\n\t\t\t\tdefaultListeners.push(listener);\n\t\t\t} else {\n\t\t\t\tlistener.apply(this, args);\n\t\t\t}\n\t\t}\n\t\tif (!facade || !facade.preventedDefault) {\n\t\t\tfor (let j = 0; j < defaultListeners.length; j++) {\n\t\t\t\tdefaultListeners[j].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @param {boolean} shouldUseFacade\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tsetShouldUseFacade(shouldUseFacade) {\n\t\tthis.shouldUseFacade_ = shouldUseFacade;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the parameter to an array if only one event is given. Reuses the\n\t * same array each time this conversion is done, to avoid using more memory\n\t * than necessary.\n\t * @param  {!(Array|string)} events\n\t * @return {!Array}\n\t * @protected\n\t */\n\ttoEventsArray_(events) {\n\t\tif (isString(events)) {\n\t\t\tsingleArray_[0] = events;\n\t\t\tevents = singleArray_;\n\t\t}\n\t\treturn events;\n\t}\n\n\t/**\n\t * Checks if the given listener is valid, throwing an exception when it's not.\n\t * @param  {*} listener\n\t * @protected\n\t */\n\tvalidateListener_(listener) {\n\t\tif (!isFunction(listener)) {\n\t\t\tthrow new TypeError('Listener must be a function');\n\t\t}\n\t}\n}\n\n/**\n * Converts to an array\n * @param {Object} val\n * @return {Array}\n */\nfunction toArray(val) {\n\tval = val || [];\n\treturn Array.isArray(val) ? val : [val];\n}\n\nexport default EventEmitter;\n","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\t/**\n\t * @param {EventEmitter} originEmitter Events originated on this emitter\n\t * will be fired for the target emitter's listeners as well.\n\t * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n\t * will also be triggered when the event is fired by the origin emitter.\n\t * @param {Object} blacklist Optional blacklist of events that should not be\n\t * proxied.\n\t * @param {Object} whitelist\n\t */\n\tconstructor(originEmitter, targetEmitter, blacklist, whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = blacklist;\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * A list of events that are pending to be listened by an actual origin\n\t\t * emitter. Events are stored here when the origin doesn't exist, so they\n\t\t * can be set on a new origin when one is set.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.pendingEvents_ = null;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object<string, !EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = null;\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t */\n\taddListener_(event, listener) {\n\t\treturn this.originEmitter_.on(event, listener);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListeners_();\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event type on the target emitter.\n\t * @protected\n\t */\n\temitOnTarget_(...args) {\n\t\tthis.targetEmitter_.emit(...args);\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent(event) {\n\t\tif (this.shouldProxyEvent_(event)) {\n\t\t\tthis.tryToAddListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for all events.\n\t * @protected\n\t */\n\tremoveListeners_() {\n\t\tif (this.proxiedEvents_) {\n\t\t\tconst events = Object.keys(this.proxiedEvents_);\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tthis.proxiedEvents_[events[i]].removeListener();\n\t\t\t}\n\t\t\tthis.proxiedEvents_ = null;\n\t\t}\n\t\tthis.pendingEvents_ = null;\n\t}\n\n\t/**\n\t * Changes the origin emitter. This automatically detaches any events that\n\t * were already being proxied from the previous emitter, and starts proxying\n\t * them on the new emitter instead.\n\t * @param {!EventEmitter} originEmitter\n\t */\n\tsetOriginEmitter(originEmitter) {\n\t\tconst events =\n\t\t\tthis.originEmitter_ && this.proxiedEvents_\n\t\t\t\t? Object.keys(this.proxiedEvents_)\n\t\t\t\t: this.pendingEvents_;\n\t\tthis.originEmitter_ = originEmitter;\n\t\tif (events) {\n\t\t\tthis.removeListeners_();\n\t\t\tevents.forEach(event => this.proxyEvent(event));\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_ && this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_ || !this.proxiedEvents_[event];\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.onListener(this.proxyEvent.bind(this));\n\t}\n\n\t/**\n\t * Adds a listener to the origin emitter, if it exists. Otherwise, stores\n\t * the pending listener so it can be used on a future origin emitter.\n\t * @param {string} event\n\t * @protected\n\t */\n\ttryToAddListener_(event) {\n\t\tif (this.originEmitter_) {\n\t\t\tthis.proxiedEvents_ = this.proxiedEvents_ || {};\n\t\t\tthis.proxiedEvents_[event] = this.addListener_(\n\t\t\t\tevent,\n\t\t\t\tthis.emitOnTarget_.bind(this, event)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pendingEvents_ = this.pendingEvents_ || [];\n\t\t\tthis.pendingEvents_.push(event);\n\t\t}\n\t}\n}\n\nexport default EventEmitterProxy;\n","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\t/**\n\t * EventHandler constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd(...args) {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(args[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n","'use strict';\n\nimport {array, isString} from 'metal';\nimport domData from './domData';\nimport {EventHandle} from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom delegated events\n * (only the ones that receive a target element, not a selector string).\n * @extends {EventHandle}\n */\nclass DomDelegatedEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomDelegatedEventHandle`.\n\t * @param {!Event} emitter Element the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {string=} selector An optional selector used when delegating\n\t *     the event.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, selector) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.selector_ = selector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tconst delegating = domData.get(this.emitter_, 'delegating', {});\n\t\tconst listeners = domData.get(this.emitter_, 'listeners', {});\n\t\tconst selector = this.selector_;\n\t\tconst arr = isString(selector)\n\t\t\t? delegating[this.event_].selectors\n\t\t\t: listeners;\n\t\tconst key = isString(selector) ? selector : this.event_;\n\n\t\tarray.remove(arr[key] || [], this.listener_);\n\t\tif (arr[key] && arr[key].length === 0) {\n\t\t\tdelete arr[key];\n\t\t}\n\t}\n}\n\nexport default DomDelegatedEventHandle;\n","'use strict';\n\nimport {EventHandle} from 'metal-events';\n\n/**\n * This is a special EventHandle, that is responsible for dom events, instead\n * of EventEmitter events.\n * @extends {EventHandle}\n */\nclass DomEventHandle extends EventHandle {\n\t/**\n\t * The constructor for `DomEventHandle`.\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t * @param {boolean} capture Flag indicating if listener should be triggered\n\t *   during capture phase, instead of during the bubbling phase. Defaults to false.\n\t * @constructor\n\t */\n\tconstructor(emitter, event, listener, capture) {\n\t\tsuper(emitter, event, listener);\n\t\tthis.capture_ = capture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tremoveListener() {\n\t\tthis.emitter_.removeEventListener(\n\t\t\tthis.event_,\n\t\t\tthis.listener_,\n\t\t\tthis.capture_\n\t\t);\n\t}\n}\n\nexport default DomEventHandle;\n","'use strict';\n\nimport {\n\tisDef,\n\tisDefAndNotNull,\n\tisDocument,\n\tisDocumentFragment,\n\tisElement,\n\tisObject,\n\tisString,\n\tobject,\n} from 'metal';\nimport domData from './domData';\nimport DomDelegatedEventHandle from './DomDelegatedEventHandle';\nimport DomEventHandle from './DomEventHandle';\n\nconst elementsByTag_ = {};\nconst supportCache_ = {};\nexport const customEvents = {};\n\nconst LAST_CONTAINER = '__metal_last_container__';\nconst USE_CAPTURE = {\n\tblur: true,\n\terror: true,\n\tfocus: true,\n\tinvalid: true,\n\tload: true,\n\tscroll: true,\n};\n\n/**\n * Adds the requested CSS classes to an element.\n * @param {!Element|!Nodelist} elements The element or elements to add CSS classes to.\n * @param {string} classes CSS classes to add.\n */\nexport function addClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\taddClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\taddClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Adds the requested CSS classes to an element using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.add(className);\n\t\t}\n\t});\n}\n\n/**\n * IE11 doesn't support Element.classList.add function, this method\n * adds the requested CSS classes to an element without using classList.\n * @param {!Element} element The element to add CSS classes to.\n * @param {string} classes CSS classes to add.\n * @private\n */\nfunction addClassesWithoutNative_(element, classes) {\n\tconst elementClassName = ` ${element.className} `;\n\tlet classesToAppend = '';\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = classes[i];\n\n\t\tif (elementClassName.indexOf(` ${className} `) === -1) {\n\t\t\tclassesToAppend += ` ${className}`;\n\t\t}\n\t}\n\n\tif (classesToAppend) {\n\t\telement.className = element.className + classesToAppend;\n\t}\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate.\n * @param {!Element} element\n * @param {string} eventName\n * @param {!function()} listener\n * @private\n */\nfunction addElementListener_(element, eventName, listener) {\n\taddToArr_(domData.get(element, 'listeners', {}), eventName, listener);\n}\n\n/**\n * Adds an event listener to the given element, to be triggered via delegate\n * selectors.\n * @param {!Element} element\n * @param {string} eventName\n * @param {string} selector\n * @param {!function()} listener\n * @private\n */\nfunction addSelectorListener_(element, eventName, selector, listener) {\n\tconst delegatingData = domData.get(element, 'delegating', {});\n\taddToArr_(delegatingData[eventName].selectors, selector, listener);\n}\n\n/**\n * Adds a value to an array inside an object, creating it first if it doesn't\n * yet exist.\n * @param {!Array} arr\n * @param {string} key\n * @param {*} value\n * @private\n */\nfunction addToArr_(arr, key, value) {\n\tif (!arr[key]) {\n\t\tarr[key] = [];\n\t}\n\tarr[key].push(value);\n}\n\n/**\n * Attaches a delegate listener, unless there's already one attached.\n * @param {!Element} element\n * @param {string} eventName\n * @private\n */\nfunction attachDelegateEvent_(element, eventName) {\n\tlet delegatingData = domData.get(element, 'delegating', {});\n\tif (!delegatingData[eventName]) {\n\t\tdelegatingData[eventName] = {\n\t\t\thandle: on(\n\t\t\t\telement,\n\t\t\t\teventName,\n\t\t\t\thandleDelegateEvent_,\n\t\t\t\t!!USE_CAPTURE[eventName]\n\t\t\t),\n\t\t\tselectors: {},\n\t\t};\n\t}\n}\n\n/**\n * IE11 doesn't support Element.closest function, this method\n * gets the closest element up the tree from the given element (including\n * itself) that matches the specified selector, or null if none match.\n * @param {Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function closest(element, selector) {\n\twhile (element && !match(element, selector)) {\n\t\telement = element.parentNode;\n\t}\n\treturn element;\n}\n\n/**\n * IE11 doesn't support Element.classList.add function, this method\n * appends a child node with text or other nodes to a parent node. If\n * child is a HTML string it will be automatically converted to a document\n * fragment before appending it to the parent.\n * @param {!Element} parent The node to append nodes to.\n * @param {!(Element|NodeList|string)} child The thing to append to the parent.\n * @return {!Element} The appended child.\n */\nexport function append(parent, child) {\n\tif (isString(child)) {\n\t\tchild = buildFragment(child);\n\t}\n\tif (isNodeListLike(child)) {\n\t\tconst childArr = Array.prototype.slice.call(child);\n\t\tfor (let i = 0; i < childArr.length; i++) {\n\t\t\tparent.appendChild(childArr[i]);\n\t\t}\n\t} else {\n\t\tparent.appendChild(child);\n\t}\n\treturn child;\n}\n\n/**\n * Helper for converting a HTML string into a document fragment.\n * @param {string} htmlString The HTML string to convert.\n * @return {!Element} The resulting document fragment.\n */\nexport function buildFragment(htmlString) {\n\tconst tempDiv = document.createElement('div');\n\ttempDiv.innerHTML = `<br>${htmlString}`;\n\ttempDiv.removeChild(tempDiv.firstChild);\n\n\tconst fragment = document.createDocumentFragment();\n\twhile (tempDiv.firstChild) {\n\t\tfragment.appendChild(tempDiv.firstChild);\n\t}\n\treturn fragment;\n}\n\n/**\n * Checks if the first element contains the second one.\n * @deprecated Use element1.contains(element2) directly instead of this method\n * @param {!Element} element1\n * @param {!Element} element2\n * @return {boolean}\n */\nexport function contains(element1, element2) {\n\tif (isDocument(element1)) {\n\t\t// document.contains is not defined on IE9, so call it on documentElement instead.\n\t\treturn element1.documentElement.contains(element2);\n\t} else {\n\t\treturn element1.contains(element2);\n\t}\n}\n\n/**\n * Listens to the specified event on the given DOM element, but only calls the\n * given callback listener when it's triggered by elements that match the\n * given selector or target element.\n * @param {!Element} element The DOM element the event should be listened on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!Element|string} selectorOrTarget Either an element or css selector\n *     that should match the event for the listener to be triggered.\n * @param {!function(!Object)} callback Function to be called when the event\n *     is triggered. It will receive the normalized event object.\n * @param {boolean=} defaultListener Optional flag indicating if this is a default\n *     listener. That means that it would only be executed after all non\n *     default listeners, and only if the event isn't prevented via\n *     `preventDefault`.\n * @return {!EventHandle} Can be used to remove the listener.\n */\nexport function delegate(\n\telement,\n\teventName,\n\tselectorOrTarget,\n\tcallback,\n\tdefaultListener\n) {\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.delegate) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\n\tif (defaultListener) {\n\t\t// Wrap callback so we don't set property directly on it.\n\t\tcallback = callback.bind();\n\t\tcallback.defaultListener_ = true;\n\t}\n\n\tattachDelegateEvent_(element, eventName);\n\tif (isString(selectorOrTarget)) {\n\t\taddSelectorListener_(element, eventName, selectorOrTarget, callback);\n\t} else {\n\t\taddElementListener_(selectorOrTarget, eventName, callback);\n\t}\n\n\treturn new DomDelegatedEventHandle(\n\t\tisString(selectorOrTarget) ? element : selectorOrTarget,\n\t\teventName,\n\t\tcallback,\n\t\tisString(selectorOrTarget) ? selectorOrTarget : null\n\t);\n}\n\n/**\n * Verifies if the element is able to trigger the Click event,\n * simulating browsers behaviour, avoiding event listeners to be called by triggerEvent method.\n * @param {Element} node Element to be checked.\n * @param {string} eventName The event name.\n * @param {Object=} eventObj\n * @private\n * @return {boolean}\n */\nfunction isAbleToInteractWith_(node, eventName, eventObj) {\n\tif (eventObj && eventName === 'click' && eventObj.button === 2) {\n\t\t// Firefox triggers \"click\" events on the document for right clicks. This\n\t\t// causes our delegate logic to trigger it for regular elements too, which\n\t\t// shouldn't happen. Ignoring them here.\n\t\treturn false;\n\t}\n\n\tconst matchesSelector = [\n\t\t'BUTTON',\n\t\t'INPUT',\n\t\t'SELECT',\n\t\t'TEXTAREA',\n\t\t'FIELDSET',\n\t];\n\tif (eventName === 'click' && matchesSelector.indexOf(node.tagName) > -1) {\n\t\treturn !(node.disabled || parent(node, 'fieldset[disabled]'));\n\t}\n\treturn true;\n}\n\n/**\n * Returns true if the specified value is a NodeList or like one.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is like a NodeList.\n */\nexport function isNodeListLike(val) {\n\treturn (\n\t\tisDefAndNotNull(val) &&\n\t\ttypeof val.length === 'number' &&\n\t\ttypeof val.item === 'function'\n\t);\n}\n\n/**\n * Inserts node in document as last element.\n * @param {Element} node Element to remove children from.\n */\nexport function enterDocument(node) {\n\tnode && append(document.body, node);\n}\n\n/**\n * Removes node from document.\n * @param {Element} node Element to remove children from.\n */\nexport function exitDocument(node) {\n\tif (node && node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * This is called when an event is triggered by a delegate listener. All\n * matching listeners of this event type from `target` to `currentTarget` will\n * be triggered.\n * @param {!Event} event The event payload.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction handleDelegateEvent_(event) {\n\tnormalizeDelegateEvent_(event);\n\tlet ret = true;\n\tconst container = event.currentTarget;\n\tconst defFns = [];\n\n\tret &= triggerDelegatedListeners_(container, event, defFns);\n\tret &= triggerDefaultDelegatedListeners_(defFns, event);\n\n\tevent.delegateTarget = null;\n\tevent[LAST_CONTAINER] = container;\n\treturn ret;\n}\n\n/**\n * Checks if the given element has the requested css class.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n */\nexport function hasClass(element, className) {\n\tif ('classList' in element) {\n\t\treturn hasClassWithNative_(element, className);\n\t} else {\n\t\treturn hasClassWithoutNative_(element, className);\n\t}\n}\n\n/**\n * Checks if the given element has the requested css class using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithNative_(element, className) {\n\treturn (\n\t\tclassName.indexOf(' ') === -1 && element.classList.contains(className)\n\t);\n}\n\n/**\n * Checks if the given element has the requested css class without using classList.\n * @param {!Element} element\n * @param {string} className\n * @return {boolean}\n * @private\n */\nfunction hasClassWithoutNative_(element, className) {\n\treturn (\n\t\t` ${element.className} `.indexOf(` ${className} `) >= 0 &&\n\t\tclassName.split(' ').length === 1\n\t);\n}\n\n/**\n * Checks if the given element is empty or not.\n * @param {!Element} element\n * @return {boolean}\n */\nexport function isEmpty(element) {\n\treturn element.childNodes.length === 0;\n}\n\n/**\n * IE11 doesn't support Element.matches function, this method\n * check if an element matches a given selector.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n */\nexport function match(element, selector) {\n\tif (!element || element.nodeType !== 1) {\n\t\treturn false;\n\t}\n\n\tconst p = Element.prototype;\n\tconst m =\n\t\tp.matches ||\n\t\tp.webkitMatchesSelector ||\n\t\tp.mozMatchesSelector ||\n\t\tp.msMatchesSelector ||\n\t\tp.oMatchesSelector;\n\tif (m) {\n\t\treturn m.call(element, selector);\n\t}\n\n\treturn matchFallback_(element, selector);\n}\n\n/**\n * Check if an element matches a given selector, using an internal implementation\n * instead of calling existing javascript functions.\n * @param {Element} element\n * @param {string} selector\n * @return {boolean}\n * @private\n */\nfunction matchFallback_(element, selector) {\n\tconst parentNode = element.parentNode;\n\n\tif (parentNode) {\n\t\tconst nodes = parentNode.querySelectorAll(selector);\n\n\t\tfor (let i = 0; i < nodes.length; ++i) {\n\t\t\tif (nodes[i] === element) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Returns the next sibling of the given element that matches the specified\n * selector, or null if there is none.\n * @param {!Element} element\n * @param {?string} selector\n * @return {Element|null}\n */\nexport function next(element, selector) {\n\tdo {\n\t\telement = element.nextSibling;\n\t\tif (element && match(element, selector)) {\n\t\t\treturn element;\n\t\t}\n\t} while (element);\n\treturn null;\n}\n\n/**\n * Normalizes the event payload for delegate listeners.\n * @param {!Event} event\n * @private\n */\nfunction normalizeDelegateEvent_(event) {\n\tevent.stopPropagation = stopPropagation_;\n\tevent.stopImmediatePropagation = stopImmediatePropagation_;\n}\n\n/**\n * Listens to the specified event on the given DOM element. This function normalizes\n * DOM event payloads and functions so they'll work the same way on all supported\n * browsers.\n * @param {!Element|string} element The DOM element to listen to the event on, or\n *   a selector that should be delegated on the entire document.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event is\n *   triggered. It will receive the normalized event object.\n * @param {boolean} capture Flag indicating if listener should be triggered\n *   during capture phase, instead of during the bubbling phase. Defaults to false.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function on(element, eventName, callback, capture) {\n\tif (isString(element)) {\n\t\treturn delegate(document, eventName, element, callback);\n\t}\n\tconst customConfig = customEvents[eventName];\n\tif (customConfig && customConfig.event) {\n\t\teventName = customConfig.originalEvent;\n\t\tcallback = customConfig.handler.bind(customConfig, callback);\n\t}\n\telement.addEventListener(eventName, callback, capture);\n\treturn new DomEventHandle(element, eventName, callback, capture);\n}\n\n/**\n * IE11 doesn't support once event listener option, this method\n * Listens to the specified event on the given DOM element once. This\n * function normalizes DOM event payloads and functions so they'll work the\n * same way on all supported browsers.\n * @param {!Element} element The DOM element to listen to the event on.\n * @param {string} eventName The name of the event to listen to.\n * @param {!function(!Object)} callback Function to be called when the event\n *   is triggered. It will receive the normalized event object.\n * @return {!DomEventHandle} Can be used to remove the listener.\n */\nexport function once(element, eventName, callback) {\n\tconst domEventHandle = on(element, eventName, function() {\n\t\tdomEventHandle.removeListener();\n\t\treturn callback.apply(this, arguments); // eslint-disable-line\n\t});\n\treturn domEventHandle;\n}\n\n/**\n * Gets the first parent from the given element that matches the specified\n * selector, or null if none match.\n * @param {!Element} element\n * @param {string} selector\n * @return {Element}\n */\nexport function parent(element, selector) {\n\treturn closest(element.parentNode, selector);\n}\n\n/**\n * IE11 doesn't support Element.prepend function, this method\n * inserts a node before first child of the parent. If child is a HTML string\n * it will be converted to document fragment before prepending it to the parent.\n * @param {!Element} parent The node to prepend to.\n * @param {!(Element|NodeList|string)} child The thing to prepend to the parent.\n * @return {!Element} The prepended child.\n */\nexport function prepend(parent, child) {\n\tif (isString(child)) {\n\t\tchild = buildFragment(child);\n\t}\n\n\tif (!isNodeListLike(child) && !isDefAndNotNull(parent.firstChild)) {\n\t\treturn append(parent, child);\n\t}\n\n\tif (isNodeListLike(child)) {\n\t\tconst childArr = Array.prototype.slice.call(child);\n\t\tfor (let i = childArr.length - 1; i >= 0; i--) {\n\t\t\tparent.insertBefore(childArr[i], parent.firstChild);\n\t\t}\n\t} else {\n\t\tparent.insertBefore(child, parent.firstChild);\n\t}\n\n\treturn child;\n}\n\n/**\n * Registers a custom event.\n * @param {string} eventName The name of the custom event.\n * @param {!Object} customConfig An object with information about how the event\n *   should be handled.\n */\nexport function registerCustomEvent(eventName, customConfig) {\n\tcustomEvents[eventName] = customConfig;\n}\n\n/**\n * Removes all the child nodes on a DOM node.\n * @param {Element} node Element to remove children from.\n */\nexport function removeChildren(node) {\n\tlet child;\n\twhile ((child = node.firstChild)) {\n\t\tnode.removeChild(child);\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element.\n * @param {!Element|!NodeList} elements The element or elements to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n */\nexport function removeClasses(elements, classes) {\n\tif (!isObject(elements) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif (!elements.length) {\n\t\telements = [elements];\n\t}\n\n\tfor (let i = 0; i < elements.length; i++) {\n\t\tif ('classList' in elements[i]) {\n\t\t\tremoveClassesWithNative_(elements[i], classes);\n\t\t} else {\n\t\t\tremoveClassesWithoutNative_(elements[i], classes);\n\t\t}\n\t}\n}\n\n/**\n * Removes the requested CSS classes from an element using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\tif (className) {\n\t\t\telement.classList.remove(className);\n\t\t}\n\t});\n}\n\n/**\n * IE11 doesn't support Element.classList, this method\n * removes the requested CSS classes from an element without using classList.\n * @param {!Element} element The element to remove CSS classes from.\n * @param {string} classes CSS classes to remove.\n * @private\n */\nfunction removeClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\telementClassName = elementClassName.replace(` ${classes[i]} `, ' ');\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Replaces the first element with the second.\n * @deprecated Use element1.parentNode.replaceChild(element2, element1)\n * directly instead of this method\n * @param {Element} element1\n * @param {Element} element2\n */\nexport function replace(element1, element2) {\n\tif (element1 && element2 && element1 !== element2 && element1.parentNode) {\n\t\telement1.parentNode.replaceChild(element2, element1);\n\t}\n}\n\n/**\n * The function that replaces `stopImmediatePropagation_` for events.\n * @private\n */\nfunction stopImmediatePropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tevent.stoppedImmediate = true;\n\tEvent.prototype.stopImmediatePropagation.call(event);\n}\n\n/**\n * The function that replaces `stopPropagation` for events.\n * @private\n */\nfunction stopPropagation_() {\n\tconst event = this; // eslint-disable-line\n\tevent.stopped = true;\n\tEvent.prototype.stopPropagation.call(event);\n}\n\n/**\n * Checks if the given element supports the given event type.\n * @param {!Element|string} element The DOM element or element tag name to check.\n * @param {string} eventName The name of the event to check.\n * @return {boolean}\n */\nexport function supportsEvent(element, eventName) {\n\tif (customEvents[eventName]) {\n\t\treturn true;\n\t}\n\n\tif (isString(element)) {\n\t\tif (!elementsByTag_[element]) {\n\t\t\telementsByTag_[element] = document.createElement(element);\n\t\t}\n\t\telement = elementsByTag_[element];\n\t}\n\n\tconst tag = element.tagName;\n\tif (!supportCache_[tag] || !supportCache_[tag].hasOwnProperty(eventName)) {\n\t\tsupportCache_[tag] = supportCache_[tag] || {};\n\t\tsupportCache_[tag][eventName] = 'on' + eventName in element;\n\t}\n\treturn supportCache_[tag][eventName];\n}\n\n/**\n * This triggers all default matched delegated listeners of a given event type.\n * @param {!Array} defFns Array to collect default listeners in, instead\n * @param {!Event} event\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDefaultDelegatedListeners_(defFns, event) {\n\tlet ret = true;\n\n\tfor (let i = 0; i < defFns.length && !event.defaultPrevented; i++) {\n\t\tevent.delegateTarget = defFns[i].element;\n\t\tret &= defFns[i].fn(event);\n\t}\n\n\treturn ret;\n}\n\n/**\n * This triggers all matched delegated listeners of a given event type when its\n * delegated target is able to interact.\n * @param {!Element} container\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerDelegatedListeners_(container, event, defaultFns) {\n\tlet ret = true;\n\tlet currElement = event.target;\n\tconst limit = container.parentNode;\n\n\twhile (currElement && currElement !== limit && !event.stopped) {\n\t\tif (isAbleToInteractWith_(currElement, event.type, event)) {\n\t\t\tevent.delegateTarget = currElement;\n\t\t\tret &= triggerElementListeners_(currElement, event, defaultFns);\n\t\t\tret &= triggerSelectorListeners_(\n\t\t\t\tcontainer,\n\t\t\t\tcurrElement,\n\t\t\t\tevent,\n\t\t\t\tdefaultFns\n\t\t\t);\n\t\t}\n\t\tcurrElement = currElement.parentNode;\n\t}\n\n\treturn ret;\n}\n\n/**\n * Converts the given argument to a DOM element. Strings are assumed to\n * be selectors, and so a matched element will be returned. If the arg\n * is already a DOM element it will be the return value.\n * @param {string|Element|Document} selectorOrElement\n * @return {Element} The converted element, or null if none was found.\n */\nexport function toElement(selectorOrElement) {\n\tif (\n\t\tisElement(selectorOrElement) ||\n\t\tisDocument(selectorOrElement) ||\n\t\tisDocumentFragment(selectorOrElement)\n\t) {\n\t\treturn selectorOrElement;\n\t} else if (isString(selectorOrElement)) {\n\t\treturn document.querySelector(selectorOrElement);\n\t} else {\n\t\treturn null;\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element. If any of the classes\n * is present, it will be removed from the element, or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n */\nexport function toggleClasses(element, classes) {\n\tif (!isObject(element) || !isString(classes)) {\n\t\treturn;\n\t}\n\n\tif ('classList' in element) {\n\t\ttoggleClassesWithNative_(element, classes);\n\t} else {\n\t\ttoggleClassesWithoutNative_(element, classes);\n\t}\n}\n\n/**\n * Adds or removes one or more classes from an element using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithNative_(element, classes) {\n\tclasses.split(' ').forEach(function(className) {\n\t\telement.classList.toggle(className);\n\t});\n}\n\n/**\n * IE11 doesn't support Element.classList, this method\n * adds or removes one or more classes from an element without using classList.\n * If any of the classes is present, it will be removed from the element,\n * or added otherwise.\n * @param {!Element} element The element which classes will be toggled.\n * @param {string} classes The classes which have to added or removed from the element.\n * @private\n */\nfunction toggleClassesWithoutNative_(element, classes) {\n\tlet elementClassName = ` ${element.className} `;\n\n\tclasses = classes.split(' ');\n\n\tfor (let i = 0; i < classes.length; i++) {\n\t\tconst className = ` ${classes[i]} `;\n\t\tconst classIndex = elementClassName.indexOf(className);\n\n\t\tif (classIndex === -1) {\n\t\t\telementClassName = `${elementClassName}${classes[i]} `;\n\t\t} else {\n\t\t\tconst before = elementClassName.substring(0, classIndex);\n\t\t\tconst after = elementClassName.substring(\n\t\t\t\tclassIndex + className.length\n\t\t\t); // eslint-disable-line\n\t\t\telementClassName = `${before} ${after}`;\n\t\t}\n\t}\n\n\telement.className = elementClassName.trim();\n}\n\n/**\n * Triggers all listeners for the given event type that are stored in the\n * specified element.\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerElementListeners_(element, event, defaultFns) {\n\tconst lastContainer = event[LAST_CONTAINER];\n\tif (!isDef(lastContainer) || !contains(lastContainer, element)) {\n\t\tconst listeners = domData.get(element, 'listeners', {})[event.type];\n\t\treturn triggerListeners_(listeners, event, element, defaultFns);\n\t}\n\treturn true;\n}\n\n/**\n * Triggers the specified event on the given element.\n * NOTE: This should mostly be used for testing, not on real code.\n * @param {!Element} element The node that should trigger the event.\n * @param {string} eventName The name of the event to be triggred.\n * @param {Object=} eventObj An object with data that should be on the\n *   triggered event's payload.\n */\nexport function triggerEvent(element, eventName, eventObj) {\n\tif (isAbleToInteractWith_(element, eventName, eventObj)) {\n\t\tconst payload = document.createEvent('HTMLEvents');\n\t\tpayload.initEvent(eventName, true, true);\n\t\tobject.mixin(payload, eventObj);\n\t\telement.dispatchEvent(payload);\n\t}\n}\n\n/**\n * Triggers the given listeners array.\n * @param {Array<!function()>} listeners\n * @param {!Event} event\n * @param {!Element} element\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerListeners_(listeners, event, element, defaultFns) {\n\tlet ret = true;\n\tlisteners = listeners || [];\n\tfor (let i = 0; i < listeners.length && !event.stoppedImmediate; i++) {\n\t\tif (listeners[i].defaultListener_) {\n\t\t\tdefaultFns.push({\n\t\t\t\telement,\n\t\t\t\tfn: listeners[i],\n\t\t\t});\n\t\t} else {\n\t\t\tret &= listeners[i](event);\n\t\t}\n\t}\n\treturn ret;\n}\n\n/**\n * Triggers all selector listeners for the given event.\n * @param {!Element} container\n * @param {!Element} element\n * @param {!Event} event\n * @param {!Array} defaultFns Array to collect default listeners in, instead\n *     of running them.\n * @return {boolean} False if at least one of the triggered callbacks returns\n *     false, or true otherwise.\n * @private\n */\nfunction triggerSelectorListeners_(container, element, event, defaultFns) {\n\tlet ret = true;\n\tconst data = domData.get(container, 'delegating', {});\n\tconst map = data[event.type].selectors;\n\tconst selectors = Object.keys(map);\n\tfor (let i = 0; i < selectors.length && !event.stoppedImmediate; i++) {\n\t\tif (match(element, selectors[i])) {\n\t\t\tconst listeners = map[selectors[i]];\n\t\t\tret &= triggerListeners_(listeners, event, element, defaultFns);\n\t\t}\n\t}\n\treturn ret;\n}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as dom from './domNamed';\n\nexport default dom;\nexport {dom};\nexport * from './domNamed';\n","'use strict';\n\nimport {delegate, on, supportsEvent} from './dom';\nimport {EventEmitterProxy} from 'metal-events';\n\n/**\n * DomEventEmitterProxy utility. It extends `EventEmitterProxy` to also accept\n * dom elements as origin emitters.\n * @extends {EventEmitterProxy}\n */\nclass DomEventEmitterProxy extends EventEmitterProxy {\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t * @override\n\t */\n\taddListener_(event, listener) {\n\t\tif (this.originEmitter_.addEventListener) {\n\t\t\tif (this.isDelegateEvent_(event)) {\n\t\t\t\tconst index = event.indexOf(':', 9);\n\t\t\t\tconst eventName = event.substring(9, index);\n\t\t\t\tconst selector = event.substring(index + 1);\n\t\t\t\treturn delegate(\n\t\t\t\t\tthis.originEmitter_,\n\t\t\t\t\teventName,\n\t\t\t\t\tselector,\n\t\t\t\t\tlistener\n\t\t\t\t); // eslint-disable-line\n\t\t\t} else {\n\t\t\t\treturn on(this.originEmitter_, event, listener);\n\t\t\t}\n\t\t} else {\n\t\t\treturn super.addListener_(event, listener);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event is of the delegate type.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisDelegateEvent_(event) {\n\t\treturn event.substr(0, 9) === 'delegate:';\n\t}\n\n\t/**\n\t * Checks if the given event is supported by the origin element.\n\t * @param {string} event\n\t * @protected\n\t * @return {boolean}\n\t */\n\tisSupportedDomEvent_(event) {\n\t\tif (!this.originEmitter_ || !this.originEmitter_.addEventListener) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\t(this.isDelegateEvent_(event) && event.indexOf(':', 9) !== -1) ||\n\t\t\tsupportsEvent(this.originEmitter_, event)\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t * @override\n\t */\n\tshouldProxyEvent_(event) {\n\t\treturn (\n\t\t\tsuper.shouldProxyEvent_(event) && this.isSupportedDomEvent_(event)\n\t\t); // eslint-disable-line\n\t}\n}\n\nexport default DomEventEmitterProxy;\n","'use strict';\n\nimport {append} from './dom';\nimport {string} from 'metal';\n\n/**\n * Class with static methods responsible for doing browser feature checks.\n */\nclass features {\n\t/**\n\t * Some browsers still supports prefixed animation events. This method can\n\t * be used to retrieve the current browser event name for both, animation\n\t * and transition.\n\t * @return {object}\n\t */\n\tstatic checkAnimationEventName() {\n\t\tif (features.animationEventName_ === undefined) {\n\t\t\tfeatures.animationEventName_ = {\n\t\t\t\tanimation: features.checkAnimationEventName_('animation'),\n\t\t\t\ttransition: features.checkAnimationEventName_('transition'),\n\t\t\t};\n\t\t}\n\t\treturn features.animationEventName_;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {string} type Type to test: animation, transition.\n\t * @return {string} Browser event name.\n\t */\n\tstatic checkAnimationEventName_(type) {\n\t\tconst prefixes = ['Webkit', 'MS', 'O', ''];\n\t\tconst typeTitleCase = string.replaceInterval(\n\t\t\ttype,\n\t\t\t0,\n\t\t\t1,\n\t\t\ttype.substring(0, 1).toUpperCase()\n\t\t);\n\t\tconst suffixes = [\n\t\t\t`${typeTitleCase}End`,\n\t\t\t`${typeTitleCase}End`,\n\t\t\t`${typeTitleCase}End`,\n\t\t\t`${type}end`,\n\t\t];\n\t\tif (!features.animationElement_) {\n\t\t\tfeatures.animationElement_ = document.createElement('div');\n\t\t}\n\t\tfor (let i = 0; i < prefixes.length; i++) {\n\t\t\tif (\n\t\t\t\tfeatures.animationElement_.style[\n\t\t\t\t\tprefixes[i] + typeTitleCase\n\t\t\t\t] !== undefined // eslint-disable-line\n\t\t\t) {\n\t\t\t\treturn prefixes[i].toLowerCase() + suffixes[i];\n\t\t\t}\n\t\t}\n\t\treturn `${type}end`;\n\t}\n\n\t/**\n\t * Some browsers (like IE11, Edge) change the order of element attributes, when html\n\t * is rendered. This method can be used to check if this behavior happens on\n\t * the current browser.\n\t * @return {boolean}\n\t */\n\tstatic checkAttrOrderChange() {\n\t\tif (features.attrOrderChange_ === undefined) {\n\t\t\tconst originalContent = '<div data-component=\"\" data-ref=\"\"></div>';\n\t\t\tconst element = document.createElement('div');\n\t\t\tappend(element, originalContent);\n\t\t\tfeatures.attrOrderChange_ = originalContent !== element.innerHTML;\n\t\t}\n\t\treturn features.attrOrderChange_;\n\t}\n}\n\nfeatures.animationElement_ = undefined;\nfeatures.animationEventName_ = undefined;\nfeatures.attrOrderChange_ = undefined;\n\nexport default features;\n","'use strict';\n\nimport {async} from 'metal';\nimport {exitDocument, once} from './dom';\n\n/**\n * Utility functions for running javascript code in the global scope.\n */\nclass globalEval {\n\t/**\n\t * Evaluates the given string in the global scope.\n\t * @param {string} text\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic run(text, appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.text = text;\n\t\tif (appendFn) {\n\t\t\tappendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\t\texitDocument(script);\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the given javascript file in the global scope.\n\t * @param {string} src The file's path.\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runFile(src, defaultFn, appendFn) {\n\t\tconst script = document.createElement('script');\n\t\tscript.src = src;\n\n\t\tconst callback = function() {\n\t\t\texitDocument(script);\n\t\t\tdefaultFn && defaultFn();\n\t\t};\n\t\tonce(script, 'load', callback);\n\t\tonce(script, 'error', callback);\n\n\t\tif (appendFn) {\n\t\t\tappendFn(script);\n\t\t} else {\n\t\t\tdocument.head.appendChild(script);\n\t\t}\n\n\t\treturn script;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given script element.\n\t * @param {!Element} script\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} script\n\t */\n\tstatic runScript(script, defaultFn, appendFn) {\n\t\tconst callback = function() {\n\t\t\tdefaultFn && defaultFn();\n\t\t};\n\t\tif (script.type && script.type !== 'text/javascript') {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\t\texitDocument(script);\n\t\tif (script.src) {\n\t\t\treturn globalEval.runFile(script.src, defaultFn, appendFn);\n\t\t} else {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn globalEval.run(script.text, appendFn);\n\t\t}\n\t}\n\n\t/**\n\t * Evaluates any script tags present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInElement(element, defaultFn, appendFn) {\n\t\tconst scripts = element.querySelectorAll('script');\n\t\tif (scripts.length) {\n\t\t\tglobalEval.runScriptsInOrder(scripts, 0, defaultFn, appendFn);\n\t\t} else if (defaultFn) {\n\t\t\tasync.nextTick(defaultFn);\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given scripts elements in the order that they appear.\n\t * @param {!NodeList} scripts\n\t * @param {number} index\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runScriptsInOrder(scripts, index, defaultFn, appendFn) {\n\t\tglobalEval.runScript(\n\t\t\tscripts.item(index),\n\t\t\tfunction() {\n\t\t\t\tif (index < scripts.length - 1) {\n\t\t\t\t\tglobalEval.runScriptsInOrder(\n\t\t\t\t\t\tscripts,\n\t\t\t\t\t\tindex + 1,\n\t\t\t\t\t\tdefaultFn,\n\t\t\t\t\t\tappendFn\n\t\t\t\t\t); // eslint-disable-line\n\t\t\t\t} else if (defaultFn) {\n\t\t\t\t\tasync.nextTick(defaultFn);\n\t\t\t\t}\n\t\t\t},\n\t\t\tappendFn\n\t\t);\n\t}\n}\n\nexport default globalEval;\n","'use strict';\n\nimport {async} from 'metal';\nimport {once} from './dom';\n\n/**\n * Utility functions for running styles.\n */\nclass globalEvalStyles {\n\t/**\n\t * Evaluates the given style.\n\t * @param {string} text\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic run(text, appendFn) {\n\t\tconst style = document.createElement('style');\n\t\tstyle.innerHTML = text;\n\t\tif (appendFn) {\n\t\t\tappendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates the given style file.\n\t * @param {string} href The file's path.\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the styles has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t * @return {Element} style\n\t */\n\tstatic runFile(href, defaultFn, appendFn) {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = href;\n\t\tglobalEvalStyles.runStyle(link, defaultFn, appendFn);\n\t\treturn link;\n\t}\n\n\t/**\n\t * Evaluates the code referenced by the given style/link element.\n\t * @param {!Element} style\n\t * @param {function()=} defaultFn Optional function to be called\n\t *   when the script has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t *  @return {Element} style\n\t */\n\tstatic runStyle(style, defaultFn, appendFn) {\n\t\tconst callback = function() {\n\t\t\tdefaultFn && defaultFn();\n\t\t};\n\t\tif (\n\t\t\tstyle.rel &&\n\t\t\tstyle.rel !== 'stylesheet' &&\n\t\t\tstyle.rel !== 'canonical' &&\n\t\t\tstyle.rel !== 'alternate'\n\t\t) {\n\t\t\tasync.nextTick(callback);\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tstyle.tagName === 'STYLE' ||\n\t\t\tstyle.rel === 'canonical' ||\n\t\t\tstyle.rel === 'alternate'\n\t\t) {\n\t\t\tasync.nextTick(callback);\n\t\t} else {\n\t\t\tonce(style, 'load', callback);\n\t\t\tonce(style, 'error', callback);\n\t\t}\n\n\t\tif (appendFn) {\n\t\t\tappendFn(style);\n\t\t} else {\n\t\t\tdocument.head.appendChild(style);\n\t\t}\n\n\t\treturn style;\n\t}\n\n\t/**\n\t * Evaluates any style present in the given element.\n\t * @param {!Element} element\n\t * @param {function()=} defaultFn Optional function to be called when the\n\t *   style has been run.\n\t * @param {function()=} appendFn Optional function to append the node\n\t *   into document.\n\t */\n\tstatic runStylesInElement(element, defaultFn, appendFn) {\n\t\tconst styles = element.querySelectorAll('style,link');\n\t\tif (styles.length === 0 && defaultFn) {\n\t\t\tasync.nextTick(defaultFn);\n\t\t\treturn;\n\t\t}\n\n\t\tlet loadCount = 0;\n\t\tconst callback = function() {\n\t\t\tif (defaultFn && ++loadCount === styles.length) {\n\t\t\t\tasync.nextTick(defaultFn);\n\t\t\t}\n\t\t};\n\t\tfor (let i = 0; i < styles.length; i++) {\n\t\t\tglobalEvalStyles.runStyle(styles[i], callback, appendFn);\n\t\t}\n\t}\n}\n\nexport default globalEvalStyles;\n","'use strict';\n\nimport {isServerSide} from 'metal';\nimport {registerCustomEvent, contains} from './dom';\nimport features from './features';\n\n/**\n * Register custom events for event delegation.\n */\nfunction registerEvents() {\n\tconst mouseEventMap = {\n\t\tmouseenter: 'mouseover',\n\t\tmouseleave: 'mouseout',\n\t\tpointerenter: 'pointerover',\n\t\tpointerleave: 'pointerout',\n\t};\n\tObject.keys(mouseEventMap).forEach(function(eventName) {\n\t\tregisterCustomEvent(eventName, {\n\t\t\tdelegate: true,\n\t\t\thandler: function(callback, event) {\n\t\t\t\tconst related = event.relatedTarget;\n\t\t\t\tconst target = event.delegateTarget;\n\t\t\t\t// eslint-disable-next-line\n\t\t\t\tif (\n\t\t\t\t\t!related ||\n\t\t\t\t\t(related !== target && !contains(target, related))\n\t\t\t\t) {\n\t\t\t\t\tevent.customType = eventName;\n\t\t\t\t\treturn callback(event);\n\t\t\t\t}\n\t\t\t},\n\t\t\toriginalEvent: mouseEventMap[eventName],\n\t\t});\n\t});\n\n\tconst animationEventMap = {\n\t\tanimation: 'animationend',\n\t\ttransition: 'transitionend',\n\t};\n\tObject.keys(animationEventMap).forEach(function(eventType) {\n\t\tconst eventName = animationEventMap[eventType];\n\t\tregisterCustomEvent(eventName, {\n\t\t\tevent: true,\n\t\t\tdelegate: true,\n\t\t\thandler: function(callback, event) {\n\t\t\t\tevent.customType = eventName;\n\t\t\t\treturn callback(event);\n\t\t\t},\n\t\t\toriginalEvent: features.checkAnimationEventName()[eventType],\n\t\t});\n\t});\n}\n\nif (!isServerSide()) {\n\tregisterEvents();\n}\n","var globals = globals || {};\n\nif (typeof window !== 'undefined') {\n\tglobals.window = window;\n}\n\nif (typeof document !== 'undefined') {\n\tglobals.document = document;\n}\n\nexport default globals;\n","'use strict';\n\n/**\n * A collection of core utility functions.\n * @const\n */\n\nlet compatibilityModeData_;\n\n/**\n * Counter for unique id.\n * @type {Number}\n * @private\n */\nlet uniqueIdCounter_ = 1;\n\n/**\n * Unique id property prefix.\n * @type {String}\n * @protected\n */\nexport const UID_PROPERTY = `core_${(Math.random() * 1e9) >>> 0}`;\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\nexport function abstractMethod() {\n\tthrow Error('Unimplemented abstract method');\n}\n\n/**\n * Disables Metal.js's compatibility mode.\n */\nexport function disableCompatibilityMode() {\n\tcompatibilityModeData_ = undefined;\n}\n\n/**\n * Enables Metal.js's compatibility mode with the following features from rc\n * and 1.x versions:\n *     - Using \"key\" to reference component instances. In the current version\n *       this should be done via \"ref\" instead. This allows old code still\n *       using \"key\" to keep working like before. NOTE: this may cause\n *       problems, since \"key\" is meant to be used differently. Only use this\n *       if it's not possible to upgrade the code to use \"ref\" instead.\n * @param {Object=} data Optional object with data to specify more\n *     details, such as:\n *         - renderers {Array} the template renderers that should be in\n *           compatibility mode, either their constructors or strings\n *           representing them (e.g. 'soy' or 'jsx'). By default, all the ones\n *           that extend from IncrementalDomRenderer.\n * @type {Object}\n */\nexport function enableCompatibilityMode(data = {}) {\n\tcompatibilityModeData_ = data;\n}\n\n/**\n * Returns the data used for compatibility mode, or nothing if it hasn't been\n * enabled.\n * @return {Object}\n */\nexport function getCompatibilityModeData() {\n\t// Compatibility mode can be set via the __METAL_COMPATIBILITY__ global var.\n\tif (compatibilityModeData_ === undefined) {\n\t\tif (typeof window !== 'undefined' && window.__METAL_COMPATIBILITY__) {\n\t\t\tenableCompatibilityMode(window.__METAL_COMPATIBILITY__);\n\t\t}\n\t}\n\treturn compatibilityModeData_;\n}\n\n/**\n * Returns the first argument if it's truthy, or the second otherwise.\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @protected\n */\nfunction getFirstTruthy_(a, b) {\n\treturn a || b;\n}\n\n/**\n * Gets the name of the given function. If the current browser doesn't\n * support the `name` property, this will calculate it from the function's\n * content string.\n * @param {!function()} fn\n * @return {string}\n */\nexport function getFunctionName(fn) {\n\tif (!fn.name) {\n\t\tconst str = fn.toString();\n\t\tfn.name = str.substring(9, str.indexOf('('));\n\t}\n\treturn fn.name;\n}\n\n/**\n * Gets the value of a static property in the given class. The value will be\n * inherited from ancestors as expected, unless a custom merge function is given,\n * which can change how the super classes' value for that property will be merged\n * together.\n * The final merged value will be stored in another property, so that it won't\n * be recalculated even if this function is called multiple times.\n * @param {!function()} ctor Class constructor.\n * @param {string} propertyName Property name to be merged.\n * @param {function(*, *):*=} mergeFn Function that receives the merged\n *     value of the property so far and the next value to be merged to it.\n *     Should return these two merged together. If not passed the final property\n *     will be the first truthy value among ancestors.\n * @return {Object}\n */\nexport function getStaticProperty(\n\tctor,\n\tpropertyName,\n\tmergeFn = getFirstTruthy_\n) {\n\tconst mergedName = propertyName + '_MERGED';\n\tif (!ctor.hasOwnProperty(mergedName)) {\n\t\t// eslint-disable-next-line\n\t\tlet merged = ctor.hasOwnProperty(propertyName)\n\t\t\t? ctor[propertyName]\n\t\t\t: null;\n\t\tif (ctor.__proto__ && !ctor.__proto__.isPrototypeOf(Function)) {\n\t\t\tmerged = mergeFn(\n\t\t\t\tmerged,\n\t\t\t\tgetStaticProperty(ctor.__proto__, propertyName, mergeFn)\n\t\t\t);\n\t\t}\n\t\tctor[mergedName] = merged;\n\t}\n\treturn ctor[mergedName];\n}\n\n/**\n * Gets an unique id. If `object` argument is passed, the object is\n * mutated with an unique id. Consecutive calls with the same object\n * reference won't mutate the object again, instead the current object uid\n * returns. See {@link UID_PROPERTY}.\n * @param {Object=} object Optional object to be mutated with the uid. If\n *     not specified this method only returns the uid.\n * @param {boolean=} noInheritance Optional flag indicating if this\n *     object's uid property can be inherited from parents or not.\n * @throws {Error} when invoked to indicate the method should be overridden.\n * @return {number}\n */\nexport function getUid(object, noInheritance) {\n\tif (object) {\n\t\tlet id = object[UID_PROPERTY];\n\t\tif (noInheritance && !object.hasOwnProperty(UID_PROPERTY)) {\n\t\t\tid = null;\n\t\t}\n\t\treturn id || (object[UID_PROPERTY] = uniqueIdCounter_++);\n\t}\n\treturn uniqueIdCounter_++;\n}\n\n/**\n * The identity function. Returns its first argument.\n * @param {*=} returnValue The single value that will be returned.\n * @return {?} The first argument.\n */\nexport function identityFunction(returnValue) {\n\treturn returnValue;\n}\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\nexport function isBoolean(val) {\n\treturn typeof val === 'boolean';\n}\n\n/**\n * Returns true if the specified value is not undefined.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\nexport function isDef(val) {\n\treturn val !== undefined;\n}\n\n/**\n * Returns true if value is not undefined or null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDefAndNotNull(val) {\n\treturn isDef(val) && !isNull(val);\n}\n\n/**\n * Returns true if value is a document.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocument(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 9;\n}\n\n/**\n * Returns true if value is a document-fragment.\n * @param {*} val\n * @return {boolean}\n */\nexport function isDocumentFragment(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 11;\n}\n\n/**\n * Returns true if value is a dom element.\n * @param {*} val\n * @return {boolean}\n */\nexport function isElement(val) {\n\treturn val && typeof val === 'object' && val.nodeType === 1;\n}\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\nexport function isFunction(val) {\n\treturn typeof val === 'function';\n}\n\n/**\n * Returns true if value is null.\n * @param {*} val\n * @return {boolean}\n */\nexport function isNull(val) {\n\treturn val === null;\n}\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\nexport function isNumber(val) {\n\treturn typeof val === 'number';\n}\n\n/**\n * Returns true if value is a window.\n * @param {*} val\n * @return {boolean}\n */\nexport function isWindow(val) {\n\treturn val !== null && val === val.window;\n}\n\n/**\n * Returns true if the specified value is an object. This includes arrays\n * and functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\nexport function isObject(val) {\n\tconst type = typeof val;\n\treturn (type === 'object' && val !== null) || type === 'function';\n}\n\n/**\n * Returns true if value is a Promise.\n * @param {*} val\n * @return {boolean}\n */\nexport function isPromise(val) {\n\treturn val && typeof val === 'object' && typeof val.then === 'function';\n}\n\n/**\n * Returns true if value is a string.\n * @param {*} val\n * @return {boolean}\n */\nexport function isString(val) {\n\treturn typeof val === 'string' || val instanceof String;\n}\n\n/**\n * Sets to true if running inside Node.js environment with extra check for\n * `process.browser` to skip Karma runner environment. Karma environment has\n * `process` defined even though it runs on the browser.\n * @param {?Object} options Contains `checkEnv` property which if true, checks\n * the NODE_ENV variable. If NODE_ENV equals 'test', the function returns false.\n * @return {boolean}\n */\nexport function isServerSide(options = {checkEnv: true}) {\n\tlet serverSide = typeof process !== 'undefined' && !process.browser;\n\tif (serverSide && options.checkEnv) {\n\t\tserverSide =\n\t\t\ttypeof process.env !== 'undefined' &&\n\t\t\tprocess.env.NODE_ENV !== 'test';\n\t}\n\treturn serverSide;\n}\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\nexport function nullFunction() {}\n","'use strict';\n\n// This file exists just for backwards compatibility, making sure that old\n// default imports for this file still work. It's best to use the named exports\n// for each function instead though, since that allows bundlers like Rollup to\n// reduce the bundle size by removing unused code.\nimport * as core from './coreNamed';\n\nexport default core;\nexport {core};\nexport * from './coreNamed';\n","'use strict';\n\n/**\n * Set of utilities for array operations\n */\nclass array {\n\t/**\n\t * Checks if the given arrays have the same content.\n\t * @param {!Array<*>} arr1\n\t * @param {!Array<*>} arr2\n\t * @return {boolean}\n\t */\n\tstatic equal(arr1, arr2) {\n\t\tif (arr1 === arr2) {\n\t\t\treturn true;\n\t\t}\n\t\tif (arr1.length !== arr2.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < arr1.length; i++) {\n\t\t\tif (arr1[i] !== arr2[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the first value in the given array that isn't undefined.\n\t * @param {!Array} arr\n\t * @return {*}\n\t */\n\tstatic firstDefinedValue(arr) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (arr[i] !== undefined) {\n\t\t\t\treturn arr[i];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Transforms the input nested array to become flat.\n\t * @param {Array.<*|Array.<*>>} arr Nested array to flatten.\n\t * @param {Array.<*>=} output Optional output array.\n\t * @return {Array.<*>} Flat array.\n\t */\n\tstatic flatten(arr, output = []) {\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tif (Array.isArray(arr[i])) {\n\t\t\t\tarray.flatten(arr[i], output);\n\t\t\t} else {\n\t\t\t\toutput.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Removes the first occurrence of a particular value from an array.\n\t * @param {Array.<T>} arr Array from which to remove value.\n\t * @param {T} obj Object to remove.\n\t * @return {boolean} True if an element was removed.\n\t * @template T\n\t */\n\tstatic remove(arr, obj) {\n\t\tconst i = arr.indexOf(obj);\n\t\tlet rv;\n\t\tif ((rv = i >= 0)) {\n\t\t\tarray.removeAt(arr, i);\n\t\t}\n\t\treturn rv;\n\t}\n\n\t/**\n\t * Removes from an array the element at index i\n\t * @param {Array} arr Array or array like object from which to remove value.\n\t * @param {number} i The index to remove.\n\t * @return {boolean} True if an element was removed.\n\t */\n\tstatic removeAt(arr, i) {\n\t\treturn Array.prototype.splice.call(arr, i, 1).length === 1;\n\t}\n\n\t/**\n\t * Slices the given array, just like Array.prototype.slice, but this\n\t * is faster and working on all array-like objects (like arguments).\n\t * @param {!Object} arr Array-like object to slice.\n\t * @param {number} start The index that should start the slice.\n\t * @param {number=} end The index where the slice should end, not\n\t *   included in the final array. If not given, all elements after the\n\t *   start index will be included.\n\t * @return {!Array}\n\t */\n\tstatic slice(arr, start, end = arr.length) {\n\t\tconst sliced = [];\n\t\tfor (let i = start; i < end; i++) {\n\t\t\tsliced.push(arr[i]);\n\t\t}\n\t\treturn sliced;\n\t}\n}\n\nexport default array;\n","/* !\n * Polyfill from Google's Closure Library.\n * Copyright 2013 The Closure Library Authors. All Rights Reserved.\n */\n\n'use strict';\n\nimport {isServerSide} from '../coreNamed';\n\nconst async = {};\n\n/**\n * Throw an item without interrupting the current execution context.  For\n * example, if processing a group of items in a loop, sometimes it is useful\n * to report an error while still allowing the rest of the batch to be\n * processed.\n * @param {*} exception\n */\nasync.throwException = function(exception) {\n\t// Each throw needs to be in its own context.\n\tasync.nextTick(function() {\n\t\tthrow exception;\n\t});\n};\n\n/**\n * Fires the provided callback just before the current callstack unwinds, or as\n * soon as possible after the current JS execution context.\n * @param {function(this:THIS)} callback\n * @param {THIS=} context Object to use as the \"this value\" when calling\n *     the provided function.\n * @template THIS\n */\nasync.run = function(callback, context) {\n\tif (!async.run.workQueueScheduled_) {\n\t\t// Nothing is currently scheduled, schedule it now.\n\t\tasync.nextTick(async.run.processWorkQueue);\n\t\tasync.run.workQueueScheduled_ = true;\n\t}\n\n\tasync.run.workQueue_.push(new async.run.WorkItem_(callback, context));\n};\n\n/** @private {boolean} */\nasync.run.workQueueScheduled_ = false;\n\n/** @private {!Array.<!async.run.WorkItem_>} */\nasync.run.workQueue_ = [];\n\n/**\n * Run any pending async.run work items. This function is not intended\n * for general use, but for use by entry point handlers to run items ahead of\n * async.nextTick.\n */\nasync.run.processWorkQueue = function() {\n\t// NOTE: additional work queue items may be pushed while processing.\n\twhile (async.run.workQueue_.length) {\n\t\t// Don't let the work queue grow indefinitely.\n\t\tconst workItems = async.run.workQueue_;\n\t\tasync.run.workQueue_ = [];\n\t\tfor (let i = 0; i < workItems.length; i++) {\n\t\t\tconst workItem = workItems[i];\n\t\t\ttry {\n\t\t\t\tworkItem.fn.call(workItem.scope);\n\t\t\t} catch (e) {\n\t\t\t\tasync.throwException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\t// There are no more work items, reset the work queue.\n\tasync.run.workQueueScheduled_ = false;\n};\n\n/**\n * @constructor\n * @final\n * @struct\n * @private\n *\n * @param {function()} fn\n * @param {Object|null|undefined} scope\n */\nasync.run.WorkItem_ = function(fn, scope) {\n\t/** @const */\n\tthis.fn = fn;\n\t/** @const */\n\tthis.scope = scope;\n};\n\n/**\n * Fires the provided callbacks as soon as possible after the current JS\n * execution context. setTimeout(…, 0) always takes at least 5ms for legacy\n * reasons.\n * @param {function(this:SCOPE)} callback Callback function to fire as soon as\n *     possible.\n * @param {SCOPE=} context Object in whose scope to call the listener.\n * @template SCOPE\n */\nasync.nextTick = function(callback, context) {\n\tlet cb = callback;\n\tif (context) {\n\t\tcb = callback.bind(context);\n\t}\n\tcb = async.nextTick.wrapCallback_(cb);\n\t// Look for and cache the custom fallback version of setImmediate.\n\tif (!async.nextTick.setImmediate_) {\n\t\tif (\n\t\t\ttypeof setImmediate === 'function' &&\n\t\t\tisServerSide({checkEnv: false})\n\t\t) {\n\t\t\tasync.nextTick.setImmediate_ = setImmediate;\n\t\t} else {\n\t\t\t// eslint-disable-next-line\n\t\t\tasync.nextTick.setImmediate_ = async.nextTick.getSetImmediateEmulator_();\n\t\t}\n\t}\n\tasync.nextTick.setImmediate_(cb);\n};\n\n/**\n * Cache for the setImmediate implementation.\n * @type {function(function())}\n * @private\n */\nasync.nextTick.setImmediate_ = null;\n\n/**\n * Determines the best possible implementation to run a function as soon as\n * the JS event loop is idle.\n * @return {function(function())} The \"setImmediate\" implementation.\n * @private\n */\nasync.nextTick.getSetImmediateEmulator_ = function() {\n\t// Create a private message channel and use it to postMessage empty messages\n\t// to ourselves.\n\tlet Channel;\n\n\t// Verify if variable is defined on the current runtime (i.e., node, browser).\n\t// Can't use typeof enclosed in a function (such as core.isFunction) or an\n\t// exception will be thrown when the function is called on an environment\n\t// where the variable is undefined.\n\tif (typeof MessageChannel === 'function') {\n\t\tChannel = MessageChannel;\n\t}\n\n\t// If MessageChannel is not available and we are in a browser, implement\n\t// an iframe based polyfill in browsers that have postMessage and\n\t// document.addEventListener. The latter excludes IE8 because it has a\n\t// synchronous postMessage implementation.\n\tif (\n\t\ttypeof Channel === 'undefined' &&\n\t\ttypeof window !== 'undefined' &&\n\t\twindow.postMessage &&\n\t\twindow.addEventListener\n\t) {\n\t\t/** @constructor */\n\t\tChannel = function() {\n\t\t\t// Make an empty, invisible iframe.\n\t\t\tconst iframe = document.createElement('iframe');\n\t\t\tiframe.style.display = 'none';\n\t\t\tiframe.src = '';\n\t\t\tiframe.title = '';\n\t\t\tdocument.documentElement.appendChild(iframe);\n\t\t\tconst win = iframe.contentWindow;\n\t\t\tconst doc = win.document;\n\t\t\tdoc.open();\n\t\t\tdoc.write('');\n\t\t\tdoc.close();\n\t\t\tconst message = 'callImmediate' + Math.random();\n\t\t\tconst origin = win.location.protocol + '//' + win.location.host;\n\t\t\tconst onmessage = function(e) {\n\t\t\t\t// Validate origin and message to make sure that this message was\n\t\t\t\t// intended for us.\n\t\t\t\tif (e.origin !== origin && e.data !== message) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.port1.onmessage();\n\t\t\t}.bind(this);\n\t\t\twin.addEventListener('message', onmessage, false);\n\t\t\tthis.port1 = {};\n\t\t\tthis.port2 = {\n\t\t\t\tpostMessage: function() {\n\t\t\t\t\twin.postMessage(message, origin);\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\t}\n\tif (typeof Channel !== 'undefined') {\n\t\tconst channel = new Channel();\n\t\t// Use a fifo linked list to call callbacks in the right order.\n\t\tlet head = {};\n\t\tlet tail = head;\n\t\tchannel.port1.onmessage = function() {\n\t\t\thead = head.next;\n\t\t\tconst cb = head.cb;\n\t\t\thead.cb = null;\n\t\t\tcb();\n\t\t};\n\t\treturn function(cb) {\n\t\t\ttail.next = {\n\t\t\t\tcb: cb,\n\t\t\t};\n\t\t\ttail = tail.next;\n\t\t\tchannel.port2.postMessage(0);\n\t\t};\n\t}\n\t// Implementation for IE6-8: Script elements fire an asynchronous\n\t// onreadystatechange event when inserted into the DOM.\n\tif (\n\t\ttypeof document !== 'undefined' &&\n\t\t'onreadystatechange' in document.createElement('script')\n\t) {\n\t\treturn function(cb) {\n\t\t\tlet script = document.createElement('script');\n\t\t\tscript.onreadystatechange = function() {\n\t\t\t\t// Clean up and call the callback.\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\tscript.parentNode.removeChild(script);\n\t\t\t\tscript = null;\n\t\t\t\tcb();\n\t\t\t\tcb = null;\n\t\t\t};\n\t\t\tdocument.documentElement.appendChild(script);\n\t\t};\n\t}\n\t// Fall back to setTimeout with 0. In browsers this creates a delay of 5ms\n\t// or more.\n\treturn function(cb) {\n\t\tsetTimeout(cb, 0);\n\t};\n};\n\n/**\n * Helper function that is overrided to protect callbacks with entry point\n * monitor if the application monitors entry points.\n * @param {function()} callback Callback function to fire as soon as possible.\n * @return {function()} The wrapped callback.\n * @private\n */\nasync.nextTick.wrapCallback_ = function(callback) {\n\treturn callback;\n};\n\nexport default async;\n","'use strict';\n\n/**\n * Disposable utility. When inherited provides the `dispose` function to its\n * subclass, which is responsible for disposing of any object references\n * when an instance won't be used anymore. Subclasses should override\n * `disposeInternal` to implement any specific disposing logic.\n * @constructor\n */\nclass Disposable {\n\t/**\n\t * Disposable constructor\n\t */\n\tconstructor() {\n\t\t/**\n\t\t * Flag indicating if this instance has already been disposed.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.disposed_ = false;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references. Calls `disposeInternal`.\n\t */\n\tdispose() {\n\t\tif (!this.disposed_) {\n\t\t\tthis.disposeInternal();\n\t\t\tthis.disposed_ = true;\n\t\t}\n\t}\n\n\t/**\n\t * Subclasses should override this method to implement any specific\n\t * disposing logic (like clearing references and calling `dispose` on other\n\t * disposables).\n\t */\n\tdisposeInternal() {}\n\n\t/**\n\t * Checks if this instance has already been disposed.\n\t * @return {boolean}\n\t */\n\tisDisposed() {\n\t\treturn this.disposed_;\n\t}\n}\n\nexport default Disposable;\n","'use strict';\n\n/**\n * Set of utilities for object operations\n */\nclass object {\n\t/**\n\t * Copies all the members of a source object to a target object.\n\t * @param {Object} target Target object.\n\t * @param {...Object} var_args The objects from which values will be copied.\n\t * @return {Object} Returns the target object reference.\n\t */\n\tstatic mixin(target, ...args) {\n\t\tlet key;\n\t\tlet source;\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tsource = args[i];\n\t\t\t// Possible prototype chain leak, breaks 1 metal-dom and\n\t\t\t// 1 metal-incremental-dom test if guard-for-in rule is addressed\n\t\t\t// eslint-disable-next-line\n\t\t\tfor (key in source) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Returns an object based on its fully qualified external name.\n\t * @param {string} name The fully qualified name.\n\t * @param {object=} scope The object within which to look; default is\n\t *     <code>window</code>.\n\t * @return {?} The value (object or primitive) or, if not found, undefined.\n\t */\n\tstatic getObjectByName(name, scope = window) {\n\t\tconst parts = name.split('.');\n\t\treturn parts.reduce((part, key) => part[key], scope);\n\t}\n\n\t/**\n\t * Returns a new object with the same keys as the given one, but with\n\t * their values set to the return values of the specified function.\n\t * @param {!Object} obj\n\t * @param {!function(string, *)} fn\n\t * @return {!Object}\n\t */\n\tstatic map(obj, fn) {\n\t\tconst mappedObj = {};\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmappedObj[keys[i]] = fn(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn mappedObj;\n\t}\n\n\t/**\n\t * Checks if the two given objects are equal. This is done via a shallow\n\t * check, including only the keys directly contained by the 2 objects.\n\t * @param {Object} obj1\n\t * @param {Object} obj2\n\t * @return {boolean}\n\t */\n\tstatic shallowEqual(obj1, obj2) {\n\t\tif (obj1 === obj2) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst keys1 = Object.keys(obj1);\n\t\tconst keys2 = Object.keys(obj2);\n\t\tif (keys1.length !== keys2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < keys1.length; i++) {\n\t\t\tif (obj1[keys1[i]] !== obj2[keys1[i]]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport default object;\n","'use strict';\n\n/**\n * Set of utilities for string operations\n */\nclass string {\n\t/**\n\t * Compares the given strings without taking the case into account.\n\t * @param {string|number} str1\n\t * @param {string|number} str2\n\t * @return {number} Either -1, 0 or 1, according to if the first string is\n\t *     \"smaller\", equal or \"bigger\" than the second given string.\n\t */\n\tstatic caseInsensitiveCompare(str1, str2) {\n\t\tconst test1 = String(str1).toLowerCase();\n\t\tconst test2 = String(str2).toLowerCase();\n\n\t\tif (test1 < test2) {\n\t\t\treturn -1;\n\t\t} else if (test1 === test2) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the breaking spaces from the left and right of the string and\n\t * collapses the sequences of breaking spaces in the middle into single spaces.\n\t * The original and the result strings render the same way in HTML.\n\t * @param {string} str A string in which to collapse spaces.\n\t * @return {string} Copy of the string with normalized breaking spaces.\n\t */\n\tstatic collapseBreakingSpaces(str) {\n\t\treturn str\n\t\t\t.replace(/[\\t\\r\\n ]+/g, ' ')\n\t\t\t.replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n\t}\n\n\t/**\n\t * Escapes characters in the string that are not safe to use in a RegExp.\n\t * @param {*} str The string to escape. If not a string, it will be casted\n\t *     to one.\n\t * @return {string} A RegExp safe, escaped copy of {@code s}.\n\t */\n\tstatic escapeRegex(str) {\n\t\treturn String(str)\n\t\t\t.replace(/([-()[\\]{}+?*.$^|,:#<!\\\\])/g, '\\\\$1')\n\t\t\t.replace(/\\x08/g, '\\\\x08'); // eslint-disable-line\n\t}\n\n\t/**\n\t * Returns a string with at least 64-bits of randomness.\n\t * @return {string} A random string, e.g. sn1s7vb4gcic.\n\t */\n\tstatic getRandomString() {\n\t\tconst x = 2147483648;\n\t\treturn (\n\t\t\tMath.floor(Math.random() * x).toString(36) +\n\t\t\tMath.abs(Math.floor(Math.random() * x) ^ Date.now()).toString(36)\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the hashcode for a string. The hashcode value is computed by\n\t * the sum algorithm: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]. A nice\n\t * property of using 31 prime is that the multiplication can be replaced by\n\t * a shift and a subtraction for better performance: 31*i == (i<<5)-i.\n\t * Modern VMs do this sort of optimization automatically.\n\t * @param {String} val Target string.\n\t * @return {Number} Returns the string hashcode.\n\t */\n\tstatic hashCode(val) {\n\t\tlet hash = 0;\n\t\tfor (let i = 0, len = val.length; i < len; i++) {\n\t\t\thash = 31 * hash + val.charCodeAt(i);\n\t\t\thash %= 0x100000000;\n\t\t}\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Replaces interval into the string with specified value, e.g.\n\t * `replaceInterval(\"abcde\", 1, 4, \"\")` returns \"ae\".\n\t * @param {string} str The input string.\n\t * @param {Number} start Start interval position to be replaced.\n\t * @param {Number} end End interval position to be replaced.\n\t * @param {string} value The value that replaces the specified interval.\n\t * @return {string}\n\t */\n\tstatic replaceInterval(str, start, end, value) {\n\t\treturn str.substring(0, start) + value + str.substring(end);\n\t}\n}\n\nexport default string;\n","'use strict';\n\n/**\n * Parses the given uri string into an object.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parseFromAnchor(opt_uri) {\n\tvar link = document.createElement('a');\n\tlink.href = opt_uri;\n\n\tif(link.protocol === ':' || !/:/.test(link.href)) {\n\t\tthrow new TypeError(`${opt_uri} is not a valid URL`);\n\t}\n\n\treturn {\n\t\thash: link.hash,\n\t\thostname: link.hostname,\n\t\tpassword: link.password,\n\t\tpathname: link.pathname[0] === '/' ? link.pathname : '/' + link.pathname,\n\t\tport: link.port,\n\t\tprotocol: link.protocol,\n\t\tsearch: link.search,\n\t\tusername: link.username\n\t};\n}\n\nexport default parseFromAnchor;\n","'use strict';\n\nimport { isFunction } from 'metal';\nimport parseFromAnchor from './parseFromAnchor';\n\n/**\n * Parses the given uri string into an object. The URL function will be used\n * when present, otherwise we'll fall back to the anchor node element.\n * @param {*=} opt_uri Optional string URI to parse\n */\nfunction parse(opt_uri) {\n\tif (isFunction(URL) && URL.length) {\n\t\tconst url = new URL(opt_uri);\n\n\t\t// Safari Browsers will cap port to the max 16-bit unsigned integer (65535) instead\n\t\t// of throwing a TypeError as per spec. It will still keep the port number in the\n\t\t// href attribute, so we can use this mismatch to raise the expected exception.\n\t\tif (url.port && url.href.indexOf(url.port) === -1) {\n\t\t\tthrow new TypeError(`${opt_uri} is not a valid URL`);\n\t\t}\n\n\t\treturn url;\n\t} else {\n\t\treturn parseFromAnchor(opt_uri);\n\t}\n}\n\nexport default parse;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\n/**\n * A cached reference to the create function.\n */\nvar create = Object.create;\n\n/**\n * Case insensitive string Multimap implementation. Allows multiple values for\n * the same key name.\n * @extends {Disposable}\n */\nclass MultiMap extends Disposable {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t}\n\n\t/**\n\t * Adds value to a key name.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tadd(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = this.values[name.toLowerCase()] || [];\n\t\tthis.values[name.toLowerCase()].push(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears map names and values.\n\t * @chainable\n\t */\n\tclear() {\n\t\tthis.keys = create(null);\n\t\tthis.values = create(null);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Checks if map contains a value to the key name.\n\t * @param {string} name\n\t * @return {boolean}\n\t * @chainable\n\t */\n\tcontains(name) {\n\t\treturn name.toLowerCase() in this.values;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.values = null;\n\t}\n\n\t/**\n\t * Creates a `MultiMap` instance from the given object.\n\t * @param {!Object} obj\n\t * @return {!MultiMap}\n\t */\n\tstatic fromObject(obj) {\n\t\tvar map = new MultiMap();\n\t\tvar keys = Object.keys(obj);\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tmap.set(keys[i], obj[keys[i]]);\n\t\t}\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the first added value from a key name.\n\t * @param {string} name\n\t * @return {*}\n\t * @chainable\n\t */\n\tget(name) {\n\t\tvar values = this.values[name.toLowerCase()];\n\t\tif (values) {\n\t\t\treturn values[0];\n\t\t}\n\t}\n\n\t/**\n\t * Gets all values from a key name.\n\t * @param {string} name\n\t * @return {Array.<*>}\n\t */\n\tgetAll(name) {\n\t\treturn this.values[name.toLowerCase()];\n\t}\n\n\t/**\n\t * Returns true if the map is empty, false otherwise.\n\t * @return {boolean}\n\t */\n\tisEmpty() {\n\t\treturn this.size() === 0;\n\t}\n\n\t/**\n\t * Gets array of key names.\n\t * @return {Array.<string>}\n\t */\n\tnames() {\n\t\treturn Object.keys(this.values).map((key) => this.keys[key]);\n\t}\n\n\t/**\n\t * Removes all values from a key name.\n\t * @param {string} name\n\t * @chainable\n\t */\n\tremove(name) {\n\t\tdelete this.keys[name.toLowerCase()];\n\t\tdelete this.values[name.toLowerCase()];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of a key name. Relevant to replace the current values with\n\t * a new one.\n\t * @param {string} name\n\t * @param {*} value\n\t * @chainable\n\t */\n\tset(name, value) {\n\t\tthis.keys[name.toLowerCase()] = name;\n\t\tthis.values[name.toLowerCase()] = [value];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the size of the map key names.\n\t * @return {number}\n\t */\n\tsize() {\n\t\treturn this.names().length;\n\t}\n\n\t/**\n\t * Returns the parsed values as a string.\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn JSON.stringify(this.values);\n\t}\n}\n\nexport default MultiMap;\n","'use strict';\n\nimport { array } from 'metal';\n\n/**\n * Generic tree node data structure with arbitrary number of child nodes.\n * @param {V} value Value.\n * @constructor\n */\nclass TreeNode {\n\n\tconstructor(value) {\n\t\t/**\n\t\t * The value.\n\t\t * @private {V}\n\t\t */\n\t\tthis.value_ = value;\n\n\t\t/**\n\t\t * Reference to the parent node or null if it has no parent.\n\t\t * @private {TreeNode}\n\t\t */\n\t\tthis.parent_ = null;\n\n\t\t/**\n\t\t * Child nodes or null in case of leaf node.\n\t\t * @private {Array<!TreeNode>}\n\t\t */\n\t\tthis.children_ = null;\n\t}\n\n\t/**\n\t * Appends a child node to this node.\n\t * @param {!TreeNode} child Orphan child node.\n\t */\n\taddChild(child) {\n\t\tassertChildHasNoParent(child);\n\t\tchild.setParent(this);\n\t\tthis.children_ = this.children_ || [];\n\t\tthis.children_.push(child);\n\t}\n\n\t/**\n\t * Tells whether this node is the ancestor of the given node.\n\t * @param {!TreeNode} node A node.\n\t * @return {boolean} Whether this node is the ancestor of {@code node}.\n\t */\n\tcontains(node) {\n\t\tlet current = node.getParent();\n\t\twhile (current) {\n\t\t\tif (current === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcurrent = current.getParent();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @return {!Array<TreeNode>} All ancestor nodes in bottom-up order.\n\t */\n\tgetAncestors() {\n\t\tlet ancestors = [];\n\t\tlet node = this.getParent();\n\t\twhile (node) {\n\t\t\tancestors.push(node);\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn ancestors;\n\t}\n\n\t/**\n\t * Gets the child node of this node at the given index.\n\t * @param {number} index Child index.\n\t * @return {?TreeNode} The node at the given index\n\t * or null if not found.\n\t */\n\tgetChildAt(index) {\n\t\treturn this.getChildren()[index] || null;\n\t}\n\n\t/**\n\t * @return {?Array<!TreeNode>} Child nodes or null in case of leaf node.\n\t */\n\tgetChildren() {\n\t\treturn this.children_ || TreeNode.EMPTY_ARRAY;\n\t}\n\n\t/**\n\t * @return {number} The number of children.\n\t */\n\tgetChildCount() {\n\t\treturn this.getChildren().length;\n\t}\n\n\t/**\n\t * @return {number} The number of ancestors of the node.\n\t */\n\tgetDepth() {\n\t\tlet depth = 0;\n\t\tlet node = this;\n\t\twhile (node.getParent()) {\n\t\t\tdepth++;\n\t\t\tnode = node.getParent();\n\t\t}\n\t\treturn depth;\n\t}\n\n\t/**\n\t * @return {?TreeNode} Parent node or null if it has no parent.\n\t */\n\tgetParent() {\n\t\treturn this.parent_;\n\t}\n\n\t/**\n\t * @return {!TreeNode} The root of the tree structure, i.e. the farthest\n\t * ancestor of the node or the node itself if it has no parents.\n\t */\n\tgetRoot() {\n\t\tlet root = this;\n\t\twhile (root.getParent()) {\n\t\t\troot = root.getParent();\n\t\t}\n\t\treturn root;\n\t}\n\n\t/**\n\t * Gets the value.\n\t * @return {V} The value.\n\t */\n\tgetValue() {\n\t\treturn this.value_;\n\t}\n\n\t/**\n\t * @return {boolean} Whether the node is a leaf node.\n\t */\n\tisLeaf() {\n\t\treturn !this.getChildCount();\n\t}\n\n\t/**\n\t * Removes the given child node of this node.\n\t * @param {TreeNode} child The node to remove.\n\t * @return {TreeNode} The removed node if any, null otherwise.\n\t */\n\tremoveChild(child) {\n\t\tif (array.remove(this.getChildren(), child)) {\n\t\t\treturn child;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the parent node of this node. The callers must ensure that the\n\t * parent node and only that has this node among its children.\n\t * @param {TreeNode} parent The parent to set. If null, the node will be\n\t * detached from the tree.\n\t * @protected\n\t */\n\tsetParent(parent) {\n\t\tthis.parent_ = parent;\n\t}\n\n\t/**\n\t * Traverses the subtree. The first callback starts with this node,\n\t * and visits the descendant nodes depth-first, in preorder.\n\t * The second callback, starts with deepest child then visits\n\t * the ancestor nodes depth-first, in postorder. E.g.\n\t *\n\t *  \t A\n\t *    / \\\n\t *   B   C\n\t *  /   / \\\n\t * D   E   F\n\t *\n\t * preorder -> ['A', 'B', 'D', 'C', 'E', 'F']\n\t * postorder -> ['D', 'B', 'E', 'F', 'C', 'A']\n\t *\n\t * @param {function=} opt_preorderFn The callback to execute when visiting a node.\n\t * @param {function=} opt_postorderFn The callback to execute before leaving a node.\n\t */\n\ttraverse(opt_preorderFn, opt_postorderFn) {\n\t\tif (opt_preorderFn) {\n\t\t\topt_preorderFn(this);\n\t\t}\n\t\tthis.getChildren().forEach((child) => child.traverse(opt_preorderFn, opt_postorderFn));\n\t\tif (opt_postorderFn) {\n\t\t\topt_postorderFn(this);\n\t\t}\n\t}\n\n}\n\n/**\n * Constant for empty array to avoid unnecessary allocations.\n * @private\n */\nTreeNode.EMPTY_ARRAY = [];\n\n/**\n * Asserts that child has no parent.\n * @param {TreeNode} child A child.\n * @private\n */\nconst assertChildHasNoParent = function(child) {\n\tif (child.getParent()) {\n\t\tthrow new Error('Cannot add child with parent.');\n\t}\n};\n\nexport default TreeNode;\n","'use strict';\n\nimport { isDef, string } from 'metal';\nimport parse from './parse';\nimport { MultiMap } from 'metal-structs';\n\nvar parseFn_ = parse;\n\nclass Uri {\n\n\t/**\n\t * This class contains setters and getters for the parts of the URI.\n\t * The following figure displays an example URIs and their component parts.\n\t *\n\t *                                  path\n\t *\t                             ┌───┴────┐\n\t *\t  abc://example.com:123/path/data?key=value#fragid1\n\t *\t  └┬┘   └────┬────┘ └┬┘           └───┬───┘ └──┬──┘\n\t * protocol  hostname  port            search    hash\n\t *          └──────┬───────┘\n\t *                host\n\t *\n\t * @param {*=} opt_uri Optional string URI to parse\n\t * @constructor\n\t */\n\tconstructor(opt_uri = '') {\n\t\tthis.url = Uri.parse(this.maybeAddProtocolAndHostname_(opt_uri));\n\t}\n\n\t/**\n\t * Adds parameters to uri from a <code>MultiMap</code> as source.\n\t * @param {MultiMap} multimap The <code>MultiMap</code> containing the\n\t *   parameters.\n\t * @protected\n\t * @chainable\n\t */\n\taddParametersFromMultiMap(multimap) {\n\t\tmultimap.names().forEach((name) => {\n\t\t\tmultimap.getAll(name).forEach((value) => {\n\t\t\t\tthis.addParameterValue(name, value);\n\t\t\t});\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the value of the named query parameters.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value. Will be explicitly casted to String.\n\t * @chainable\n\t */\n\taddParameterValue(name, value) {\n\t\tthis.ensureQueryInitialized_();\n\t\tif (isDef(value)) {\n\t\t\tvalue = String(value);\n\t\t}\n\t\tthis.query.add(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds the values of the named query parameter.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\taddParameterValues(name, values) {\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Ensures query internal map is initialized and synced with initial value\n\t * extracted from URI search part.\n\t * @protected\n\t */\n\tensureQueryInitialized_() {\n\t\tif (this.query) {\n\t\t\treturn;\n\t\t}\n\t\tthis.query = new MultiMap();\n\t\tvar search = this.url.search;\n\t\tif (search) {\n\t\t\tsearch.substring(1).split('&').forEach((param) => {\n\t\t\t\tvar [key, value] = param.split('=');\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tvalue = Uri.urlDecode(value);\n\t\t\t\t}\n\t\t\t\tthis.addParameterValue(key, value);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the hash part of uri.\n\t * @return {string}\n\t */\n\tgetHash() {\n\t\treturn this.url.hash || '';\n\t}\n\n\t/**\n\t * Gets the host part of uri. E.g. <code>[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetHost() {\n\t\tvar host = this.getHostname();\n\t\tif (host) {\n\t\t\tvar port = this.getPort();\n\t\t\tif (port && port !== '80') {\n\t\t\t\thost += ':' + port;\n\t\t\t}\n\t\t}\n\t\treturn host;\n\t}\n\n\t/**\n\t * Gets the hostname part of uri without protocol and port.\n\t * @return {string}\n\t */\n\tgetHostname() {\n\t\tvar hostname = this.url.hostname;\n\t\tif (hostname === Uri.HOSTNAME_PLACEHOLDER) {\n\t\t\treturn '';\n\t\t}\n\t\treturn hostname;\n\t}\n\n\t/**\n\t * Gets the origin part of uri. E.g. <code>http://[hostname]:[port]</code>.\n\t * @return {string}\n\t */\n\tgetOrigin() {\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\treturn this.getProtocol() + '//' + host;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the first value for a given parameter or undefined if the given\n\t * parameter name does not appear in the query string.\n\t * @param {string} paramName Unescaped parameter name.\n\t * @return {string|undefined} The first value for a given parameter or\n\t *   undefined if the given parameter name does not appear in the query\n\t *   string.\n\t */\n\tgetParameterValue(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.get(name);\n\t}\n\n\t/**\n\t * Returns the value<b>s</b> for a given parameter as a list of decoded\n\t * query parameter values.\n\t * @param {string} name The parameter to get values for.\n\t * @return {!Array<?>} The values for a given parameter as a list of decoded\n\t *   query parameter values.\n\t */\n\tgetParameterValues(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.getAll(name);\n\t}\n\n\t/**\n\t * Returns the name<b>s</b> of the parameters.\n\t * @return {!Array<string>} The names for the parameters as a list of\n\t *   strings.\n\t */\n\tgetParameterNames() {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.names();\n\t}\n\n\t/**\n\t * Gets the function currently being used to parse URIs.\n\t * @return {!function()}\n\t */\n\tstatic getParseFn() {\n\t\treturn parseFn_;\n\t}\n\n\t/**\n\t * Gets the pathname part of uri.\n\t * @return {string}\n\t */\n\tgetPathname() {\n\t\treturn this.url.pathname;\n\t}\n\n\t/**\n\t * Gets the port number part of uri as string.\n\t * @return {string}\n\t */\n\tgetPort() {\n\t\treturn this.url.port;\n\t}\n\n\t/**\n\t * Gets the protocol part of uri. E.g. <code>http:</code>.\n\t * @return {string}\n\t */\n\tgetProtocol() {\n\t\treturn this.url.protocol;\n\t}\n\n\t/**\n\t * Gets the search part of uri. Search value is retrieved from query\n\t * parameters.\n\t * @return {string}\n\t */\n\tgetSearch() {\n\t\tvar search = '';\n\t\tvar querystring = '';\n\t\tthis.getParameterNames().forEach((name) => {\n\t\t\tthis.getParameterValues(name).forEach((value) => {\n\t\t\t\tquerystring += name;\n\t\t\t\tif (isDef(value)) {\n\t\t\t\t\tquerystring += '=' + encodeURIComponent(value);\n\t\t\t\t}\n\t\t\t\tquerystring += '&';\n\t\t\t});\n\t\t});\n\t\tquerystring = querystring.slice(0, -1);\n\t\tif (querystring) {\n\t\t\tsearch += '?' + querystring;\n\t\t}\n\t\treturn search;\n\t}\n\n\t/**\n\t * Checks if uri contains the parameter.\n\t * @param {string} name\n\t * @return {boolean}\n\t */\n\thasParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\treturn this.query.contains(name);\n\t}\n\n\t/**\n\t * Makes this URL unique by adding a random param to it. Useful for avoiding\n\t * cache.\n\t */\n\tmakeUnique() {\n\t\tthis.setParameterValue(Uri.RANDOM_PARAM, string.getRandomString());\n\t\treturn this;\n\t}\n\n\t/**\n\t * Maybe adds protocol and a hostname placeholder on a parial URI if needed.\n\t * Relevent for compatibility with <code>URL</code> native object.\n\t * @param {string=} opt_uri\n\t * @return {string} URI with protocol and hostname placeholder.\n\t */\n\tmaybeAddProtocolAndHostname_(opt_uri) {\n\t\tvar url = opt_uri;\n\t\tif (opt_uri.indexOf('://') === -1 &&\n\t\t\topt_uri.indexOf('javascript:') !== 0) { // jshint ignore:line\n\n\t\t\turl = Uri.DEFAULT_PROTOCOL;\n\t\t\tif (opt_uri[0] !== '/' || opt_uri[1] !== '/') {\n\t\t\t\turl += '//';\n\t\t\t}\n\n\t\t\tswitch (opt_uri.charAt(0)) {\n\t\t\t\tcase '.':\n\t\t\t\tcase '?':\n\t\t\t\tcase '#':\n\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\turl += '/';\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '':\n\t\t\t\tcase '/':\n\t\t\t\t\tif (opt_uri[1] !== '/') {\n\t\t\t\t\t\turl += Uri.HOSTNAME_PLACEHOLDER;\n\t\t\t\t\t}\n\t\t\t\t\turl += opt_uri;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\turl += opt_uri;\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t}\n\n\t/**\n\t * Parses the given uri string into an object.\n\t * @param {*=} opt_uri Optional string URI to parse\n\t */\n\tstatic parse(opt_uri) {\n\t\treturn parseFn_(opt_uri);\n\t}\n\n\t/**\n\t * Removes the named query parameter.\n\t * @param {string} name The parameter to remove.\n\t * @chainable\n\t */\n\tremoveParameter(name) {\n\t\tthis.ensureQueryInitialized_();\n\t\tthis.query.remove(name);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes uniqueness parameter of the uri.\n\t * @chainable\n\t */\n\tremoveUnique() {\n\t\tthis.removeParameter(Uri.RANDOM_PARAM);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hash.\n\t * @param {string} hash\n\t * @chainable\n\t */\n\tsetHash(hash) {\n\t\tthis.url.hash = hash;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the hostname.\n\t * @param {string} hostname\n\t * @chainable\n\t */\n\tsetHostname(hostname) {\n\t\tthis.url.hostname = hostname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the value of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValue(name, value) {\n\t\tthis.removeParameter(name);\n\t\tthis.addParameterValue(name, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the values of the named query parameters, clearing previous values\n\t * for that key.\n\t * @param {string} key The parameter to set.\n\t * @param {*} value The new value.\n\t * @chainable\n\t */\n\tsetParameterValues(name, values) {\n\t\tthis.removeParameter(name);\n\t\tvalues.forEach((value) => this.addParameterValue(name, value));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the pathname.\n\t * @param {string} pathname\n\t * @chainable\n\t */\n\tsetPathname(pathname) {\n\t\tthis.url.pathname = pathname;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the port number.\n\t * @param {*} port Port number.\n\t * @chainable\n\t */\n\tsetPort(port) {\n\t\tthis.url.port = port;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the function that will be used for parsing the original string uri\n\t * into an object.\n\t * @param {!function()} parseFn\n\t */\n\tstatic setParseFn(parseFn) {\n\t\tparseFn_ = parseFn;\n\t}\n\n\t/**\n\t * Sets the protocol. If missing <code>http:</code> is used as default.\n\t * @param {string} protocol\n\t * @chainable\n\t */\n\tsetProtocol(protocol) {\n\t\tthis.url.protocol = protocol;\n\t\tif (this.url.protocol[this.url.protocol.length - 1] !== ':') {\n\t\t\tthis.url.protocol += ':';\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} The string form of the url.\n\t * @override\n\t */\n\ttoString() {\n\t\tvar href = '';\n\t\tvar host = this.getHost();\n\t\tif (host) {\n\t\t\thref += this.getProtocol() + '//';\n\t\t}\n\t\thref += host + this.getPathname() + this.getSearch() + this.getHash();\n\t\treturn href;\n\t}\n\n\t/**\n\t * Joins the given paths.\n\t * @param {string} basePath\n\t * @param {...string} ...paths Any number of paths to be joined with the base url.\n\t * @static\n\t */\n\tstatic joinPaths(basePath, ...paths) {\n\t\tif (basePath.charAt(basePath.length - 1) === '/') {\n\t\t\tbasePath = basePath.substring(0, basePath.length - 1);\n\t\t}\n\t\tpaths = paths.map(path => path.charAt(0) === '/' ? path.substring(1) : path);\n\t\treturn [basePath].concat(paths).join('/').replace(/\\/$/, '');\n\t}\n\n\t/**\n\t * URL-decodes the string. We need to specially handle '+'s because\n\t * the javascript library doesn't convert them to spaces.\n\t * @param {string} str The string to url decode.\n\t * @return {string} The decoded {@code str}.\n\t */\n\tstatic urlDecode(str) {\n\t\treturn decodeURIComponent(str.replace(/\\+/g, ' '));\n\t}\n\n}\n\n/**\n * Default protocol value.\n * @type {string}\n * @default http:\n * @static\n */\nconst isSecure = () =>\n\t(typeof window !== 'undefined' &&\n\t\twindow.location &&\n\t\twindow.location.protocol &&\n\t\twindow.location.protocol.indexOf('https') === 0);\n\nUri.DEFAULT_PROTOCOL = isSecure() ? 'https:' : 'http:';\n\n/**\n * Hostname placeholder. Relevant to internal usage only.\n * @type {string}\n * @static\n */\nUri.HOSTNAME_PLACEHOLDER = 'hostname' + Date.now();\n\n/**\n * Name used by the param generated by `makeUnique`.\n * @type {string}\n * @static\n */\nUri.RANDOM_PARAM = 'zx';\n\nexport default Uri;\n","'use strict';\n\nimport { exitDocument } from 'metal-dom';\nimport globals from '../globals/globals';\nimport Uri from 'metal-uri';\n\n/**\n * A collection of static utility functions.\n * @const\n */\nclass utils {\n\n\t/**\n\t * Copies attributes form source node to target node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic copyNodeAttributes(source, target) {\n\t\tArray.prototype.slice.call(source.attributes).forEach((attribute) => target.setAttribute(attribute.name, attribute.value));\n\t}\n\n\t/**\n\t * Debounces function execution.\n\t * @param {!function()} fn\n\t * @param {number} delay\n\t * @return {!function()}\n\t */\n\tstatic debounce(fn, delay) {\n\t\treturn function debounced() {\n\t\t\tconst args = arguments;\n\t\t\tutils.cancelDebounce(debounced);\n\t\t\tdebounced.id = setTimeout(function() {\n\t\t\t\tfn(Array.prototype.slice.call(args));\n\t\t\t}, delay);\n\t\t};\n\t}\n\n\t/**\n\t * Cancels the scheduled debounced function.\n\t * @param {function()} debounced\n\t */\n\tstatic cancelDebounce(debounced) {\n\t\tclearTimeout(debounced.id);\n\t}\n\n\t/**\n\t * Gets the current browser path including hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPath() {\n\t\treturn this.getCurrentBrowserPathWithoutHash() + globals.window.location.hash;\n\t}\n\n\t/**\n\t * Gets the current browser path excluding hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getCurrentBrowserPathWithoutHash() {\n\t\treturn globals.window.location.pathname + globals.window.location.search;\n\t}\n\n\t/**\n\t * Gets the given node offset coordinates.\n\t * @return {!object}\n\t * @static\n\t */\n\tstatic getNodeOffset(node) {\n\t\tlet [offsetLeft, offsetTop] = [0, 0];\n\t\tdo {\n\t\t\toffsetLeft += node.offsetLeft;\n\t\t\toffsetTop += node.offsetTop;\n\t\t\tnode = node.offsetParent;\n\t\t} while (node);\n\t\treturn {\n\t\t\toffsetLeft,\n\t\t\toffsetTop\n\t\t};\n\t}\n\n\t/**\n\t * Extracts the path part of an url.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPath(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch() + uri.getHash();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHash(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname() + uri.getSearch();\n\t}\n\n\t/**\n\t * Extracts the path part of an url without hashbang and query search.\n\t * @return {!string}\n\t * @static\n\t */\n\tstatic getUrlPathWithoutHashAndSearch(url) {\n\t\tvar uri = new Uri(url);\n\t\treturn uri.getPathname();\n\t}\n\n\t/**\n\t * Checks if url is in the same browser current url excluding the hashbang.\n\t * @param  {!string} url\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isCurrentBrowserPath(url) {\n\t\tif (url) {\n\t\t\tconst currentBrowserPath = this.getCurrentBrowserPathWithoutHash();\n\t\t\t// the getUrlPath will create a Uri and will normalize the path and\n\t\t\t// remove the trailling '/' for properly comparing paths.\n\t\t\treturn utils.getUrlPathWithoutHash(url) === this.getUrlPath(currentBrowserPath);\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic isChrome() {\n\t\treturn (utils.matchUserAgent('Chrome') || utils.matchUserAgent('CriOs')) &&\n\t\t\t!utils.isOpera() &&\n\t\t\t!utils.isEdge();\n\t}\n\n\tstatic isEdge() {\n\t\treturn utils.matchUserAgent('Edge');\n\t}\n\n\tstatic isIe() {\n\t\treturn utils.matchUserAgent('Trident') || utils.matchUserAgent('MSIE');\n\t}\n\n\tstatic isIeOrEdge() {\n\t\treturn utils.isIe() || utils.isEdge();\n\t}\n\n\tstatic isOpera() {\n\t\treturn utils.matchUserAgent('Opera') || utils.matchUserAgent('OPR');\n\t}\n\n\tstatic isSafari() {\n\t\treturn utils.matchUserAgent('Safari') &&\n\t\t\t!(utils.isChrome() || utils.isOpera() || utils.isEdge());\n\t}\n\n\tstatic matchUserAgent(str) {\n\t\tconst navigator = globals.window.navigator;\n\t\tif (!navigator || !navigator.userAgent) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst userAgent = navigator.userAgent;\n\t\treturn userAgent.indexOf(str) !== -1;\n\t}\n\n\t/**\n\t * Returns true if HTML5 History api is supported.\n\t * @return {boolean}\n\t * @static\n\t */\n\tstatic isHtml5HistorySupported() {\n\t\treturn !!(globals.window.history && globals.window.history.pushState);\n\t}\n\n\t/**\n\t * Checks if a given url is a valid http(s) uri and returns the formed Uri\n\t * or false if the parsing failed\n\t * @return {Uri|boolean}\n\t * @static\n\t */\n\tstatic isWebUri(url) {\n\t\ttry {\n\t\t\treturn new Uri(url);\n\t\t} catch (err) {\n\t\t\tconsole.error(`${err.message} ${url}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Removes all attributes form node.\n\t * @return {void}\n\t * @static\n\t */\n\tstatic clearNodeAttributes(node) {\n\t\tArray.prototype.slice.call(node.attributes).forEach((attribute) => node.removeAttribute(attribute.name));\n\t}\n\n\t/**\n\t * Remove elements from the document.\n\t * @param {!Array<Element>} elements\n\t */\n\tstatic removeElementsFromDocument(elements) {\n\t\telements.forEach((element) => exitDocument(element));\n\t}\n\n\t/**\n\t* Removes trailing slash in path.\n\t* @param {!string}\n\t* @return {string}\n\t*/\n\tstatic removePathTrailingSlash(path) {\n\t\tvar length = path ? path.length : 0;\n\t\tif (length > 1 && path[length - 1] === '/') {\n\t\t\tpath = path.substr(0, length - 1);\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Adds a random suffix to the href attribute of the element.\n\t * @param {!element} element\n\t * @return {element}\n\t */\n\tstatic setElementWithRandomHref(element) {\n\t\telement.href = element.href + '?q=' + Math.random();\n\t\treturn element;\n\t}\n\n\t/**\n\t * Overrides document referrer\n\t * @param {string} referrer\n\t * @static\n\t */\n\tstatic setReferrer(referrer) {\n\t\tObject.defineProperty(globals.document, 'referrer', {\n\t\t\tconfigurable: true,\n\t\t\tget: function() {\n\t\t\t\treturn referrer;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default utils;\n","'use strict';\n\nexport default {\n\tbasePath: 'data-senna-base-path',\n\tlinkSelector: 'data-senna-link-selector',\n\tloadingCssClass: 'data-senna-loading-css-class',\n\tsenna: 'data-senna',\n\tdispatch: 'data-senna-dispatch',\n\tsurface: 'data-senna-surface',\n\tupdateScrollPosition: 'data-senna-update-scroll-position'\n};","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandle utility. Holds information about an event subscription, and\n * allows removing them easily.\n * EventHandle is a Disposable, but it's important to note that the\n * EventEmitter that created it is not the one responsible for disposing it.\n * That responsibility is for the code that holds a reference to it.\n * @extends {Disposable}\n */\nclass EventHandle extends Disposable {\n\t/**\n\t * EventHandle constructor\n\t * @param {!EventEmitter} emitter Emitter the event was subscribed to.\n\t * @param {string} event The name of the event that was subscribed to.\n\t * @param {!Function} listener The listener subscribed to the event.\n\t */\n\tconstructor(emitter, event, listener) {\n\t\tsuper();\n\n\t\t/**\n\t\t * The EventEmitter instance that the event was subscribed to.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.emitter_ = emitter;\n\n\t\t/**\n\t\t * The name of the event that was subscribed to.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.event_ = event;\n\n\t\t/**\n\t\t * The listener subscribed to the event.\n\t\t * @type {Function}\n\t\t * @protected\n\t\t */\n\t\tthis.listener_ = listener;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListener();\n\t\tthis.emitter_ = null;\n\t\tthis.listener_ = null;\n\t}\n\n\t/**\n\t * Removes the listener subscription from the emitter.\n\t */\n\tremoveListener() {\n\t\tif (!this.emitter_.isDisposed()) {\n\t\t\tthis.emitter_.removeListener(this.event_, this.listener_);\n\t\t}\n\t}\n}\n\nexport default EventHandle;\n","'use strict';\n\nimport {array, Disposable, isFunction, isString} from 'metal';\nimport EventHandle from './EventHandle';\n\nconst singleArray_ = [0];\n\n/**\n * EventEmitter utility.\n * @extends {Disposable}\n */\nclass EventEmitter extends Disposable {\n\t/**\n\t * EventEmitter constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds event listeners scoped by event type.\n\t\t * @type {Object<string, !Array<!function()>>}\n\t\t * @protected\n\t\t */\n\t\tthis.events_ = null;\n\n\t\t/**\n\t\t * Handlers that are triggered when an event is listened to.\n\t\t * @type {Array}\n\t\t */\n\t\tthis.listenerHandlers_ = null;\n\n\t\t/**\n\t\t * Configuration option which determines if an event facade should be sent\n\t\t * as a param of listeners when emitting events. If set to true, the facade\n\t\t * will be passed as the first argument of the listener.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.shouldUseFacade_ = false;\n\t}\n\n\t/**\n\t * Adds a handler to given holder variable. If the holder doesn't have a\n\t * value yet, it will receive the handler directly. If the holder is an array,\n\t * the value will just be added to it. Otherwise, the holder will be set to a\n\t * new array containing its previous value plus the new handler.\n\t * @param {*} holder\n\t * @param {!function()|Object} handler\n\t * @return {*} The holder's new value.\n\t * @protected\n\t */\n\taddHandler_(holder, handler) {\n\t\tif (!holder) {\n\t\t\tholder = handler;\n\t\t} else {\n\t\t\tif (!Array.isArray(holder)) {\n\t\t\t\tholder = [holder];\n\t\t\t}\n\t\t\tholder.push(handler);\n\t\t}\n\t\treturn holder;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @param {boolean} defaultListener Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\taddListener(event, listener, defaultListener) {\n\t\tthis.validateListener_(listener);\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.addSingleListener_(events[i], listener, defaultListener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for a single event.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {boolean} defaultListener Flag indicating if this listener is a default\n\t *   action for this event. Default actions are run last, and only if no previous\n\t *   listener call `preventDefault()` on the received event facade.\n\t * @param {Function=} origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t */\n\taddSingleListener_(event, listener, defaultListener, origin) {\n\t\tthis.runListenerHandlers_(event);\n\t\tif (defaultListener || origin) {\n\t\t\tlistener = {\n\t\t\t\tdefault: defaultListener,\n\t\t\t\tfn: listener,\n\t\t\t\torigin: origin,\n\t\t\t};\n\t\t}\n\t\tthis.events_ = this.events_ || {};\n\t\tthis.events_[event] = this.addHandler_(this.events_[event], listener);\n\t}\n\n\t/**\n\t * Builds facade for the given event.\n\t * @param {string} event\n\t * @return {Object}\n\t * @protected\n\t */\n\tbuildFacade_(event) {\n\t\tif (this.getShouldUseFacade()) {\n\t\t\tconst facade = {\n\t\t\t\tpreventDefault: function() {\n\t\t\t\t\tfacade.preventedDefault = true;\n\t\t\t\t},\n\t\t\t\ttarget: this,\n\t\t\t\ttype: event,\n\t\t\t};\n\t\t\treturn facade;\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.events_ = null;\n\t}\n\n\t/**\n\t * Execute each of the listeners in order with the supplied arguments.\n\t * @param {string} event\n\t * @param {*} opt_args [arg1], [arg2], [...]\n\t * @return {boolean} Returns true if event had listeners, false otherwise.\n\t */\n\temit(event) {\n\t\tconst listeners = this.getRawListeners_(event);\n\t\tif (listeners.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst args = array.slice(arguments, 1); // eslint-disable-line\n\t\tthis.runListeners_(listeners, args, this.buildFacade_(event));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets the listener objects for the given event, if there are any.\n\t * @param {string} event\n\t * @return {!Array}\n\t * @protected\n\t */\n\tgetRawListeners_(event) {\n\t\tconst directListeners = toArray(this.events_ && this.events_[event]);\n\t\treturn directListeners.concat(\n\t\t\ttoArray(this.events_ && this.events_['*'])\n\t\t);\n\t}\n\n\t/**\n\t * Gets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @return {boolean}\n\t */\n\tgetShouldUseFacade() {\n\t\treturn this.shouldUseFacade_;\n\t}\n\n\t/**\n\t * Returns an array of listeners for the specified event.\n\t * @param {string} event\n\t * @return {Array} Array of listeners.\n\t */\n\tlisteners(event) {\n\t\treturn this.getRawListeners_(event).map(\n\t\t\tlistener => (listener.fn ? listener.fn : listener)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for the\n\t * events. After each event is triggered the specified amount of times, the\n\t * listener is removed for it.\n\t * @param {!(Array|string)} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tmany(event, amount, listener) {\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.many_(events[i], amount, listener);\n\t\t}\n\n\t\treturn new EventHandle(this, event, listener);\n\t}\n\n\t/**\n\t * Adds a listener that will be invoked a fixed number of times for a single\n\t * event. After the event is triggered the specified amount of times, the\n\t * listener is removed.\n\t * @param {string} event\n\t * @param {number} amount The amount of times this event should be listened\n\t * to.\n\t * @param {!Function} listener\n\t * @protected\n\t */\n\tmany_(event, amount, listener) {\n\t\tconst self = this;\n\n\t\tif (amount <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t */\n\t\tfunction handlerInternal() {\n\t\t\tif (--amount === 0) {\n\t\t\t\tself.removeListener(event, handlerInternal);\n\t\t\t}\n\t\t\tlistener.apply(self, arguments); // eslint-disable-line\n\t\t}\n\n\t\tself.addSingleListener_(event, handlerInternal, false, listener);\n\t}\n\n\t/**\n\t * Checks if a listener object matches the given listener function. To match,\n\t * it needs to either point to that listener or have it as its origin.\n\t * @param {!Object} listenerObj\n\t * @param {!Function} listener\n\t * @return {boolean}\n\t * @protected\n\t */\n\tmatchesListener_(listenerObj, listener) {\n\t\tconst fn = listenerObj.fn || listenerObj;\n\t\treturn (\n\t\t\tfn === listener ||\n\t\t\t(listenerObj.origin && listenerObj.origin === listener) // eslint-disable-line\n\t\t);\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} event\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\toff(event, listener) {\n\t\tthis.validateListener_(listener);\n\t\tif (!this.events_) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst events = this.toEventsArray_(event);\n\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\tthis.events_[events[i]] = this.removeMatchingListenerObjs_(\n\t\t\t\ttoArray(this.events_[events[i]]),\n\t\t\t\tlistener\n\t\t\t);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a listener to the end of the listeners array for the specified events.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\ton() {\n\t\treturn this.addListener.apply(this, arguments); // eslint-disable-line\n\t}\n\n\t/**\n\t * Adds handler that gets triggered when an event is listened to on this\n\t * instance.\n\t * @param {!function()} handler\n\t */\n\tonListener(handler) {\n\t\tthis.listenerHandlers_ = this.addHandler_(\n\t\t\tthis.listenerHandlers_,\n\t\t\thandler\n\t\t); // eslint-disable-line\n\t}\n\n\t/**\n\t * Adds a one time listener for the events. This listener is invoked only the\n\t * next time each event is fired, after which it is removed.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!EventHandle} Can be used to remove the listener.\n\t */\n\tonce(events, listener) {\n\t\treturn this.many(events, 1, listener);\n\t}\n\n\t/**\n\t * Removes all listeners, or those of the specified events. It's not a good\n\t * idea to remove listeners that were added elsewhere in the code,\n\t * especially when it's on an emitter that you didn't create.\n\t * @param {(Array|string)=} event\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveAllListeners(event) {\n\t\tif (this.events_) {\n\t\t\tif (event) {\n\t\t\t\tconst events = this.toEventsArray_(event);\n\t\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\t\tthis.events_[events[i]] = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.events_ = null;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all listener objects from the given array that match the given\n\t * listener function.\n\t * @param {Array.<Object>} listenerObjs\n\t * @param {!Function} listener\n\t * @return {Array.<Object>|Object} The new listeners array for this event.\n\t * @protected\n\t */\n\tremoveMatchingListenerObjs_(listenerObjs, listener) {\n\t\tconst finalListeners = [];\n\t\tfor (let i = 0; i < listenerObjs.length; i++) {\n\t\t\tif (!this.matchesListener_(listenerObjs[i], listener)) {\n\t\t\t\tfinalListeners.push(listenerObjs[i]);\n\t\t\t}\n\t\t}\n\t\treturn finalListeners.length > 0 ? finalListeners : null;\n\t}\n\n\t/**\n\t * Removes a listener for the specified events.\n\t * Caution: changes array indices in the listener array behind the listener.\n\t * @param {!(Array|string)} events\n\t * @param {!Function} listener\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tremoveListener() {\n\t\treturn this.off.apply(this, arguments); // eslint-disable-line\n\t}\n\n\t/**\n\t * Runs the handlers when an event is listened to.\n\t * @param {string} event\n\t * @protected\n\t */\n\trunListenerHandlers_(event) {\n\t\tlet handlers = this.listenerHandlers_;\n\t\tif (handlers) {\n\t\t\thandlers = toArray(handlers);\n\t\t\tfor (let i = 0; i < handlers.length; i++) {\n\t\t\t\thandlers[i](event);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Runs the given listeners.\n\t * @param {!Array} listeners\n\t * @param {!Array} args\n\t * @param {Object} facade\n\t * @protected\n\t */\n\trunListeners_(listeners, args, facade) {\n\t\tif (facade) {\n\t\t\targs.push(facade);\n\t\t}\n\n\t\tconst defaultListeners = [];\n\t\tfor (let i = 0; i < listeners.length; i++) {\n\t\t\tconst listener = listeners[i].fn || listeners[i];\n\t\t\tif (listeners[i].default) {\n\t\t\t\tdefaultListeners.push(listener);\n\t\t\t} else {\n\t\t\t\tlistener.apply(this, args);\n\t\t\t}\n\t\t}\n\t\tif (!facade || !facade.preventedDefault) {\n\t\t\tfor (let j = 0; j < defaultListeners.length; j++) {\n\t\t\t\tdefaultListeners[j].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the configuration option which determines if an event facade should\n\t * be sent as a param of listeners when emitting events. If set to true, the\n\t * facade will be passed as the first argument of the listener.\n\t * @param {boolean} shouldUseFacade\n\t * @return {!Object} Returns emitter, so calls can be chained.\n\t */\n\tsetShouldUseFacade(shouldUseFacade) {\n\t\tthis.shouldUseFacade_ = shouldUseFacade;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Converts the parameter to an array if only one event is given. Reuses the\n\t * same array each time this conversion is done, to avoid using more memory\n\t * than necessary.\n\t * @param  {!(Array|string)} events\n\t * @return {!Array}\n\t * @protected\n\t */\n\ttoEventsArray_(events) {\n\t\tif (isString(events)) {\n\t\t\tsingleArray_[0] = events;\n\t\t\tevents = singleArray_;\n\t\t}\n\t\treturn events;\n\t}\n\n\t/**\n\t * Checks if the given listener is valid, throwing an exception when it's not.\n\t * @param  {*} listener\n\t * @protected\n\t */\n\tvalidateListener_(listener) {\n\t\tif (!isFunction(listener)) {\n\t\t\tthrow new TypeError('Listener must be a function');\n\t\t}\n\t}\n}\n\n/**\n * Converts to an array\n * @param {Object} val\n * @return {Array}\n */\nfunction toArray(val) {\n\tval = val || [];\n\treturn Array.isArray(val) ? val : [val];\n}\n\nexport default EventEmitter;\n","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventEmitterProxy utility. It's responsible for linking two EventEmitter\n * instances together, emitting events from the first emitter through the\n * second one. That means that listening to a supported event on the target\n * emitter will mean listening to it on the origin emitter as well.\n * @extends {Disposable}\n */\nclass EventEmitterProxy extends Disposable {\n\t/**\n\t * @param {EventEmitter} originEmitter Events originated on this emitter\n\t * will be fired for the target emitter's listeners as well.\n\t * @param {EventEmitter} targetEmitter Event listeners attached to this emitter\n\t * will also be triggered when the event is fired by the origin emitter.\n\t * @param {Object} blacklist Optional blacklist of events that should not be\n\t * proxied.\n\t * @param {Object} whitelist\n\t */\n\tconstructor(originEmitter, targetEmitter, blacklist, whitelist) {\n\t\tsuper();\n\n\t\t/**\n\t\t * Map of events that should not be proxied.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.blacklist_ = blacklist;\n\n\t\t/**\n\t\t * The origin emitter. This emitter's events will be proxied through the\n\t\t * target emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.originEmitter_ = originEmitter;\n\n\t\t/**\n\t\t * A list of events that are pending to be listened by an actual origin\n\t\t * emitter. Events are stored here when the origin doesn't exist, so they\n\t\t * can be set on a new origin when one is set.\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis.pendingEvents_ = null;\n\n\t\t/**\n\t\t * Holds a map of events from the origin emitter that are already being proxied.\n\t\t * @type {Object<string, !EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.proxiedEvents_ = null;\n\n\t\t/**\n\t\t * The target emitter. This emitter will emit all events that come from\n\t\t * the origin emitter.\n\t\t * @type {EventEmitter}\n\t\t * @protected\n\t\t */\n\t\tthis.targetEmitter_ = targetEmitter;\n\n\t\t/**\n\t\t * Map of events that should be proxied. If whitelist is set blacklist is ignored.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis.whitelist_ = whitelist;\n\n\t\tthis.startProxy_();\n\t}\n\n\t/**\n\t * Adds the given listener for the given event.\n\t * @param {string} event\n\t * @param {!function()} listener\n\t * @return {!EventHandle} The listened event's handle.\n\t * @protected\n\t */\n\taddListener_(event, listener) {\n\t\treturn this.originEmitter_.on(event, listener);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.removeListeners_();\n\t\tthis.proxiedEvents_ = null;\n\t\tthis.originEmitter_ = null;\n\t\tthis.targetEmitter_ = null;\n\t}\n\n\t/**\n\t * Emits the specified event type on the target emitter.\n\t * @protected\n\t */\n\temitOnTarget_(...args) {\n\t\tthis.targetEmitter_.emit(...args);\n\t}\n\n\t/**\n\t * Proxies the given event from the origin to the target emitter.\n\t * @param {string} event\n\t */\n\tproxyEvent(event) {\n\t\tif (this.shouldProxyEvent_(event)) {\n\t\t\tthis.tryToAddListener_(event);\n\t\t}\n\t}\n\n\t/**\n\t * Removes the proxy listener for all events.\n\t * @protected\n\t */\n\tremoveListeners_() {\n\t\tif (this.proxiedEvents_) {\n\t\t\tconst events = Object.keys(this.proxiedEvents_);\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tthis.proxiedEvents_[events[i]].removeListener();\n\t\t\t}\n\t\t\tthis.proxiedEvents_ = null;\n\t\t}\n\t\tthis.pendingEvents_ = null;\n\t}\n\n\t/**\n\t * Changes the origin emitter. This automatically detaches any events that\n\t * were already being proxied from the previous emitter, and starts proxying\n\t * them on the new emitter instead.\n\t * @param {!EventEmitter} originEmitter\n\t */\n\tsetOriginEmitter(originEmitter) {\n\t\tconst events =\n\t\t\tthis.originEmitter_ && this.proxiedEvents_\n\t\t\t\t? Object.keys(this.proxiedEvents_)\n\t\t\t\t: this.pendingEvents_;\n\t\tthis.originEmitter_ = originEmitter;\n\t\tif (events) {\n\t\t\tthis.removeListeners_();\n\t\t\tevents.forEach(event => this.proxyEvent(event));\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given event should be proxied.\n\t * @param {string} event\n\t * @return {boolean}\n\t * @protected\n\t */\n\tshouldProxyEvent_(event) {\n\t\tif (this.whitelist_ && !this.whitelist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.blacklist_ && this.blacklist_[event]) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !this.proxiedEvents_ || !this.proxiedEvents_[event];\n\t}\n\n\t/**\n\t * Starts proxying all events from the origin to the target emitter.\n\t * @protected\n\t */\n\tstartProxy_() {\n\t\tthis.targetEmitter_.onListener(this.proxyEvent.bind(this));\n\t}\n\n\t/**\n\t * Adds a listener to the origin emitter, if it exists. Otherwise, stores\n\t * the pending listener so it can be used on a future origin emitter.\n\t * @param {string} event\n\t * @protected\n\t */\n\ttryToAddListener_(event) {\n\t\tif (this.originEmitter_) {\n\t\t\tthis.proxiedEvents_ = this.proxiedEvents_ || {};\n\t\t\tthis.proxiedEvents_[event] = this.addListener_(\n\t\t\t\tevent,\n\t\t\t\tthis.emitOnTarget_.bind(this, event)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pendingEvents_ = this.pendingEvents_ || [];\n\t\t\tthis.pendingEvents_.push(event);\n\t\t}\n\t}\n}\n\nexport default EventEmitterProxy;\n","'use strict';\n\nimport {Disposable} from 'metal';\n\n/**\n * EventHandler utility. It's useful for easily removing a group of\n * listeners from different EventEmitter instances.\n * @extends {Disposable}\n */\nclass EventHandler extends Disposable {\n\t/**\n\t * EventHandler constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * An array that holds the added event handles, so the listeners can be\n\t\t * removed later.\n\t\t * @type {Array.<EventHandle>}\n\t\t * @protected\n\t\t */\n\t\tthis.eventHandles_ = [];\n\t}\n\n\t/**\n\t * Adds event handles to be removed later through the `removeAllListeners`\n\t * method.\n\t * @param {...(!EventHandle)} var_args\n\t */\n\tadd(...args) {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tthis.eventHandles_.push(args[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.eventHandles_ = null;\n\t}\n\n\t/**\n\t * Removes all listeners that have been added through the `add` method.\n\t */\n\tremoveAllListeners() {\n\t\tfor (let i = 0; i < this.eventHandles_.length; i++) {\n\t\t\tthis.eventHandles_[i].removeListener();\n\t\t}\n\n\t\tthis.eventHandles_ = [];\n\t}\n}\n\nexport default EventHandler;\n","'use strict';\n\nimport core from 'metal';\n\nconst REGEX = /([\\/])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])*)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?)/g;\n\n/**\n * Converts the given array of regex matches to a more readable object format.\n * @param {!Array<string>} matches\n * @return {!Object}\n */\nfunction convertMatchesToObj(matches) {\n\treturn {\n\t\tmatch: matches[0],\n\t\tprefix: matches[1],\n\t\tname: matches[2],\n\t\tparamPattern: matches[3],\n\t\tunnamedPattern: matches[4],\n\t\tmodifier: matches[5]\n\t};\n}\n\n/**\n * Converts the given tokens parsed from a route format string to a regex.\n * @param {!Array<string|!Object>} tokens\n * @return {!RegExp}\n */\nfunction convertTokensToRegex(tokens) {\n\tlet regex = '';\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (core.isString(tokens[i])) {\n\t\t\tregex += escape(tokens[i]);\n\t\t} else {\n\t\t\tlet capture = encloseNonCapturingGroup(tokens[i].pattern);\n\t\t\tif (tokens[i].repeat) {\n\t\t\t\tcapture += encloseNonCapturingGroup('\\\\/' + capture) + '*';\n\t\t\t}\n\t\t\tcapture = escape(tokens[i].prefix) + `(${capture})`;\n\t\t\tif (tokens[i].optional) {\n\t\t\t\tif (!tokens[i].partial) {\n\t\t\t\t\tcapture = encloseNonCapturingGroup(capture);\n\t\t\t\t}\n\t\t\t\tcapture += '?';\n\t\t\t}\n\t\t\tregex += capture;\n\t\t}\n\t}\n\treturn new RegExp('^' + makeTrailingSlashOptional(regex) + '$');\n}\n\n/**\n * Encloses the given regex pattern into a non capturing group.\n * @param {string} pattern\n * @return {string}\n */\nfunction encloseNonCapturingGroup(pattern) {\n\treturn `(?:${pattern})`;\n}\n\n/**\n * Escapes the given string to show up in the path regex.\n * @param {string} str\n * @return {string}\n */\nfunction escape(str) {\n\treturn str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\n}\n\n/**\n * Makes trailing slash optional on paths.\n * @param {string} regex\n * @param {string}\n */\nfunction makeTrailingSlashOptional(regex) {\n\tif (/\\/$/.test(regex)) {\n\t\tregex += '?';\n\t} else {\n\t\tregex += '\\\\/?';\n\t}\n\treturn regex;\n}\n\n/**\n * Parses the given route format string into tokens representing its contents.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!Array<string|!Object>} An array of tokens that can be either plain\n *     strings (part of the route) or objects containing informations on params.\n */\nexport function parse(routeOrTokens) {\n\tif (!core.isString(routeOrTokens)) {\n\t\treturn routeOrTokens;\n\t}\n\n\tconst route = routeOrTokens;\n\tlet unnamedCount = 0;\n\tconst tokens = [];\n\tlet currPath = '';\n\tlet index = 0;\n\n\tlet matches = REGEX.exec(route);\n\twhile (matches) {\n\t\tconst data = convertMatchesToObj(matches);\n\n\t\tcurrPath = route.slice(index, matches.index);\n\t\tindex = matches.index + data.match.length;\n\t\ttokens.push(currPath);\n\n\t\ttokens.push({\n\t\t\tname: data.name ? data.name : '' + unnamedCount++,\n\t\t\tpartial: route[index] && route[index] !== data.prefix,\n\t\t\tprefix: data.prefix || '',\n\t\t\tpattern: data.paramPattern || data.unnamedPattern || '[^\\\\/]+',\n\t\t\trepeat: data.modifier === '*' || data.modifier === '+',\n\t\t\toptional: data.modifier === '*' || data.modifier === '?'\n\t\t});\n\n\t\tmatches = REGEX.exec(route);\n\t}\n\n\tif (index < route.length) {\n\t\ttokens.push(route.substr(index));\n\t}\n\treturn tokens;\n}\n\n/**\n * Converts the given route format string to a regex that can extract param\n * data from paths matching it.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @return {!RegExp}\n */\nexport function toRegex(routeOrTokens) {\n\treturn convertTokensToRegex(parse(routeOrTokens));\n}\n\n/**\n * Extracts data from the given path according to the specified route format.\n * @param {!Array|string} routeOrTokens Either a route format string or tokens\n *     previously parsed via the `parse` function.\n * @param {string} The path to extract param data from.\n * @return {Object<string, string>} The data object, or null if the path doesn't\n *     match the given format.\n */\nexport function extractData(routeOrTokens, path) {\n\tconst data = {};\n\tconst tokens = parse(routeOrTokens);\n\tconst match = path.match(convertTokensToRegex(tokens));\n\n\tif (!match) {\n\t\treturn null;\n\t}\n\n\tlet paramIndex = 1;\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tif (!core.isString(tokens[i])) {\n\t\t\tlet value = match[paramIndex++];\n\t\t\tif (core.isDef(value)) {\n\t\t\t\tif (tokens[i].repeat) {\n\t\t\t\t\tvalue = value.split('/');\n\t\t\t\t}\n\t\t\t\tdata[tokens[i].name] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn data;\n}\n","'use strict';\n\nimport { isDefAndNotNull, isFunction, isString } from 'metal';\nimport { extractData, parse, toRegex } from 'metal-path-parser';\n\nclass Route {\n\n\t/**\n\t * Route class.\n\t * @param {!string|RegExp|Function} path\n\t * @param {!Function} handler\n\t * @constructor\n\t */\n\tconstructor(path, handler) {\n\t\tif (!isDefAndNotNull(path)) {\n\t\t\tthrow new Error('Route path not specified.');\n\t\t}\n\t\tif (!isFunction(handler)) {\n\t\t\tthrow new Error('Route handler is not a function.');\n\t\t}\n\n\t\t/**\n\t\t * Defines the handler which will execute once a URL in the application\n\t\t * matches the path.\n\t\t * @type {!Function}\n\t\t * @protected\n\t\t */\n\t\tthis.handler = handler;\n\n\t\t/**\n\t\t * Defines the path which will trigger the route handler.\n\t\t * @type {!string|RegExp|Function}\n\t\t * @protected\n\t\t */\n\t\tthis.path = path;\n\t}\n\n\t/**\n\t* Builds parsed data (regex and tokens) for this route.\n\t* @return {!Object}\n\t* @protected\n\t*/\n\tbuildParsedData_() {\n\t\tif (!this.parsedData_) {\n\t\t\tvar tokens = parse(this.path);\n\t\t\tvar regex = toRegex(tokens);\n\t\t\tthis.parsedData_ = {\n\t\t\t\tregex,\n\t\t\t\ttokens\n\t\t\t};\n\t\t}\n\t\treturn this.parsedData_;\n\t}\n\n\t/**\n\t * Extracts param data from the given path, according to this route.\n\t * @param {string} path The url path to extract params from.\n\t * @return {Object} The extracted data, if the path matches this route, or\n\t *     null otherwise.\n\t */\n\textractParams(path) {\n\t\tif (isString(this.path)) {\n\t\t\treturn extractData(this.buildParsedData_().tokens, path);\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Gets the route handler.\n\t * @return {!Function}\n\t */\n\tgetHandler() {\n\t\treturn this.handler;\n\t}\n\n\t/**\n\t * Gets the route path.\n\t * @return {!string|RegExp|Function}\n\t */\n\tgetPath() {\n\t\treturn this.path;\n\t}\n\n\t/**\n \t * Matches if the router can handle the tested path.\n \t * @param {!string} value Path to test (may contain the querystring part).\n\t * @return {boolean} Returns true if matches any route.\n\t */\n\tmatchesPath(value) {\n\t\tvar path = this.path;\n\n\t\tif (isFunction(path)) {\n\t\t\treturn path(value);\n\t\t}\n\t\tif (isString(path)) {\n\t\t\tpath = this.buildParsedData_().regex;\n\t\t}\n\t\tif (path instanceof RegExp) {\n\t\t\treturn value.search(path) > -1;\n\t\t}\n\n\t\treturn false;\n\t}\n\n}\n\nexport default Route;\n","'use strict';\n\nimport { Disposable } from 'metal';\n\nclass Cacheable extends Disposable {\n\n\t/**\n\t * Abstract class for defining cacheable behavior.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the cached data.\n\t\t * @type {!Object}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.cache = null;\n\n\t\t/**\n\t\t * Holds whether class is cacheable.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.cacheable = false;\n\t}\n\n\t/**\n\t * Adds content to the cache.\n\t * @param {string} content Content to be cached.\n\t * @chainable\n\t */\n\taddCache(content) {\n\t\tif (this.cacheable) {\n\t\t\tthis.cache = content;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clears the cache.\n\t * @chainable\n\t */\n\tclearCache() {\n\t\tthis.cache = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tthis.clearCache();\n\t}\n\n\t/**\n\t * Gets the cached content.\n\t * @return {Object} Cached content.\n\t * @protected\n\t */\n\tgetCache() {\n\t\treturn this.cache;\n\t}\n\n\t/**\n\t * Whether the class is cacheable.\n\t * @return {boolean} Returns true when class is cacheable, false otherwise.\n\t */\n\tisCacheable() {\n\t\treturn this.cacheable;\n\t}\n\n\t/**\n\t * Sets whether the class is cacheable.\n\t * @param {boolean} cacheable\n\t */\n\tsetCacheable(cacheable) {\n\t\tif (!cacheable) {\n\t\t\tthis.clearCache();\n\t\t}\n\t\tthis.cacheable = cacheable;\n\t}\n\n}\n\nexport default Cacheable;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { globalEval } from 'metal-dom';\nimport Cacheable from '../cacheable/Cacheable';\n\nclass Screen extends Cacheable {\n\n\t/**\n\t * Screen class is a special type of route handler that provides helper\n\t * utilities that adds lifecycle and methods to provide content to each\n\t * registered surface.\n\t * @constructor\n\t * @extends {Cacheable}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the screen id.\n\t\t * @type {string}\n\t\t * @protected\n\t\t */\n\t\tthis.id = this.makeId_(getUid());\n\n\t\t/**\n\t\t * Holds the screen meta tags. Relevant when the meta tags\n\t\t * should be updated when screen is rendered.\n\t\t */\n\t\tthis.metas = null;\n\n\t\t/**\n\t\t * Holds the screen title. Relevant when the page title should be\n\t\t * upadated when screen is rendered.\n\t\t * @type {?string=}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.title = null;\n\t}\n\n\t/**\n\t * Fires when the screen is active. Allows a screen to perform any setup\n\t * that requires its DOM to be visible. Lifecycle.\n\t */\n\tactivate() {\n\t\tconsole.log('Screen [' + this + '] activate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * activating. Can be used, for example, to prevent navigation if a user\n\t * is not authenticated. Lifecycle.\n\t * @return {boolean=|?Promise=} If returns or resolves to true,\n\t *     the current screen is locked and the next nagivation interrupted.\n\t */\n\tbeforeActivate() {\n\t\tconsole.log('Screen [' + this + '] beforeActivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance to cancel the navigation and stop itself from\n\t * being deactivated. Can be used, for example, if the screen has unsaved\n\t * state. Lifecycle. Clean-up should not be preformed here, since the\n\t * navigation may still be cancelled. Do clean-up in deactivate.\n\t * @return {boolean=|?Promise=} If returns or resolves to true,\n\t *     the current screen is locked and the next nagivation interrupted.\n\t */\n\tbeforeDeactivate() {\n\t\tconsole.log('Screen [' + this + '] beforeDeactivate');\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the path before history update.\n\t * @path {!string} path Navigation path.\n\t * @return {!string} Navigation path to use on history.\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\treturn path;\n\t}\n\n\t/**\n\t * Gives the Screen a chance format the state before history update.\n\t * @path {!object} state History state.\n\t * @return {!object} History state to use on history.\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\treturn state;\n\t}\n\n\t/**\n\t * Allows a screen to do any cleanup necessary after it has been\n\t * deactivated, for example cancelling outstanding requests or stopping\n\t * timers. Lifecycle.\n\t */\n\tdeactivate() {\n\t\tconsole.log('Screen [' + this + '] deactivate');\n\t}\n\n\t/**\n\t * Dispose a screen, either after it is deactivated (in the case of a\n\t * non-cacheable view) or when the App is itself disposed for whatever\n\t * reason. Lifecycle.\n\t */\n\tdisposeInternal() {\n\t\tsuper.disposeInternal();\n\t\tconsole.log('Screen [' + this + '] dispose');\n\t}\n\n\t/**\n\t * Allows a screen to evaluate scripts before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?Promise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateScripts(surfaces) {\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tif (surfaces[sId].activeChild) {\n\t\t\t\tglobalEval.runScriptsInElement(surfaces[sId].activeChild);\n\t\t\t}\n\t\t});\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to evaluate styles before the element is made visible.\n\t * Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?Promise=} This can return a promise, which will\n\t *     pause the navigation until it is resolved.\n\t */\n\tevaluateStyles() {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Allows a screen to perform any setup immediately before the element is\n\t * made visible. Lifecycle.\n\t * @param {!object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @return {?Promise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\tflip(surfaces) {\n\t\tconsole.log('Screen [' + this + '] flip');\n\n\t\tvar transitions = [];\n\n\t\tObject.keys(surfaces).forEach(sId => {\n\t\t\tvar surface = surfaces[sId];\n\t\t\tvar deferred = surface.show(this.id);\n\t\t\ttransitions.push(deferred);\n\t\t});\n\n\t\treturn Promise.all(transitions);\n\t}\n\n\t/**\n\t * Gets the screen id.\n\t * @return {string}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the screen meta tags.\n\t * @return {NodeList|Node}\n\t */\n\tgetMetas() {\n\t\treturn this.metas;\n\t}\n\n\t/**\n\t * Returns the content for the given surface, or null if the surface isn't\n\t * used by this screen. This will be called when a screen is initially\n\t * constructed or, if a screen is non-cacheable, when navigated.\n\t * @param {!string} surfaceId The id of the surface DOM element.\n\t * @param {!Object} params Params extracted from the current path.\n\t * @return {?string|Element=} This can return a string or node representing\n\t *     the content of the surface. If returns falsy values surface default\n\t *     content is restored.\n\t */\n\tgetSurfaceContent() {\n\t\tconsole.log('Screen [' + this + '] getSurfaceContent');\n\t}\n\n\t/**\n\t * Gets the screen title.\n\t * @return {?string=}\n\t */\n\tgetTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * Returns all contents for the surfaces. This will pass the loaded content\n\t * to <code>Screen.load</code> with all information you\n\t * need to fulfill the surfaces. Lifecycle.\n\t * @param {!string=} path The requested path.\n\t * @return {!Promise} This can return a string representing the\n\t *     contents of the surfaces or a promise, which will pause the navigation\n\t *     until it is resolved. This is useful for loading async content.\n\t */\n\tload() {\n\t\tconsole.log('Screen [' + this + '] load');\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Makes the id for the screen.\n\t * @param {!string} id The screen id the content belongs too.\n\t * @return {string}\n\t * @private\n\t */\n\tmakeId_(id) {\n\t\treturn 'screen_' + id;\n\t}\n\n\t/**\n\t * Sets the screen id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the screen meta tags.\n\t * @param {NodeList|Node} metas\n\t */\n\tsetMetas(metas) {\n\t\tthis.metas = metas;\n\t}\n\n\t/**\n\t * Sets the screen title.\n\t * @param {?string=} title\n\t */\n\tsetTitle(title) {\n\t\tthis.title = title;\n\t}\n\n\t/**\n\t * @return {string}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n}\n\n/**\n * @param {*} object\n * @return {boolean} Whether a given instance implements\n * <code>Screen</code>.\n */\nScreen.isImplementedBy = function(object) {\n\treturn object instanceof Screen;\n};\n\nexport default Screen;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport { Disposable, isDefAndNotNull } from 'metal';\nimport { append, removeChildren, exitDocument } from 'metal-dom';\n\nclass Surface extends Disposable {\n\n\t/**\n\t * Surface class representing the references to elements on the page that\n\t * can potentially be updated by <code>App</code>.\n\t * @param {string} id\n\t * @constructor\n\t */\n\tconstructor(id) {\n\t\tsuper();\n\n\t\tif (!id) {\n\t\t\tthrow new Error('Surface element id not specified. A surface element requires a valid id.');\n\t\t}\n\n\t\t/**\n\t\t * Holds the active child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.activeChild = null;\n\n\t\t/**\n\t\t * Holds the default child element.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultChild = null;\n\n\t\t/**\n\t\t * Holds the element with the specified surface id, if not found creates a\n\t\t * new element with the specified id.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.element = null;\n\n\t\t/**\n\t\t * Holds the surface id.\n\t\t * @type {String}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.id = id;\n\n\t\t/**\n\t\t * Holds the default transitionFn for the surfaces.\n\t\t * @param {?Element=} from The visible surface element.\n\t\t * @param {?Element=} to The surface element to be flipped.\n\t\t * @default null\n\t\t */\n\t\tthis.transitionFn = null;\n\n\t\tthis.defaultChild = this.getChild(Surface.DEFAULT);\n\t\tthis.maybeWrapContentAsDefault_();\n\t\tthis.activeChild = this.defaultChild;\n\t}\n\n\t/**\n\t * Adds screen content to a surface. If content hasn't been passed, see if\n\t * an element exists in the DOM that matches the id. By convention, the\n\t * element should already be nested in the right element and should have an\n\t * id that is a concatentation of the surface id + '-' + the screen id.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @param {?string|Element=} opt_content The string content or element to\n\t *     add be added as surface content.\n\t * @return {Element}\n\t */\n\taddContent(screenId, opt_content) {\n\t\tvar child = this.defaultChild;\n\n\t\tif (isDefAndNotNull(opt_content)) {\n\t\t\tchild = this.getChild(screenId);\n\t\t\tif (child) {\n\t\t\t\tremoveChildren(child);\n\t\t\t} else {\n\t\t\t\tchild = this.createChild(screenId);\n\t\t\t\tthis.transition(child, null);\n\t\t\t}\n\t\t\tappend(child, opt_content);\n\t\t}\n\n\t\tvar element = this.getElement();\n\n\t\tif (element && child) {\n\t\t\tappend(element, child);\n\t\t}\n\n\t\treturn child;\n\t}\n\n\t/**\n\t * Creates child node for the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {Element}\n\t */\n\tcreateChild(screenId) {\n\t\tvar child = globals.document.createElement('div');\n\t\tchild.setAttribute('id', this.makeId_(screenId));\n\t\treturn child;\n\t}\n\n\t/**\n\t * Gets child node of the surface.\n\t * @param {!string} screenId The screen id.\n\t * @return {?Element}\n\t */\n\tgetChild(screenId) {\n\t\treturn globals.document.getElementById(this.makeId_(screenId));\n\t}\n\n\t/**\n\t * Gets the surface element from element, and sets it to the el property of\n\t * the current instance.\n\t * <code>this.element</code> will be used.\n\t * @return {?Element} The current surface element.\n\t */\n\tgetElement() {\n\t\tif (this.element) {\n\t\t\treturn this.element;\n\t\t}\n\t\tthis.element = globals.document.getElementById(this.id);\n\t\treturn this.element;\n\t}\n\n\t/**\n\t * Gets the surface id.\n\t * @return {String}\n\t */\n\tgetId() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Gets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @return {?Function=} The transition function.\n\t */\n\tgetTransitionFn() {\n\t\treturn this.transitionFn;\n\t}\n\n\t/**\n\t * Makes the id for the element that holds content for a screen.\n\t * @param {!string} screenId The screen id the content belongs too.\n\t * @return {String}\n\t * @private\n\t */\n\tmakeId_(screenId) {\n\t\treturn this.id + '-' + screenId;\n\t}\n\n\t/**\n\t * If default child is missing, wraps surface content as default child. If\n\t * surface have static content, make sure to place a\n\t * <code>surfaceId-default</code> element inside surface, only contents\n\t * inside the default child will be replaced by navigation.\n\t */\n\tmaybeWrapContentAsDefault_() {\n\t\tvar element = this.getElement();\n\t\tif (element && !this.defaultChild) {\n\t\t\tvar fragment = globals.document.createDocumentFragment();\n\t\t\twhile (element.firstChild) {\n\t\t\t\tfragment.appendChild(element.firstChild);\n\t\t\t}\n\t\t\tthis.defaultChild = this.addContent(Surface.DEFAULT, fragment);\n\t\t\tthis.transition(null, this.defaultChild);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the surface id.\n\t * @param {!string} id\n\t */\n\tsetId(id) {\n\t\tthis.id = id;\n\t}\n\n\t/**\n\t * Sets the surface transition function.\n\t * See <code>Surface.defaultTransition</code>.\n\t * @param {?Function=} transitionFn The transition function.\n\t */\n\tsetTransitionFn(transitionFn) {\n\t\tthis.transitionFn = transitionFn;\n\t}\n\n\t/**\n\t * Shows screen content from a surface.\n\t * @param {String} screenId The screen id to show.\n\t * @return {Promise} Pauses the navigation until it is resolved.\n\t */\n\tshow(screenId) {\n\t\tvar from = this.activeChild;\n\t\tvar to = this.getChild(screenId);\n\t\tif (!to) {\n\t\t\tto = this.defaultChild;\n\t\t}\n\t\tthis.activeChild = to;\n\n\n\t\tconst transitionEnd = () => {\n\t\t\tif (from && from !== to) {\n\t\t\t\texitDocument(from);\n\t\t\t}\n\t\t};\n\n\t\treturn this.transition(from, to)\n\t\t\t.then(transitionEnd)\n\t\t\t.catch(transitionEnd);\n\t}\n\n\t/**\n\t * Removes screen content from a surface.\n\t * @param {!string} screenId The screen id to remove.\n\t */\n\tremove(screenId) {\n\t\tvar child = this.getChild(screenId);\n\t\tif (child) {\n\t\t\texitDocument(child);\n\t\t}\n\t}\n\n\t/**\n\t * @return {String}\n\t */\n\ttoString() {\n\t\treturn this.id;\n\t}\n\n\t/**\n\t * Invokes the transition function specified on <code>transition</code> attribute.\n\t * @param {?Element=} from\n\t * @param {?Element=} to\n\t * @return {?Promise=} This can return a promise, which will pause the\n\t *     navigation until it is resolved.\n\t */\n\ttransition(from, to) {\n\t\tvar transitionFn = this.transitionFn || Surface.defaultTransition;\n\t\treturn Promise.resolve(transitionFn.call(this, from, to));\n\t}\n\n}\n\n/**\n   * Holds the default surface name. Elements on the page must contain a child\n   * element containing the default content, this element must be as following:\n   *\n   * Example:\n   * <code>\n   *   <div id=\"mysurface\">\n   *     <div id=\"mysurface-default\">Default surface content.</div>\n   *   </div>\n   * </code>\n   *\n   * The default content is relevant for the initial page content. When a\n   * screen doesn't provide content for the surface the default content is\n   * restored into the page.\n   *\n   * @type {!String}\n   * @default default\n   * @static\n   */\nSurface.DEFAULT = 'default';\n\n/**\n * Holds the default transition for all surfaces. Each surface could have its\n * own transition.\n *\n * Example:\n *\n * <code>\n * surface.setTransitionFn(function(from, to) {\n *   if (from) {\n *     from.style.display = 'none';\n *     from.classList.remove('flipped');\n *   }\n *   if (to) {\n *     to.style.display = 'block';\n *     to.classList.add('flipped');\n *   }\n *   return null;\n * });\n * </code>\n *\n * @param {?Element=} from The visible surface element.\n * @param {?Element=} to The surface element to be flipped.\n * @static\n */\nSurface.defaultTransition = function(from, to) {\n\tif (from) {\n\t\tfrom.style.display = 'none';\n\t\tfrom.classList.remove('flipped');\n\t}\n\tif (to) {\n\t\tto.style.display = 'block';\n\t\tto.classList.add('flipped');\n\t}\n};\n\nexport default Surface;\n","'use strict';\n\nimport { addClasses, delegate, match, on, removeClasses } from 'metal-dom';\nimport { array, async, isDefAndNotNull, isString, object } from 'metal';\nimport { EventEmitter, EventHandler } from 'metal-events';\nimport globals from '../globals/globals';\nimport Route from '../route/Route';\nimport Screen from '../screen/Screen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nconst NavigationStrategy = {\n\tIMMEDIATE: 'immediate',\n\tSCHEDULE_LAST: 'scheduleLast'\n};\n\nclass App extends EventEmitter {\n\n\t/**\n\t * App class that handle routes and screens lifecycle.\n\t * @constructor\n\t * @extends {EventEmitter}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the active screen.\n\t\t * @type {?Screen}\n\t\t * @protected\n\t\t */\n\t\tthis.activeScreen = null;\n\n\t\t/**\n\t\t * Holds the active path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.activePath = null;\n\n\t\t/**\n\t\t * Allows prevent navigate from dom prevented event.\n\t\t * @type {boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.allowPreventNavigate = true;\n\n\t\t/**\n\t\t * Holds link base path.\n\t\t * @type {!string}\n\t\t * @default ''\n\t\t * @protected\n\t\t */\n\t\tthis.basePath = '';\n\n\t\t/**\n\t\t * Holds the value of the browser path before a navigation is performed.\n\t\t * @type {!string}\n\t\t * @default the current browser path.\n\t\t * @protected\n\t\t */\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\n\t\t/**\n\t\t * Captures scroll position from scroll event.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.captureScrollPositionFromScrollEvent = true;\n\n\t\t/**\n\t\t * Holds the default page title.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.defaultTitle = globals.document.title;\n\n\t\t/**\n\t\t * Holds the form selector to define forms that are routed.\n\t\t * @type {!string}\n\t\t * @default form[enctype=\"multipart/form-data\"]:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.formSelector = 'form[enctype=\"multipart/form-data\"]:not([data-senna-off])';\n\n\t\t/**\n\t\t * When enabled, the route matching ignores query string from the path.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.ignoreQueryStringFromRoutePath = false;\n\n\t\t/**\n\t\t * Holds the link selector to define links that are routed.\n\t\t * @type {!string}\n\t\t * @default a:not([data-senna-off])\n\t\t * @protected\n\t\t */\n\t\tthis.linkSelector = 'a:not([data-senna-off]):not([target=\"_blank\"])';\n\n\t\t/**\n\t\t * Holds the loading css class.\n\t\t * @type {!string}\n\t\t * @default senna-loading\n\t\t * @protected\n\t\t */\n\t\tthis.loadingCssClass = 'senna-loading';\n\n\t\t/**\n\t\t * Using the History API to manage your URLs is awesome and, as it happens,\n\t\t * a crucial feature of good web apps. One of its downsides, however, is\n\t\t * that scroll positions are stored and then, more importantly, restored\n\t\t * whenever you traverse the history. This often means unsightly jumps as\n\t\t * the scroll position changes automatically, and especially so if your app\n\t\t * does transitions, or changes the contents of the page in any way.\n\t\t * Ultimately this leads to an horrible user experience. The good news is,\n\t\t * however, that there’s a potential fix: history.scrollRestoration.\n\t\t * https://developers.google.com/web/updates/2015/09/history-api-scroll-restoration\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.nativeScrollRestorationSupported = ('scrollRestoration' in globals.window.history);\n\n\t\t/**\n\t\t * When set to NavigationStrategy.SCHEDULE_LAST means that the current navigation\n\t\t * cannot be Cancelled to start another and will be queued in\n\t\t * scheduledNavigationQueue. When NavigationStrategy.IMMEDIATE means that all\n\t\t * navigation will be cancelled to start another.\n\t\t * @type {!string}\n\t\t * @default immediate\n\t\t * @protected\n\t\t */\n\t\tthis.navigationStrategy = NavigationStrategy.IMMEDIATE;\n\n\t\t/**\n\t\t * When set to true there is a pendingNavigate that has not yet been\n\t\t * resolved or rejected.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.isNavigationPending = false;\n\n\t\t/**\n\t\t * Holds a deferred with the current navigation.\n\t\t * @type {?Promise}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.pendingNavigate = null;\n\n\t\t/**\n\t\t * Holds the window horizontal scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollLeft = 0;\n\n\t\t/**\n\t\t * Holds the window vertical scroll position when the navigation using\n\t\t * back or forward happens to be restored after the surfaces are updated.\n\t\t * @type {!Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis.popstateScrollTop = 0;\n\n\t\t/**\n\t\t * Holds the redirect path containing the query parameters.\n\t\t * @type {?string}\n\t\t * @protected\n\t\t */\n\t\tthis.redirectPath = null;\n\n\t\t/**\n\t\t * Holds the screen routes configuration.\n\t\t * @type {?Array}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.routes = [];\n\n\t\t/**\n\t\t * Holds a queue that stores every DOM event that can initiate a navigation.\n\t\t * @type {!Event}\n\t\t * @default []\n\t\t * @protected\n\t\t */\n\t\tthis.scheduledNavigationQueue = [];\n\n\t\t/**\n\t\t * Maps the screen instances by the url containing the parameters.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.screens = {};\n\n\t\t/**\n\t\t * When set to true the first erroneous popstate fired on page load will be\n\t\t * ignored, only if <code>globals.window.history.state</code> is also\n\t\t * <code>null</code>.\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis.skipLoadPopstate = false;\n\n\t\t/**\n\t\t * Maps that index the surfaces instances by the surface id.\n\t\t * @type {?Object}\n\t\t * @default {}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaces = {};\n\n\t\t/**\n\t\t * When set to true, moves the scroll position after popstate, or to the\n\t\t * top of the viewport for new navigation. If false, the browser will\n\t\t * take care of scroll restoration.\n\t\t * @type {!boolean}\n\t\t * @default true\n\t\t * @protected\n\t\t */\n\t\tthis.updateScrollPosition = true;\n\n\t\tthis.appEventHandlers_ = new EventHandler();\n\n\t\tthis.appEventHandlers_.add(\n\t\t\ton(globals.window, 'scroll', utils.debounce(this.onScroll_.bind(this), 100)),\n\t\t\ton(globals.window, 'load', this.onLoad_.bind(this)),\n\t\t\ton(globals.window, 'popstate', this.onPopstate_.bind(this))\n\t\t);\n\n\t\tthis.on('startNavigate', this.onStartNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigate_);\n\t\tthis.on('beforeNavigate', this.onBeforeNavigateDefault_, true);\n\t\tthis.on('beforeUnload', this.onBeforeUnloadDefault_);\n\n\t\tthis.setLinkSelector(this.linkSelector);\n\t\tthis.setFormSelector(this.formSelector);\n\n\t\tthis.maybeOverloadBeforeUnload_();\n\t}\n\n\t/**\n\t * Adds one or more screens to the application.\n\t *\n\t * Example:\n\t *\n\t * <code>\n\t *   app.addRoutes({ path: '/foo', handler: FooScreen });\n\t *   or\n\t *   app.addRoutes([{ path: '/foo', handler: function(route) { return new FooScreen(); } }]);\n\t * </code>\n\t *\n\t * @param {Object} or {Array} routes Single object or an array of object.\n\t *     Each object should contain <code>path</code> and <code>screen</code>.\n\t *     The <code>path</code> should be a string or a regex that maps the\n\t *     navigation route to a screen class definition (not an instance), e.g:\n\t *         <code>{ path: \"/home:param1\", handler: MyScreen }</code>\n\t *         <code>{ path: /foo.+/, handler: MyScreen }</code>\n\t * @chainable\n\t */\n\taddRoutes(routes) {\n\t\tif (!Array.isArray(routes)) {\n\t\t\troutes = [routes];\n\t\t}\n\t\troutes.forEach((route) => {\n\t\t\tif (!(route instanceof Route)) {\n\t\t\t\troute = new Route(route.path, route.handler);\n\t\t\t}\n\t\t\tthis.routes.push(route);\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds one or more surfaces to the application.\n\t * @param {Surface|String|Array.<Surface|String>} surfaces\n\t *     Surface element id or surface instance. You can also pass an Array\n\t *     whichcontains surface instances or id. In case of ID, these should be\n\t *     the id of surface element.\n\t * @chainable\n\t */\n\taddSurfaces(surfaces) {\n\t\tif (!Array.isArray(surfaces)) {\n\t\t\tsurfaces = [surfaces];\n\t\t}\n\t\tsurfaces.forEach((surface) => {\n\t\t\tif (isString(surface)) {\n\t\t\t\tsurface = new Surface(surface);\n\t\t\t}\n\t\t\tthis.surfaces[surface.getId()] = surface;\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns if can navigate to path.\n\t * @param {!string} url\n\t * @return {boolean}\n\t */\n\tcanNavigate(url) {\n\t\tconst uri = utils.isWebUri(url);\n\n\t\tif (!uri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst path = utils.getUrlPath(url);\n\n\t\tif (!this.isLinkSameOrigin_(uri.getHost())) {\n\t\t\tconsole.log('Offsite link clicked');\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.isSameBasePath_(path)) {\n\t\t\tconsole.log('Link clicked outside app\\'s base path');\n\t\t\treturn false;\n\t\t}\n\t\t// Prevents navigation if it's a hash change on the same url.\n\t\tif (uri.getHash() && utils.isCurrentBrowserPath(path)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.findRoute(path)) {\n\t\t\tconsole.log('No route for ' + path);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Clear screens cache.\n\t * @chainable\n\t */\n\tclearScreensCache() {\n\t\tObject.keys(this.screens).forEach((path) => {\n\t\t\tif (path === this.activePath) {\n\t\t\t\tthis.activeScreen.clearCache();\n\t\t\t} else if (!(this.isNavigationPending && this.pendingNavigate.path === path)) {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves or create a screen instance to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {Screen}\n\t */\n\tcreateScreenInstance(path, route) {\n\t\tif (!this.pendingNavigate && path === this.activePath) {\n\t\t\tconsole.log('Already at destination, refresh navigation');\n\t\t\treturn this.activeScreen;\n\t\t}\n\t\t/* jshint newcap: false */\n\t\tvar screen = this.screens[path];\n\t\tif (!screen) {\n\t\t\tvar handler = route.getHandler();\n\t\t\tif (handler === Screen || Screen.isImplementedBy(handler.prototype)) {\n\t\t\t\tscreen = new handler();\n\t\t\t} else {\n\t\t\t\tscreen = handler(route) || new Screen();\n\t\t\t}\n\t\t\tconsole.log('Create screen for [' + path + '] [' + screen + ']');\n\t\t}\n\t\treturn screen;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tif (this.activeScreen) {\n\t\t\tthis.removeScreen(this.activePath);\n\t\t}\n\t\tthis.clearScreensCache();\n\t\tthis.formEventHandler_.removeListener();\n\t\tthis.linkEventHandler_.removeListener();\n\t\tthis.appEventHandlers_.removeAllListeners();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Dispatches to the first route handler that matches the current path, if\n\t * any.\n\t * @return {Promise} Returns a pending request promise.\n\t */\n\tdispatch() {\n\t\treturn this.navigate(utils.getCurrentBrowserPath(), true);\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @return {Promise} Returns a pending request promise.\n\t */\n\tdoNavigate_(path, opt_replaceHistory) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\tthis.pendingNavigate = Promise.reject(new Error('No route for ' + path));\n\t\t\treturn this.pendingNavigate;\n\t\t}\n\n\t\tconsole.log('Navigate to [' + path + ']');\n\n\t\tthis.stopPendingNavigate_();\n\t\tthis.isNavigationPending = true;\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\tconst finalize = () => {\n\t\t\tthis.navigationStrategy = NavigationStrategy.IMMEDIATE;\n\n\t\t\tif (this.scheduledNavigationQueue.length) {\n\t\t\t\tconst scheduledNavigation = this.scheduledNavigationQueue.shift();\n\t\t\t\tthis.maybeNavigate_(scheduledNavigation.href, scheduledNavigation);\n\t\t\t}\n\t\t};\n\n\t\treturn this.maybePreventDeactivate_()\n\t\t\t.then(() => this.maybePreventActivate_(nextScreen))\n\t\t\t.then(() => nextScreen.load(path))\n\t\t\t.then(() => {\n\t\t\t\t// At this point we cannot stop navigation and all received\n\t\t\t\t// navigate candidates will be queued at scheduledNavigationQueue.\n\t\t\t\tthis.navigationStrategy = NavigationStrategy.SCHEDULE_LAST;\n\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\tthis.activeScreen.deactivate();\n\t\t\t\t}\n\t\t\t\tthis.prepareNavigateHistory_(path, nextScreen, opt_replaceHistory);\n\t\t\t\tthis.prepareNavigateSurfaces_(\n\t\t\t\t\tnextScreen,\n\t\t\t\t\tthis.surfaces,\n\t\t\t\t\tthis.extractParams(route, path)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then(() => nextScreen.evaluateStyles(this.surfaces))\n\t\t\t.then(() => nextScreen.flip(this.surfaces))\n\t\t\t.then(() => nextScreen.evaluateScripts(this.surfaces))\n\t\t\t.then(() => this.maybeUpdateScrollPositionState_())\n\t\t\t.then(() => this.syncScrollPositionSyncThenAsync_())\n\t\t\t.then(() => this.finalizeNavigate_(path, nextScreen))\n\t\t\t.then(() => this.maybeOverloadBeforeUnload_())\n\t\t\t.then(() => {\n\t\t\t\tfinalize();\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.isNavigationPending = false;\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tfinalize();\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Extracts params according to the given path and route.\n\t * @param {!Route} route\n\t * @param {string} path\n\t * @param {!Object}\n\t */\n\textractParams(route, path) {\n\t\treturn route.extractParams(this.getRoutePath(path));\n\t}\n\n\t/**\n\t * Finalizes a screen navigation.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @protected\n\t */\n\tfinalizeNavigate_(path, nextScreen) {\n\t\tnextScreen.activate();\n\n\t\tif (this.activeScreen && !this.activeScreen.isCacheable()) {\n\t\t\tif (this.activeScreen !== nextScreen) {\n\t\t\t\tthis.removeScreen(this.activePath);\n\t\t\t}\n\t\t}\n\n\t\tthis.activePath = path;\n\t\tthis.activeScreen = nextScreen;\n\t\tthis.browserPathBeforeNavigate = utils.getCurrentBrowserPathWithoutHash();\n\t\tthis.screens[path] = nextScreen;\n\t\tthis.isNavigationPending = false;\n\t\tthis.pendingNavigate = null;\n\t\tglobals.capturedFormElement = null;\n\t\tglobals.capturedFormButtonElement = null;\n\t\tconsole.log('Navigation done');\n\t}\n\n\t/**\n\t * Finds a route for the test path. Returns true if matches has a route,\n\t * otherwise returns null.\n\t * @param {!string} path Path containing the querystring part.\n\t * @return {?Object} Route handler if match any or <code>null</code> if the\n\t *     path is the same as the current url and the path contains a fragment.\n\t */\n\tfindRoute(path) {\n\t\tpath = this.getRoutePath(path);\n\t\tfor (var i = 0; i < this.routes.length; i++) {\n\t\t\tvar route = this.routes[i];\n\t\t\tif (route.matchesPath(path)) {\n\t\t\t\treturn route;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets allow prevent navigate.\n\t * @return {boolean}\n\t */\n\tgetAllowPreventNavigate() {\n\t\treturn this.allowPreventNavigate;\n\t}\n\n\t/**\n\t * Gets link base path.\n\t * @return {!string}\n\t */\n\tgetBasePath() {\n\t\treturn this.basePath;\n\t}\n\n\t/**\n\t * Gets the default page title.\n\t * @return {string} defaultTitle\n\t */\n\tgetDefaultTitle() {\n\t\treturn this.defaultTitle;\n\t}\n\n\t/**\n\t * Gets the form selector.\n\t * @return {!string}\n\t */\n\tgetFormSelector() {\n\t\treturn this.formSelector;\n\t}\n\n\t/**\n\t * Check if route matching is ignoring query string from the route path.\n\t * @return {boolean}\n\t */\n\tgetIgnoreQueryStringFromRoutePath() {\n\t\treturn this.ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Gets the link selector.\n\t * @return {!string}\n\t */\n\tgetLinkSelector() {\n\t\treturn this.linkSelector;\n\t}\n\n\t/**\n\t * Gets the loading css class.\n\t * @return {!string}\n\t */\n\tgetLoadingCssClass() {\n\t\treturn this.loadingCssClass;\n\t}\n\n\t/**\n\t * Returns the given path formatted to be matched by a route. This will,\n\t * for example, remove the base path from it, but make sure it will end\n\t * with a '/'.\n\t * @param {string} path\n\t * @return {string}\n\t */\n\tgetRoutePath(path) {\n\t\tif (this.getIgnoreQueryStringFromRoutePath()) {\n\t\t\tpath = utils.getUrlPathWithoutHashAndSearch(path);\n\t\t\treturn utils.getUrlPathWithoutHashAndSearch(path.substr(this.basePath.length));\n\t\t}\n\n\t\tpath = utils.getUrlPathWithoutHash(path);\n\t\treturn utils.getUrlPathWithoutHash(path.substr(this.basePath.length));\n\t}\n\n\t/**\n\t * Gets the update scroll position value.\n\t * @return {boolean}\n\t */\n\tgetUpdateScrollPosition() {\n\t\treturn this.updateScrollPosition;\n\t}\n\n\t/**\n\t * Handle navigation error.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {!Error} error\n\t * @protected\n\t */\n\thandleNavigateError_(path, nextScreen, error) {\n\t\tconsole.log('Navigation error for [' + nextScreen + '] (' + error.stack + ')');\n\t\tthis.emit('navigationError', {\n\t\t\terror,\n\t\t\tnextScreen,\n\t\t\tpath\n\t\t});\n\t\tif (!utils.isCurrentBrowserPath(path)) {\n\t\t\tif (this.isNavigationPending && this.pendingNavigate) {\n\t\t\t\tthis.pendingNavigate\n\t\t\t\t\t.then(() => this.removeScreen(path))\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tthis.removeScreen(path);\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.removeScreen(path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if app has routes.\n\t * @return {boolean}\n\t */\n\thasRoutes() {\n\t\treturn this.routes.length > 0;\n\t}\n\n\t/**\n\t * Tests if host is an offsite link.\n\t * @param {!string} host Link host to compare with\n\t *     <code>globals.window.location.host</code>.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisLinkSameOrigin_(host) {\n\t\tconst hostUri = new Uri(host);\n\t\tconst locationHostUri = new Uri(globals.window.location.host);\n\n\t\treturn hostUri.getPort() === locationHostUri.getPort() && hostUri.getHostname() === locationHostUri.getHostname();\n\t}\n\n\t/**\n\t * Tests if link element has the same app's base path.\n\t * @param {!string} path Link path containing the querystring part.\n\t * @return {boolean}\n\t * @protected\n\t */\n\tisSameBasePath_(path) {\n\t\treturn path.indexOf(this.basePath) === 0;\n\t}\n\n\t/**\n\t * Lock the document scroll in order to avoid the browser native back and\n\t * forward navigation to change the scroll position. In the end of\n\t * navigation lifecycle scroll is repositioned.\n\t * @protected\n\t */\n\tlockHistoryScrollPosition_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\t\t// Browsers are inconsistent when re-positioning the scroll history on\n\t\t// popstate. At some browsers, history scroll happens before popstate, then\n\t\t// lock the scroll on the last known position as soon as possible after the\n\t\t// current JS execution context and capture the current value. Some others,\n\t\t// history scroll happens after popstate, in this case, we bind an once\n\t\t// scroll event to lock the las known position. Lastly, the previous two\n\t\t// behaviors can happen even on the same browser, hence the race will decide\n\t\t// the winner.\n\t\tvar winner = false;\n\t\tvar switchScrollPositionRace = function() {\n\t\t\tglobals.document.removeEventListener('scroll', switchScrollPositionRace, false);\n\t\t\tif (!winner) {\n\t\t\t\tglobals.window.scrollTo(state.scrollLeft, state.scrollTop);\n\t\t\t\twinner = true;\n\t\t\t}\n\t\t};\n\t\tasync.nextTick(switchScrollPositionRace);\n\t\tglobals.document.addEventListener('scroll', switchScrollPositionRace, false);\n\t}\n\n\t/**\n\t * If supported by the browser, disables native scroll restoration and\n\t * stores current value.\n\t */\n\tmaybeDisableNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported) {\n\t\t\tthis.nativeScrollRestoration_ = globals.window.history.scrollRestoration;\n\t\t\tglobals.window.history.scrollRestoration = 'manual';\n\t\t}\n\t}\n\n\t/**\n\t * This method is used to evaluate if is possible to queue received\n\t *  dom event to scheduleNavigationQueue and enqueue it.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeScheduleNavigation_(href, event) {\n\t\tif (this.isNavigationPending && this.navigationStrategy === NavigationStrategy.SCHEDULE_LAST) {\n\t\t\tthis.scheduledNavigationQueue = [object.mixin({\n\t\t\t\thref,\n\t\t\t\tisScheduledNavigation: true\n\t\t\t}, event)];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Maybe navigate to a path.\n\t * @param {string} href Information about the link's href.\n\t * @param {Event} event Dom event that initiated the navigation.\n\t */\n\tmaybeNavigate_(href, event) {\n\t\tif (!this.canNavigate(href)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isNavigationScheduled = this.maybeScheduleNavigation_(href, event);\n\n\t\tif (isNavigationScheduled) {\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tvar navigateFailed = false;\n\t\ttry {\n\t\t\tthis.navigate(utils.getUrlPath(href), false, event);\n\t\t} catch (err) {\n\t\t\t// Do not prevent link navigation in case some synchronous error occurs\n\t\t\tnavigateFailed = true;\n\t\t}\n\n\t\tif (!navigateFailed && !event.isScheduledNavigation) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether the onbeforeunload global event handler is overloaded\n\t * by client code. If so, it replaces with a function that halts the normal\n\t * event flow in relation with the client onbeforeunload function.\n\t * This can be in most part used to prematurely terminate navigation to other pages\n\t * according to the given constrait(s).\n\t * @protected\n\t */\n\tmaybeOverloadBeforeUnload_() {\n\t\tif ('function' === typeof window.onbeforeunload) {\n\t\t\twindow._onbeforeunload = window.onbeforeunload;\n\n\t\t\twindow.onbeforeunload = event => {\n\t\t\t\tthis.emit('beforeUnload', event);\n\t\t\t\tif (event && event.defaultPrevented) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// mark the updated handler due unwanted recursion\n\t\t\twindow.onbeforeunload._overloaded = true;\n\t\t}\n\t}\n\n\t/**\n\t * Cancels navigation if nextScreen's beforeActivate lifecycle method\n\t * resolves to true.\n\t * @param {!Screen} nextScreen\n\t * @return {!Promise}\n\t */\n\tmaybePreventActivate_(nextScreen) {\n\t\treturn Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\treturn nextScreen.beforeActivate();\n\t\t\t})\n\t\t\t.then(prevent => {\n\t\t\t\tif (prevent) {\n\t\t\t\t\tthis.pendingNavigate = Promise.reject('Cancelled by next screen');\n\t\t\t\t\treturn this.pendingNavigate;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Cancels navigation if activeScreen's beforeDeactivate lifecycle\n\t * method resolves to true.\n\t * @return {!Promise}\n\t */\n\tmaybePreventDeactivate_() {\n\t\treturn Promise.resolve()\n\t\t\t.then(() => {\n\t\t\t\tif (this.activeScreen) {\n\t\t\t\t\treturn this.activeScreen.beforeDeactivate();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(prevent => {\n\t\t\t\tif (prevent) {\n\t\t\t\t\tthis.pendingNavigate = Promise.reject(new Error('Cancelled by active screen'));\n\t\t\t\t\treturn this.pendingNavigate;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Maybe reposition scroll to hashed anchor.\n\t */\n\tmaybeRepositionScrollToHashedAnchor() {\n\t\tconst hash = globals.window.location.hash;\n\t\tif (hash) {\n\t\t\tlet anchorElement = globals.document.getElementById(hash.substring(1));\n\t\t\tif (anchorElement) {\n\t\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\t\tglobals.window.scrollTo(offsetLeft, offsetTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * If supported by the browser, restores native scroll restoration to the\n\t * value captured by `maybeDisableNativeScrollRestoration`.\n\t */\n\tmaybeRestoreNativeScrollRestoration() {\n\t\tif (this.nativeScrollRestorationSupported && this.nativeScrollRestoration_) {\n\t\t\tglobals.window.history.scrollRestoration = this.nativeScrollRestoration_;\n\t\t}\n\t}\n\n\t/**\n\t * Maybe restore redirected path hash in case both the current path and\n\t * the given path are the same.\n\t * @param {!string} path Path before navigation.\n\t * @param {!string} redirectPath Path after navigation.\n\t * @param {!string} hash Hash to be added to the path.\n\t * @return {!string} Returns the path with the hash restored.\n\t */\n\tmaybeRestoreRedirectPathHash_(path, redirectPath, hash) {\n\t\tif (redirectPath === utils.getUrlPathWithoutHash(path)) {\n\t\t\treturn redirectPath + hash;\n\t\t}\n\t\treturn redirectPath;\n\t}\n\n\t/**\n\t * Maybe update scroll position in history state to anchor on path.\n\t * @param {!string} path Path containing anchor\n\t */\n\tmaybeUpdateScrollPositionState_() {\n\t\tvar hash = globals.window.location.hash;\n\t\tvar anchorElement = globals.document.getElementById(hash.substring(1));\n\t\tif (anchorElement) {\n\t\t\tconst {offsetLeft, offsetTop} = utils.getNodeOffset(anchorElement);\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(offsetTop, offsetLeft);\n\t\t}\n\t}\n\n\t/**\n\t * Navigates to the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @param {Event=} event Optional event object that triggered the navigation.\n\t * @return {Promise} Returns a pending request promise.\n\t */\n\tnavigate(path, opt_replaceHistory, opt_event) {\n\t\tif (!utils.isHtml5HistorySupported()) {\n\t\t\tthrow new Error('HTML5 History is not supported. Senna will not intercept navigation.');\n\t\t}\n\n\t\tif (opt_event) {\n\t\t\tglobals.capturedFormElement = opt_event.capturedFormElement;\n\t\t\tglobals.capturedFormButtonElement = opt_event.capturedFormButtonElement;\n\t\t}\n\n\t\t// When reloading the same path do replaceState instead of pushState to\n\t\t// avoid polluting history with states with the same path.\n\t\tif (path === this.activePath) {\n\t\t\topt_replaceHistory = true;\n\t\t}\n\n\t\tthis.emit('beforeNavigate', {\n\t\t\tevent: opt_event,\n\t\t\tpath: path,\n\t\t\treplaceHistory: !!opt_replaceHistory\n\t\t});\n\n\t\treturn this.pendingNavigate;\n\t}\n\n\t/**\n\t * Befores navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigate_(event) {\n\t\tif (globals.capturedFormElement) {\n\t\t\tevent.form = globals.capturedFormElement;\n\t\t}\n\t}\n\n\t/**\n\t * Befores navigation to a path. Runs after external listeners.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonBeforeNavigateDefault_(event) {\n\t\tif (this.pendingNavigate) {\n\t\t\tif (this.pendingNavigate.path === event.path || this.navigationStrategy === NavigationStrategy.SCHEDULE_LAST) {\n\t\t\t\tconsole.log('Waiting...');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tthis.emit('beforeUnload', event);\n\n\t\tthis.emit('startNavigate', {\n\t\t\tform: event.form,\n\t\t\tpath: event.path,\n\t\t\treplaceHistory: event.replaceHistory\n\t\t});\n\t}\n\n\t/**\n\t * Custom event handler that executes the original listener that has been\n\t * added by the client code and terminates the navigation accordingly.\n\t * @param {!Event} event original Event facade.\n\t * @protected\n\t */\n\tonBeforeUnloadDefault_(event) {\n\t\tvar func = window._onbeforeunload;\n\t\tif (func && !func._overloaded && func()) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Intercepts document clicks and test link elements in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocClickDelegate_(event) {\n\t\tif (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey || event.button) {\n\t\t\tconsole.log('Navigate aborted, invalid mouse button or modifier key pressed.');\n\t\t\treturn;\n\t\t}\n\t\tthis.maybeNavigate_(event.delegateTarget.href, event);\n\t}\n\n\t/**\n\t * Intercepts document form submits and test action path in order to decide\n\t * whether Surface app can navigate.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonDocSubmitDelegate_(event) {\n\t\tvar form = event.delegateTarget;\n\t\tif (form.method === 'get') {\n\t\t\tconsole.log('GET method not supported');\n\t\t\treturn;\n\t\t}\n\t\tevent.capturedFormElement = form;\n\t\tconst buttonSelector = 'button:not([type]),button[type=submit],input[type=submit]';\n\t\tif (match(globals.document.activeElement, buttonSelector)) {\n\t\t\tevent.capturedFormButtonElement = globals.document.activeElement;\n\t\t} else {\n\t\t\tevent.capturedFormButtonElement = form.querySelector(buttonSelector);\n\t\t}\n\t\tthis.maybeNavigate_(form.action, event);\n\t}\n\n\t/**\n\t * Listens to the window's load event in order to avoid issues with some browsers\n\t * that trigger popstate calls on the first load. For more information see\n\t * http://stackoverflow.com/questions/6421769/popstate-on-pages-load-in-chrome.\n\t * @protected\n\t */\n\tonLoad_() {\n\t\tthis.skipLoadPopstate = true;\n\t\tsetTimeout(() => {\n\t\t\t// The timeout ensures that popstate events will be unblocked right\n\t\t\t// after the load event occured, but not in the same event-loop cycle.\n\t\t\tthis.skipLoadPopstate = false;\n\t\t}, 0);\n\t\t// Try to reposition scroll to the hashed anchor when page loads.\n\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t}\n\n\t/**\n\t * Handles browser history changes and fires app's navigation if the state\n\t * belows to us. If we detect a popstate and the state is <code>null</code>,\n\t * assume it is navigating to an external page or to a page we don't have\n\t * route, then <code>globals.window.location.reload()</code> is invoked in order to\n\t * reload the content to the current url.\n\t * @param {!Event} event Event facade\n\t * @protected\n\t */\n\tonPopstate_(event) {\n\t\tif (this.skipLoadPopstate) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not navigate if the popstate was triggered by a hash change.\n\t\tif (utils.isCurrentBrowserPath(this.browserPathBeforeNavigate)) {\n\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\treturn;\n\t\t}\n\n\t\tvar state = event.state;\n\n\t\tif (!state) {\n\t\t\tif (globals.window.location.hash) {\n\t\t\t\t// If senna is on an redirect path and a hash popstate happens\n\t\t\t\t// to a different url, reload the browser. This behavior doesn't\n\t\t\t\t// require senna to route hashed links and is closer to native\n\t\t\t\t// browser behavior.\n\t\t\t\tif (this.redirectPath && !utils.isCurrentBrowserPath(this.redirectPath)) {\n\t\t\t\t\tthis.reloadPage();\n\t\t\t\t}\n\t\t\t\t// Always try to reposition scroll to the hashed anchor when\n\t\t\t\t// hash popstate happens.\n\t\t\t\tthis.maybeRepositionScrollToHashedAnchor();\n\t\t\t} else {\n\t\t\t\tthis.reloadPage();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (state.senna) {\n\t\t\tconsole.log('History navigation to [' + state.path + ']');\n\t\t\tthis.popstateScrollTop = state.scrollTop;\n\t\t\tthis.popstateScrollLeft = state.scrollLeft;\n\t\t\tif (!this.nativeScrollRestorationSupported) {\n\t\t\t\tthis.lockHistoryScrollPosition_();\n\t\t\t}\n\t\t\tthis.once('endNavigate', () => {\n\t\t\t\tif (state.referrer) {\n\t\t\t\t\tutils.setReferrer(state.referrer);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst uri = new Uri(state.path);\n\t\t\turi.setHostname(globals.window.location.hostname);\n\t\t\turi.setPort(globals.window.location.port);\n\t\t\tconst isNavigationScheduled = this.maybeScheduleNavigation_(uri.toString(), {});\n\t\t\tif (isNavigationScheduled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.navigate(state.path, true);\n\t\t}\n\t}\n\n\t/**\n\t * Listens document scroll changes in order to capture the possible lock\n\t * scroll position for history scrolling.\n\t * @protected\n\t */\n\tonScroll_() {\n\t\tif (this.captureScrollPositionFromScrollEvent) {\n\t\t\tthis.saveHistoryCurrentPageScrollPosition_(globals.window.pageYOffset, globals.window.pageXOffset);\n\t\t}\n\t}\n\n\t/**\n\t * Starts navigation to a path.\n\t * @param {!Event} event Event facade containing <code>path</code> and\n\t *     <code>replaceHistory</code>.\n\t * @protected\n\t */\n\tonStartNavigate_(event) {\n\t\tthis.maybeDisableNativeScrollRestoration();\n\t\tthis.captureScrollPositionFromScrollEvent = false;\n\t\taddClasses(globals.document.documentElement, this.loadingCssClass);\n\n\t\tvar endNavigatePayload = {\n\t\t\tform: event.form,\n\t\t\tpath: event.path\n\t\t};\n\n\t\tconst finalize = (endNavigatePayload) => {\n\t\t\tif (!this.pendingNavigate && !this.scheduledNavigationQueue.length) {\n\t\t\t\tremoveClasses(globals.document.documentElement, this.loadingCssClass);\n\t\t\t\tthis.maybeRestoreNativeScrollRestoration();\n\t\t\t\tthis.captureScrollPositionFromScrollEvent = true;\n\t\t\t}\n\t\t\tthis.emit('endNavigate', endNavigatePayload);\n\t\t};\n\n\t\tthis.pendingNavigate = this.doNavigate_(event.path, event.replaceHistory)\n\t\t\t.then(() => {\n\t\t\t\tfinalize(endNavigatePayload);\n\t\t\t})\n\t\t\t.catch((reason) => {\n\t\t\t\tfinalize(endNavigatePayload);\n\t\t\t\tendNavigatePayload.error = reason;\n\t\t\t\tthrow reason;\n\t\t\t});\n\n\t\tthis.pendingNavigate.path = event.path;\n\t}\n\n\t/**\n\t * Prefetches the specified path if there is a route handler that matches.\n\t * @param {!string} path Path to navigate containing the base path.\n\t * @return {Promise} Returns a pending request promise.\n\t */\n\tprefetch(path) {\n\t\tvar route = this.findRoute(path);\n\t\tif (!route) {\n\t\t\treturn Promise.reject(new Error('No route for ' + path));\n\t\t}\n\n\t\tconsole.log('Prefetching [' + path + ']');\n\n\t\tvar nextScreen = this.createScreenInstance(path, route);\n\n\t\treturn nextScreen.load(path)\n\t\t\t.then(() => this.screens[path] = nextScreen)\n\t\t\t.catch((reason) => {\n\t\t\t\tthis.handleNavigateError_(path, nextScreen, reason);\n\t\t\t\tthrow reason;\n\t\t\t});\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!Screen} nextScreen\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t */\n\tprepareNavigateHistory_(path, nextScreen, opt_replaceHistory) {\n\t\tlet title = nextScreen.getTitle();\n\t\tif (!isString(title)) {\n\t\t\ttitle = this.getDefaultTitle();\n\t\t}\n\t\tlet redirectPath = nextScreen.beforeUpdateHistoryPath(path);\n\t\tconst historyState = {\n\t\t\tform: isDefAndNotNull(globals.capturedFormElement),\n\t\t\tpath,\n\t\t\tredirectPath,\n\t\t\tscrollLeft: 0,\n\t\t\tscrollTop: 0,\n\t\t\tsenna: true\n\t\t};\n\t\tif (opt_replaceHistory) {\n\t\t\thistoryState.scrollTop = this.popstateScrollTop;\n\t\t\thistoryState.scrollLeft = this.popstateScrollLeft;\n\t\t}\n\t\tconst hash = new Uri(path).getHash();\n\t\tredirectPath = this.maybeRestoreRedirectPathHash_(path, redirectPath, hash);\n\t\tthis.updateHistory_(title, redirectPath, nextScreen.beforeUpdateHistoryState(historyState), opt_replaceHistory);\n\t\tthis.redirectPath = redirectPath;\n\t}\n\n\t/**\n\t * Prepares screen flip. Updates history state and surfaces content.\n\t * @param {!Screen} nextScreen\n\t * @param {!Object} surfaces Map of surfaces to flip keyed by surface id.\n\t * @param {!Object} params Params extracted from the current path.\n\t */\n\tprepareNavigateSurfaces_(nextScreen, surfaces, params) {\n\t\tObject.keys(surfaces).forEach((id) => {\n\t\t\tvar surfaceContent = nextScreen.getSurfaceContent(id, params);\n\t\t\tsurfaces[id].addContent(nextScreen.getId(), surfaceContent);\n\t\t\tconsole.log('Screen [' + nextScreen.getId() + '] add content to surface ' +\n\t\t\t\t'[' + surfaces[id] + '] [' + (isDefAndNotNull(surfaceContent) ? '...' : 'empty') + ']');\n\t\t});\n\t}\n\n\t/**\n\t * Reloads the page by performing `window.location.reload()`.\n\t */\n\treloadPage() {\n\t\tglobals.window.location.reload();\n\t}\n\n\t/**\n\t * Removes route instance from app routes.\n\t * @param {Route} route\n\t * @return {boolean} True if an element was removed.\n\t */\n\tremoveRoute(route) {\n\t\treturn array.remove(this.routes, route);\n\t}\n\n\t/**\n\t * Removes a screen.\n\t * @param {!string} path Path containing the querystring part.\n\t */\n\tremoveScreen(path) {\n\t\tvar screen = this.screens[path];\n\t\tif (screen) {\n\t\t\tObject.keys(this.surfaces).forEach((surfaceId) => this.surfaces[surfaceId].remove(screen.getId()));\n\t\t\tscreen.dispose();\n\t\t\tdelete this.screens[path];\n\t\t}\n\t}\n\n\t/**\n\t * Saves given scroll position into history state.\n\t * @param {!number} scrollTop Number containing the top scroll position to be saved.\n\t * @param {!number} scrollLeft Number containing the left scroll position to be saved.\n\t */\n\tsaveHistoryCurrentPageScrollPosition_(scrollTop, scrollLeft) {\n\t\tvar state = globals.window.history.state;\n\t\tif (state && state.senna) {\n\t\t\t[state.scrollTop, state.scrollLeft] = [scrollTop, scrollLeft];\n\t\t\tglobals.window.history.replaceState(state, null, null);\n\t\t}\n\t}\n\n\t/**\n\t * Sets allow prevent navigate.\n\t * @param {boolean} allowPreventNavigate\n\t */\n\tsetAllowPreventNavigate(allowPreventNavigate) {\n\t\tthis.allowPreventNavigate = allowPreventNavigate;\n\t}\n\n\t/**\n\t * Sets link base path.\n\t * @param {!string} path\n\t */\n\tsetBasePath(basePath) {\n\t\tthis.basePath = utils.removePathTrailingSlash(basePath);\n\t}\n\n\t/**\n\t * Sets the default page title.\n\t * @param {string} defaultTitle\n\t */\n\tsetDefaultTitle(defaultTitle) {\n\t\tthis.defaultTitle = defaultTitle;\n\t}\n\n\t/**\n\t * Sets the form selector.\n\t * @param {!string} formSelector\n\t */\n\tsetFormSelector(formSelector) {\n\t\tthis.formSelector = formSelector;\n\t\tif (this.formEventHandler_) {\n\t\t\tthis.formEventHandler_.removeListener();\n\t\t}\n\t\tthis.formEventHandler_ = delegate(document, 'submit', this.formSelector, this.onDocSubmitDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets if route matching should ignore query string from the route path.\n\t * @param {boolean} ignoreQueryStringFromRoutePath\n\t */\n\tsetIgnoreQueryStringFromRoutePath(ignoreQueryStringFromRoutePath) {\n\t\tthis.ignoreQueryStringFromRoutePath = ignoreQueryStringFromRoutePath;\n\t}\n\n\t/**\n\t * Sets the link selector.\n\t * @param {!string} linkSelector\n\t */\n\tsetLinkSelector(linkSelector) {\n\t\tthis.linkSelector = linkSelector;\n\t\tif (this.linkEventHandler_) {\n\t\t\tthis.linkEventHandler_.removeListener();\n\t\t}\n\t\tthis.linkEventHandler_ = delegate(document, 'click', this.linkSelector, this.onDocClickDelegate_.bind(this), this.allowPreventNavigate);\n\t}\n\n\t/**\n\t * Sets the loading css class.\n\t * @param {!string} loadingCssClass\n\t */\n\tsetLoadingCssClass(loadingCssClass) {\n\t\tthis.loadingCssClass = loadingCssClass;\n\t}\n\n\t/**\n\t * Sets the update scroll position value.\n\t * @param {boolean} updateScrollPosition\n\t */\n\tsetUpdateScrollPosition(updateScrollPosition) {\n\t\tthis.updateScrollPosition = updateScrollPosition;\n\t}\n\n\t/**\n\t * Resets pending navigate.\n\t * @protected\n\t */\n\tstopPendingNavigate_() {\n\t\tthis.pendingNavigate = null;\n\t}\n\n\t/**\n\t * Sync document scroll position twice, the first one synchronous and then\n\t * one inside <code>async.nextTick</code>. Relevant to browsers that fires\n\t * scroll restoration asynchronously after popstate.\n\t * @protected\n\t * @return {?Promise=}\n\t */\n\tsyncScrollPositionSyncThenAsync_() {\n\t\tvar state = globals.window.history.state;\n\t\tif (!state) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar scrollTop = state.scrollTop;\n\t\tvar scrollLeft = state.scrollLeft;\n\n\t\tvar sync = () => {\n\t\t\tif (this.updateScrollPosition) {\n\t\t\t\tglobals.window.scrollTo(scrollLeft, scrollTop);\n\t\t\t}\n\t\t};\n\n\t\treturn new Promise(resolve => {\n\t\t\tsync();\n\t\t\tsetTimeout(() => {\n\t\t\t\tsync();\n\t\t\t\tresolve();\n\t\t\t}, 0);\n\t\t});\n\t}\n\n\t/**\n\t * Updates or replace browser history.\n\t * @param {?string} title Document title.\n\t * @param {!string} path Path containing the querystring part.\n\t * @param {!object} state\n\t * @param {boolean=} opt_replaceHistory Replaces browser history.\n\t * @protected\n\t */\n\tupdateHistory_(title, path, state, opt_replaceHistory) {\n\t\tconst referrer = globals.window.location.href;\n\n\t\tif (state) {\n\t\t\tstate.referrer = referrer;\n\t\t}\n\n\t\tif (opt_replaceHistory) {\n\t\t\tglobals.window.history.replaceState(state, title, path);\n\t\t} else {\n\t\t\tglobals.window.history.pushState(state, title, path);\n\t\t}\n\n\t\tutils.setReferrer(referrer);\n\n\t\tlet titleNode = globals.document.querySelector('title');\n\t\tif (titleNode) {\n\t\t\ttitleNode.innerHTML = title;\n\t\t} else {\n\t\t\tglobals.document.title = title;\n\t\t}\n\t}\n\n}\n\nexport default App;\n","'use strict';\n\n/**\n * Holds value error messages.\n * @const\n */\nclass errors {\n}\n\n/**\n * Type error message.\n * Usually thrown when CORS error happen with fetch.\n * @type {string}\n * @static\n */\nerrors.FAILED_TO_FETCH = 'Failed to fetch';\n\n/**\n * Invalid status error message.\n * @type {string}\n * @static\n */\nerrors.INVALID_STATUS = 'Invalid status code';\n\n/**\n * Request error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_ERROR = 'Request error';\n\n/**\n * Request timeout error message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_TIMEOUT = 'Request timeout';\n\n/**\n * Request is blocked by CORS issue message.\n * @type {string}\n * @static\n */\nerrors.REQUEST_PREMATURE_TERMINATION = 'Request terminated prematurely';\n\nexport default errors;\n","'use strict';\n\nimport { isDefAndNotNull } from 'metal';\nimport errors from '../errors/errors';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Screen from './Screen';\nimport Uri from 'metal-uri';\n\nclass RequestScreen extends Screen {\n\n\t/**\n\t * Request screen abstract class to perform io operations on descendant\n\t * screens.\n\t * @constructor\n\t * @extends {Screen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t * @default true\n\t\t */\n\t\tthis.cacheable = true;\n\n\t\t/**\n\t\t * Holds default http headers to set on request.\n\t\t * @type {?Object=}\n\t\t * @default {\n\t\t *   'X-PJAX': 'true',\n\t\t *   'X-Requested-With': 'XMLHttpRequest'\n\t\t * }\n\t\t * @protected\n\t\t */\n\t\tthis.httpHeaders = {\n\t\t\t'X-PJAX': 'true',\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t};\n\n\t\t/**\n\t\t * Holds default http method to perform the request.\n\t\t * @type {!string}\n\t\t * @default RequestScreen.GET\n\t\t * @protected\n\t\t */\n\t\tthis.httpMethod = RequestScreen.GET;\n\n\t\t/**\n\t\t * Holds the XHR object responsible for the request.\n\t\t * @type {XMLHttpRequest}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.request = null;\n\n\t\t/**\n\t\t * Holds the request timeout in milliseconds.\n\t\t * @type {!number}\n\t\t * @default 30000\n\t\t * @protected\n\t\t */\n\t\tthis.timeout = 30000;\n\t}\n\n\t/**\n\t * Asserts that response status code is valid.\n\t * @param {number} status\n\t * @protected\n\t */\n\tassertValidResponseStatusCode(status) {\n\t\tif (!this.isValidResponseStatusCode(status)) {\n\t\t\tvar error = new Error(errors.INVALID_STATUS);\n\t\t\terror.invalidStatus = true;\n\t\t\terror.statusCode = status;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\tvar redirectPath = this.getRequestPath();\n\t\tif (redirectPath && redirectPath !== path) {\n\t\t\treturn redirectPath;\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\t// If state is ours and navigate to post-without-redirect-get set\n\t\t// history state to null, that way Senna will reload the page on\n\t\t// popstate since it cannot predict post data.\n\t\tif (state.senna && state.form && state.redirectPath === state.path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Formats load path before invoking ajax call.\n\t * @param {string} path\n\t * @return {string} Formatted path;\n\t * @protected\n\t */\n\tformatLoadPath(path) {\n\t\tvar uri = new Uri(path);\n\n\t\turi.setHostname(globals.window.location.hostname);\n\t\turi.setProtocol(globals.window.location.protocol);\n\n\t\tif (globals.window.location.port) {\n\t\t\turi.setPort(globals.window.location.port);\n\t\t}\n\n\t\tif (utils.isIeOrEdge() && this.httpMethod === RequestScreen.GET) {\n\t\t\treturn uri.makeUnique().toString();\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets the http headers.\n\t * @return {?Object=}\n\t */\n\tgetHttpHeaders() {\n\t\treturn this.httpHeaders;\n\t}\n\n\t/**\n\t * Gets the http method.\n\t * @return {!string}\n\t */\n\tgetHttpMethod() {\n\t\treturn this.httpMethod;\n\t}\n\n\t/**\n\t * Gets request path.\n\t * @return {string=}\n\t */\n\tgetRequestPath() {\n\t\tvar request = this.getRequest();\n\t\tif (request) {\n\t\t\tvar requestPath = request.url;\n\t\t\tvar responseUrl = this.maybeExtractResponseUrlFromRequest(request);\n\t\t\tif (responseUrl) {\n\t\t\t\trequestPath = responseUrl;\n\t\t\t}\n\t\t\tif (utils.isIeOrEdge() && this.httpMethod === RequestScreen.GET) {\n\t\t\t\trequestPath = new Uri(requestPath).removeUnique().toString();\n\t\t\t}\n\t\t\treturn utils.getUrlPath(requestPath);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the request object.\n\t * @return {?Object}\n\t */\n\tgetRequest() {\n\t\treturn this.request;\n\t}\n\n\t/**\n\t * Gets the request timeout.\n\t * @return {!number}\n\t */\n\tgetTimeout() {\n\t\treturn this.timeout;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered\n\t * valid.\n\t * @param {number} statusCode\n\t */\n\tisValidResponseStatusCode(statusCode) {\n\t\treturn statusCode >= 200 && statusCode <= 399;\n\t}\n\n  /**\n   * Returns the form data\n   * This method can be extended in order to have a custom implementation of the form params\n   * @param {!Element} formElement\n   * @param {!Element} submittedButtonElement\n   * @return {!FormData}\n   */\n\tgetFormData(formElement, submittedButtonElement) {\n    let formData = new FormData(formElement);\n    this.maybeAppendSubmitButtonValue_(formData, submittedButtonElement);\n    return formData;\n  }\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\tconst cache = this.getCache();\n\t\tif (isDefAndNotNull(cache)) {\n\t\t\treturn Promise.resolve(cache);\n\t\t}\n\t\tlet body = null;\n\t\tlet httpMethod = this.httpMethod;\n\n\t\tconst headers = new Headers();\n\n\t\tObject.keys(this.httpHeaders).forEach(header => {\n\t\t\theaders.set(header, this.httpHeaders[header]);\n\t\t});\n\n\t\tif (globals.capturedFormElement) {\n\t\t\tthis.addSafariXHRPolyfill();\n\t\t\tbody = this.getFormData(globals.capturedFormElement, globals.capturedFormButtonElement);\n\t\t\thttpMethod = RequestScreen.POST;\n\t\t\tif (utils.isIeOrEdge()) {\n\t\t\t\theaders.append('If-None-Match', '\"0\"');\n\t\t\t}\n\t\t}\n\n\t\tconst requestPath = this.formatLoadPath(path);\n\n\t\tconst request = new Request(requestPath, {\n\t\t\tbody: body,\n\t\t\tcredentials: 'include',\n\t\t\theaders: headers,\n\t\t\tmethod: httpMethod,\n\t\t\tmode: 'cors',\n\t\t\tredirect: 'follow'\n\t\t});\n\n\t\tthis.setRequest(request);\n\n\t\treturn Promise.race([\n\t\t\tfetch(request)\n\t\t\t\t.then(resp => {\n\t\t\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\t\t\tthis.assertValidResponseStatusCode(resp.status);\n\n\t\t\t\t\treturn resp.clone().text();\n\t\t\t\t})\n\t\t\t\t.then(text => {\n\t\t\t\t\tif (httpMethod === RequestScreen.GET && this.isCacheable()) {\n\t\t\t\t\t\tthis.addCache(text);\n\t\t\t\t\t}\n\t\t\t\t\treturn text;\n\t\t\t\t}),\n\t\t\tnew Promise((_, reject) => {\n\t\t\t\tsetTimeout(() => reject(new Error(errors.REQUEST_TIMEOUT)) , this.timeout);\n\t\t\t})\n\t\t]).catch((reason) => {\n\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\tswitch (reason.message) {\n\t\t\t\tcase errors.REQUEST_TIMEOUT:\n\t\t\t\t\treason.timeout = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase errors.REQUEST_ERROR:\n\t\t\t\t\treason.requestError = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase errors.FAILED_TO_FETCH:\n\t\t\t\tcase errors.REQUEST_PREMATURE_TERMINATION:\n\t\t\t\t\treason.requestError = true;\n\t\t\t\t\treason.requestPrematureTermination = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthrow reason;\n\t\t});\n\t}\n\n\t/**\n\t * Adds aditional data to the body of the request in case a submit button\n\t * is captured during form submission.\n\t * @param {!FormData} body The FormData containing the request body.\n   * @param {!Element} submittedButtonElement\n   * @protected\n\t */\n\tmaybeAppendSubmitButtonValue_(formData, submittedButtonElement) {\n\t\tif (submittedButtonElement && submittedButtonElement.name) {\n      formData.append(submittedButtonElement.name, submittedButtonElement.value);\n\t\t}\n\t}\n\n\t/**\n\t * The following method tries to extract the response url value by checking\n\t * the custom response header 'X-Request-URL' if proper value is not present\n\t * in XMLHttpRequest. The value of responseURL will be the final URL\n\t * obtained after any redirects. Internet Explorer, Edge and Safari <= 7\n\t * does not yet support the feature. For more information see:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n\t * https://xhr.spec.whatwg.org/#the-responseurl-attribute\n\t * @param {XMLHttpRequest} request\n\t * @return {?string} Response url best match.\n\t */\n\tmaybeExtractResponseUrlFromRequest(request) {\n\t\treturn request.headers.get(RequestScreen.X_REQUEST_URL_HEADER);\n\t}\n\n\t/**\n\t * This function sets attribute data-safari-temp-disabled to\n\t * true and sets disable attribute of an input type=\"file\" tag\n\t * is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1\n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\taddSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && utils.isSafari()) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"]:not([disabled])');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tlet input = inputs[index];\n\t\t\t\tif (input.files.length > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinput.setAttribute('data-safari-temp-disabled', 'true');\n\t\t\t\tinput.setAttribute('disabled', '');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function remove attribute data-safari-temp-disabled and disable attribute\n\t * of an input type=\"file\" tag is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1\n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\tremoveSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && utils.isSafari()) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"][data-safari-temp-disabled]');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tconst input = inputs[index];\n\t\t\t\tinput.removeAttribute('data-safari-temp-disabled');\n\t\t\t\tinput.removeAttribute('disabled');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the http headers.\n\t * @param {?Object=} httpHeaders\n\t */\n\tsetHttpHeaders(httpHeaders) {\n\t\tthis.httpHeaders = httpHeaders;\n\t}\n\n\t/**\n\t * Sets the http method.\n\t * @param {!string} httpMethod\n\t */\n\tsetHttpMethod(httpMethod) {\n\t\tthis.httpMethod = httpMethod.toLowerCase();\n\t}\n\n\t/**\n\t * Sets the request object.\n\t * @param {?Object} request\n\t */\n\tsetRequest(request) {\n\t\tthis.request = request;\n\t}\n\n\t/**\n\t * Sets the request timeout in milliseconds.\n\t * @param {!number} timeout\n\t */\n\tsetTimeout(timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n}\n\n/**\n * Holds value for method get.\n * @type {string}\n * @default 'get'\n * @static\n */\nRequestScreen.GET = 'get';\n\n/**\n * Holds value for method post.\n * @type {string}\n * @default 'post'\n * @static\n */\nRequestScreen.POST = 'post';\n\n/**\n * Fallback http header to retrieve response request url.\n * @type {string}\n * @default 'X-Request-URL'\n * @static\n */\nRequestScreen.X_REQUEST_URL_HEADER = 'X-Request-URL';\n\nexport default RequestScreen;\n","'use strict';\n\nimport { getUid } from 'metal';\nimport { buildFragment, globalEval, globalEvalStyles, match } from 'metal-dom';\nimport globals from '../globals/globals';\nimport RequestScreen from './RequestScreen';\nimport Surface from '../surface/Surface';\nimport Uri from 'metal-uri';\nimport utils from '../utils/utils';\n\nclass HtmlScreen extends RequestScreen {\n\n\t/**\n\t * Screen class that perform a request and extracts surface contents from\n\t * the response content.\n\t * @constructor\n\t * @extends {RequestScreen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the meta selector. Relevant to extract <code>meta</code> tags\n\t\t * elements from request fragments to use as the screen.\n\t\t * @type {!string}\n\t\t * @default meta\n\t\t * @protected\n\t\t */\n\t\tthis.metaTagsSelector = 'meta';\n\n\t\t/**\n\t\t * Holds the title selector. Relevant to extract the <code><title></code>\n\t\t * element from request fragments to use as the screen title.\n\t\t * @type {!string}\n\t\t * @default title\n\t\t * @protected\n\t\t */\n\t\tthis.titleSelector = 'title';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tactivate() {\n\t\tsuper.activate();\n\t\tthis.releaseVirtualDocument();\n\t\tthis.pendingStyles = null;\n\t}\n\n\t/**\n\t * Allocates virtual document for content. After allocated virtual document\n\t * can be accessed by <code>this.virtualDocument</code>.\n\t * @param {!string} htmlString\n\t */\n\tallocateVirtualDocumentForContent(htmlString) {\n\t\tif (!this.virtualDocument) {\n\t\t\tthis.virtualDocument = globals.document.createElement('html');\n\t\t}\n\n\t\tthis.copyNodeAttributesFromContent_(htmlString, this.virtualDocument);\n\n\t\tthis.virtualDocument.innerHTML = htmlString;\n\t}\n\n\t/**\n\t * Customizes logic to append styles into document. Relevant to when\n\t * tracking a style by id make sure to re-positions the new style in the\n\t * same dom order.\n\t * @param {Element} newStyle\n\t */\n\tappendStyleIntoDocument_(newStyle) {\n\t\tvar isTemporaryStyle = match(newStyle, HtmlScreen.selectors.stylesTemporary);\n\t\tif (isTemporaryStyle) {\n\t\t\tthis.pendingStyles.push(newStyle);\n\t\t}\n\t\tif (newStyle.id) {\n\t\t\tvar styleInDoc = globals.document.getElementById(newStyle.id);\n\t\t\tif (styleInDoc) {\n\t\t\t\tstyleInDoc.parentNode.insertBefore(newStyle, styleInDoc.nextSibling);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tglobals.document.head.appendChild(newStyle);\n\t}\n\n\t/**\n\t * If body is used as surface forces the requested documents to have same id\n\t * of the initial page.\n\t */\n\tassertSameBodyIdInVirtualDocument() {\n\t\tvar bodySurface = this.virtualDocument.querySelector('body');\n\t\tif (!globals.document.body.id) {\n\t\t\tglobals.document.body.id = 'senna_surface_' + getUid();\n\t\t}\n\t\tif (bodySurface) {\n\t\t\tbodySurface.id = globals.document.body.id;\n\t\t}\n\t}\n\n\t/**\n\t * Copies attributes from the <html> tag of content to the given node.\n\t */\n\tcopyNodeAttributesFromContent_(content, node) {\n\t\tcontent = content.replace(/[<]\\s*html/ig, '<senna');\n\t\tcontent = content.replace(/\\/html\\s*\\>/ig, '/senna>');\n\t\tlet placeholder;\n\t\tif (utils.isIe()) {\n\t\t\tconst tempNode = globals.document.createRange().createContextualFragment(content);\n\t\t\tplaceholder = tempNode.querySelector('senna');\n\t\t} else {\n\t\t\tnode.innerHTML = content;\n\t\t\tplaceholder = node.querySelector('senna');\n\t\t}\n\n\t\tif (placeholder) {\n\t\t\tutils.clearNodeAttributes(node);\n\t\t\tutils.copyNodeAttributes(placeholder, node);\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tdisposeInternal() {\n\t\tthis.disposePendingStyles();\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Disposes pending styles if screen get disposed prior to its loading.\n\t */\n\tdisposePendingStyles() {\n\t\tif (this.pendingStyles) {\n\t\t\tutils.removeElementsFromDocument(this.pendingStyles);\n\t\t}\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateScripts(surfaces) {\n\t\tvar evaluateTrackedScripts = this.evaluateTrackedResources_(\n\t\t\tglobalEval.runScriptsInElement, HtmlScreen.selectors.scripts,\n\t\t\tHtmlScreen.selectors.scriptsTemporary, HtmlScreen.selectors.scriptsPermanent);\n\n\t\treturn evaluateTrackedScripts.then(() => super.evaluateScripts(surfaces));\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tevaluateStyles(surfaces) {\n\t\tthis.pendingStyles = [];\n\t\tvar evaluateTrackedStyles = this.evaluateTrackedResources_(\n\t\t\tglobalEvalStyles.runStylesInElement, HtmlScreen.selectors.styles,\n\t\t\tHtmlScreen.selectors.stylesTemporary, HtmlScreen.selectors.stylesPermanent,\n\t\t\tthis.appendStyleIntoDocument_.bind(this));\n\n\t\treturn evaluateTrackedStyles.then(() => super.evaluateStyles(surfaces));\n\t}\n\n\t/**\n\t * Allows a screen to evaluate the favicon style before the screen becomes visible.\n\t * @return {Promise}\n\t */\n\tevaluateFavicon_() {\n\t\tconst resourcesInVirtual = this.virtualQuerySelectorAll_(HtmlScreen.selectors.favicon);\n\t\tconst resourcesInDocument = this.querySelectorAll_(HtmlScreen.selectors.favicon);\n\n\t\treturn new Promise((resolve) => {\n\t\t\tutils.removeElementsFromDocument(resourcesInDocument);\n\t\t\tthis.runFaviconInElement_(resourcesInVirtual).then(() => resolve());\n\t\t});\n\t}\n\n\t/**\n\t * Evaluates tracked resources inside incoming fragment and remove existing\n\t * temporary resources.\n\t * @param {?function()} appendFn Function to append the node into document.\n\t * @param {!string} selector Selector used to find resources to track.\n\t * @param {!string} selectorTemporary Selector used to find temporary\n\t *     resources to track.\n\t * @param {!string} selectorPermanent Selector used to find permanent\n\t *     resources to track.\n\t * @param {!function} opt_appendResourceFn Optional function used to\n\t *     evaluate fragment containing resources.\n\t * @return {Promise} Deferred that waits resources evaluation to\n\t *     complete.\n\t * @private\n\t */\n\tevaluateTrackedResources_(evaluatorFn, selector, selectorTemporary, selectorPermanent, opt_appendResourceFn) {\n\t\tvar tracked = this.virtualQuerySelectorAll_(selector);\n\t\tvar temporariesInDoc = this.querySelectorAll_(selectorTemporary);\n\t\tvar permanentsInDoc = this.querySelectorAll_(selectorPermanent);\n\n\t\t// Adds permanent resources in document to cache.\n\t\tpermanentsInDoc.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\tif (resourceKey) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\tvar frag = buildFragment();\n\t\ttracked.forEach((resource) => {\n\t\t\tvar resourceKey = this.getResourceKey_(resource);\n\t\t\t// Do not load permanent resources if already in document.\n\t\t\tif (!HtmlScreen.permanentResourcesInDoc[resourceKey]) {\n\t\t\t\tfrag.appendChild(resource);\n\t\t\t}\n\t\t\t// If resource has key and is permanent add to cache.\n\t\t\tif (resourceKey && match(resource, selectorPermanent)) {\n\t\t\t\tHtmlScreen.permanentResourcesInDoc[resourceKey] = true;\n\t\t\t}\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tevaluatorFn(frag, () => {\n\t\t\t\tutils.removeElementsFromDocument(temporariesInDoc);\n\t\t\t\tresolve();\n\t\t\t}, opt_appendResourceFn);\n\t\t});\n\t}\n\n\t/**\n\t * @Override\n\t */\n\tflip(surfaces) {\n\t\treturn super.flip(surfaces).then(() => {\n\t\t\tutils.clearNodeAttributes(globals.document.documentElement);\n\t\t\tutils.copyNodeAttributes(this.virtualDocument, globals.document.documentElement);\n\t\t\tthis.evaluateFavicon_();\n\t\t\tthis.updateMetaTags_();\n\t\t});\n\t}\n\n\tupdateMetaTags_() {\n\t\tconst currentMetaNodes = this.querySelectorAll_('meta');\n\t\tconst metasFromVirtualDocument = this.metas;\n\t\tif (currentMetaNodes) {\n\t\t\tutils.removeElementsFromDocument(currentMetaNodes);\n\t\t\tif (metasFromVirtualDocument) {\n\t\t\t\tmetasFromVirtualDocument.forEach((meta) => globals.document.head.appendChild(meta));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Extracts a key to identify the resource based on its attributes.\n\t * @param {Element} resource\n\t * @return {string} Extracted key based on resource attributes in order of\n\t *     preference: id, href, src.\n\t */\n\tgetResourceKey_(resource) {\n\t\treturn resource.id || resource.href || resource.src || '';\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tgetSurfaceContent(surfaceId) {\n\t\tvar surface = this.virtualDocument.querySelector('#' + surfaceId);\n\t\tif (surface) {\n\t\t\tvar defaultChild = surface.querySelector('#' + surfaceId + '-' + Surface.DEFAULT);\n\t\t\tif (defaultChild) {\n\t\t\t\treturn defaultChild.innerHTML;\n\t\t\t}\n\t\t\treturn surface.innerHTML; // If default content not found, use surface content\n\t\t}\n\t}\n\n\t/**\n\t * Gets the title selector.\n\t * @return {!string}\n\t */\n\tgetTitleSelector() {\n\t\treturn this.titleSelector;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\treturn super.load(path)\n\t\t\t.then(content => {\n\t\t\t\tthis.allocateVirtualDocumentForContent(content);\n\t\t\t\tthis.resolveTitleFromVirtualDocument();\n\t\t\t\tthis.resolveMetaTagsFromVirtualDocument();\n\t\t\t\tthis.assertSameBodyIdInVirtualDocument();\n\t\t\t\tif (utils.isIe()) {\n\t\t\t\t\tthis.makeTemporaryStylesHrefsUnique_();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t});\n\t}\n\n\t/**\n\t * Queries temporary styles from virtual document, and makes them unique.\n\t * This is necessary for caching and load event firing issues specific to\n\t * IE11. https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7940171/\n\t */\n\tmakeTemporaryStylesHrefsUnique_() {\n\t\tvar temporariesInDoc = this.virtualQuerySelectorAll_(HtmlScreen.selectors.stylesTemporary);\n\t\ttemporariesInDoc.forEach((style) => this.replaceStyleAndMakeUnique_(style));\n\t}\n\n\t/**\n\t * Creates a new element from given, copies attributes, mutates href to be\n\t * unique to prevent caching and more than one load/error event from firing.\n\t */\n\treplaceStyleAndMakeUnique_(style) {\n\t\tif (style.href) {\n\t\t\tvar newStyle = globals.document.createElement(style.tagName);\n\t\t\tstyle.href = new Uri(style.href).makeUnique().toString();\n\t\t\tutils.copyNodeAttributes(style, newStyle);\n\t\t\tstyle.parentNode.replaceChild(newStyle, style);\n\t\t\tstyle.disabled = true;\n\t\t}\n\t}\n\n\t/**\n\t * Adds the favicon elements to the document.\n\t * @param {!Array<Element>} elements\n\t * @private\n\t * @return {Promise}\n\t */\n\trunFaviconInElement_(elements) {\n\t\treturn new Promise((resolve) => {\n\t\t\telements.forEach((element) => document.head.appendChild(\n\t\t\t\tutils.isIe() ? element : utils.setElementWithRandomHref(element)\n\t\t\t));\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t/**\n\t * Queries elements from virtual document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tvirtualQuerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(this.virtualDocument.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAll_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Releases virtual document allocated for content.\n\t */\n\treleaseVirtualDocument() {\n\t\tthis.virtualDocument = null;\n\t}\n\n\t/**\n\t * Resolves title from allocated virtual document.\n\t */\n\tresolveTitleFromVirtualDocument() {\n\t\tconst title = this.virtualDocument.querySelector(this.titleSelector);\n\t\tif (title) {\n\t\t\tthis.setTitle(title.textContent.trim());\n\t\t}\n\t}\n\n\tresolveMetaTagsFromVirtualDocument() {\n\t\tconst metas = this.virtualQuerySelectorAll_(this.metaTagsSelector);\n\t\tif (metas) {\n\t\t\tthis.setMetas(metas);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the title selector.\n\t * @param {!string} titleSelector\n\t */\n\tsetTitleSelector(titleSelector) {\n\t\tthis.titleSelector = titleSelector;\n\t}\n\n}\n\n/**\n * Helper selector for ignore favicon when exist data-senna-track.\n */\nconst ignoreFavicon = ':not([rel=\"Shortcut Icon\"]):not([rel=\"shortcut icon\"]):not([rel=\"icon\"]):not([href$=\"favicon.icon\"])';\n\n/**\n * Helper selectors for tracking resources.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.selectors = {\n\tfavicon: 'link[rel=\"Shortcut Icon\"],link[rel=\"shortcut icon\"],link[rel=\"icon\"],link[href$=\"favicon.icon\"]',\n\tscripts: 'script[data-senna-track]',\n\tscriptsPermanent: 'script[data-senna-track=\"permanent\"]',\n\tscriptsTemporary: 'script[data-senna-track=\"temporary\"]',\n\tstyles: `style[data-senna-track],link[data-senna-track]${ignoreFavicon}`,\n\tstylesPermanent: `style[data-senna-track=\"permanent\"],link[data-senna-track=\"permanent\"]${ignoreFavicon}`,\n\tstylesTemporary: `style[data-senna-track=\"temporary\"],link[data-senna-track=\"temporary\"]${ignoreFavicon}`\n};\n\n/**\n * Caches permanent resource keys.\n * @type {object}\n * @protected\n * @static\n */\nHtmlScreen.permanentResourcesInDoc = {};\n\nexport default HtmlScreen;\n","'use strict';\n\nimport { Disposable, getUid, isDefAndNotNull, isElement, object } from 'metal';\nimport dataAttributes from './dataAttributes';\nimport globals from '../globals/globals';\nimport App from './App';\nimport HtmlScreen from '../screen/HtmlScreen';\nimport Route from '../route/Route';\n\nclass AppDataAttributeHandler extends Disposable {\n\n\t/**\n\t * Initilizes App, register surfaces and routes from data attributes.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * Holds the app reference initialized by data attributes.\n\t\t * @type {App}\n\t\t * @default null\n\t\t */\n\t\tthis.app = null;\n\n\t\t/**\n\t\t * Holds the base element to search initialization data attributes. This\n\t\t * element is the container used to enable initialization based on the\n\t\t * presence of `data-senna` attribute.\n\t\t * @type {Element}\n\t\t * @default null\n\t\t */\n\t\tthis.baseElement = null;\n\t}\n\n\t/**\n\t * Inits application based on information scanned from document.\n\t */\n\thandle() {\n\t\tif (!isElement(this.baseElement)) {\n\t\t\tthrow new Error('Senna data attribute handler base element ' +\n\t\t\t\t'not set or invalid, try setting a valid element that ' +\n\t\t\t\t'contains a `data-senna` attribute.');\n\t\t}\n\n\t\tif (!this.baseElement.hasAttribute(dataAttributes.senna)) {\n\t\t\tconsole.log('Senna was not initialized from data attributes. ' +\n\t\t\t\t'In order to enable its usage from data attributes try setting ' +\n\t\t\t\t'in the base element, e.g. `<body data-senna>`.');\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.app) {\n\t\t\tthrow new Error('Senna app was already initialized.');\n\t\t}\n\n\t\tconsole.log('Senna initialized from data attribute.');\n\n\t\tthis.app = new App();\n\t\tthis.maybeAddRoutes_();\n\t\tthis.maybeAddSurfaces_();\n\t\tthis.maybeSetBasePath_();\n\t\tthis.maybeSetLinkSelector_();\n\t\tthis.maybeSetLoadingCssClass_();\n\t\tthis.maybeSetUpdateScrollPosition_();\n\t\tthis.maybeDispatch_();\n\t}\n\n\t/**\n\t * Disposes of this instance's object references.\n\t * @override\n\t */\n\tdisposeInternal() {\n\t\tif (this.app) {\n\t\t\tthis.app.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the app reference.\n\t * @return {App}\n\t */\n\tgetApp() {\n\t\treturn this.app;\n\t}\n\n\t/**\n\t * Gets the base element.\n\t * @return {Element} baseElement\n\t */\n\tgetBaseElement() {\n\t\treturn this.baseElement;\n\t}\n\n\t/**\n\t * Maybe adds app routes from link elements that are `senna-route`.\n\t */\n\tmaybeAddRoutes_() {\n\t\tvar routesSelector = 'link[rel=\"senna-route\"]';\n\t\tthis.querySelectorAllAsArray_(routesSelector).forEach((link) => this.maybeParseLinkRoute_(link));\n\t\tif (!this.app.hasRoutes()) {\n\t\t\tthis.app.addRoutes(new Route(/.*/, HtmlScreen));\n\t\t\tconsole.log('Senna can\\'t find route elements, adding default.');\n\t\t}\n\t}\n\n\t/**\n\t * Maybe adds app surfaces by scanning `data-senna-surface` data attribute.\n\t */\n\tmaybeAddSurfaces_() {\n\t\tvar surfacesSelector = '[' + dataAttributes.surface + ']';\n\t\tthis.querySelectorAllAsArray_(surfacesSelector).forEach((surfaceElement) => {\n\t\t\tthis.updateElementIdIfSpecialSurface_(surfaceElement);\n\t\t\tthis.app.addSurfaces(surfaceElement.id);\n\t\t});\n\t}\n\n\t/**\n\t * Dispatches app navigation to the current path when initializes.\n\t */\n\tmaybeDispatch_() {\n\t\tif (this.baseElement.hasAttribute(dataAttributes.dispatch)) {\n\t\t\tthis.app.dispatch();\n\t\t}\n\t}\n\n\t/**\n\t * Adds app route by parsing valid link elements. A valid link element is of\n\t * the kind `rel=\"senna-route\"`.\n\t * @param {Element} link\n\t */\n\tmaybeParseLinkRoute_(link) {\n\t\tvar route = new Route(this.maybeParseLinkRoutePath_(link), this.maybeParseLinkRouteHandler_(link));\n\t\tthis.app.addRoutes(route);\n\t\tconsole.log('Senna scanned route ' + route.getPath());\n\t}\n\n\t/**\n\t * Maybe parse link route handler.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRouteHandler_(link) {\n\t\tvar handler = link.getAttribute('type');\n\t\tif (isDefAndNotNull(handler)) {\n\t\t\thandler = object.getObjectByName(handler);\n\t\t}\n\t\treturn handler;\n\t}\n\n\t/**\n\t * Maybe parse link route path.\n\t * @param {Element} link\n\t * @return {?string}\n\t */\n\tmaybeParseLinkRoutePath_(link) {\n\t\tvar path = link.getAttribute('href');\n\t\tif (isDefAndNotNull(path)) {\n\t\t\tif (path.indexOf('regex:') === 0) {\n\t\t\t\tpath = new RegExp(path.substring(6));\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * Maybe sets app base path from `data-senna-base-path` data attribute.\n\t */\n\tmaybeSetBasePath_() {\n\t\tvar basePath = this.baseElement.getAttribute(dataAttributes.basePath);\n\t\tif (isDefAndNotNull(basePath)) {\n\t\t\tthis.app.setBasePath(basePath);\n\t\t\tconsole.log('Senna scanned base path ' + basePath);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link selector from `data-senna-link-selector` data\n\t * attribute.\n\t */\n\tmaybeSetLinkSelector_() {\n\t\tvar linkSelector = this.baseElement.getAttribute(dataAttributes.linkSelector);\n\t\tif (isDefAndNotNull(linkSelector)) {\n\t\t\tthis.app.setLinkSelector(linkSelector);\n\t\t\tconsole.log('Senna scanned link selector ' + linkSelector);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app link loading css class from `data-senna-loading-css-class`\n\t * data attribute.\n\t */\n\tmaybeSetLoadingCssClass_() {\n\t\tvar loadingCssClass = this.baseElement.getAttribute(dataAttributes.loadingCssClass);\n\t\tif (isDefAndNotNull(loadingCssClass)) {\n\t\t\tthis.app.setLoadingCssClass(loadingCssClass);\n\t\t\tconsole.log('Senna scanned loading css class ' + loadingCssClass);\n\t\t}\n\t}\n\n\t/**\n\t * Maybe sets app update scroll position from\n\t * `data-senna-update-scroll-position` data attribute.\n\t */\n\tmaybeSetUpdateScrollPosition_() {\n\t\tvar updateScrollPosition = this.baseElement.getAttribute(dataAttributes.updateScrollPosition);\n\t\tif (isDefAndNotNull(updateScrollPosition)) {\n\t\t\tif (updateScrollPosition === 'false') {\n\t\t\t\tthis.app.setUpdateScrollPosition(false);\n\t\t\t} else {\n\t\t\t\tthis.app.setUpdateScrollPosition(true);\n\t\t\t}\n\t\t\tconsole.log('Senna scanned update scroll position ' + updateScrollPosition);\n\t\t}\n\t}\n\n\t/**\n\t * Queries elements from document and returns an array of elements.\n\t * @param {!string} selector\n\t * @return {array.<Element>}\n\t */\n\tquerySelectorAllAsArray_(selector) {\n\t\treturn Array.prototype.slice.call(globals.document.querySelectorAll(selector));\n\t}\n\n\t/**\n\t * Updates element id if handled as special surface element. Some surfaces\n\t * are slightly different from others, like when threating <code>body</code>\n\t * as surface.\n\t * @param {Element} element\n\t */\n\tupdateElementIdIfSpecialSurface_(element) {\n\t\tif (!element.id && element === globals.document.body) {\n\t\t\telement.id = 'senna_surface_' + getUid();\n\t\t}\n\t}\n\n\t/**\n\t * Sets the base element.\n\t * @param {Element} baseElement\n\t */\n\tsetBaseElement(baseElement) {\n\t\tthis.baseElement = baseElement;\n\t}\n\n}\n\nexport default AppDataAttributeHandler;\n","'use strict';\n\nimport globals from '../globals/globals';\nimport AppDataAttributeHandler from './AppDataAttributeHandler';\n\n/**\n * Data attribute handler.\n * @type {AppDataAttributeHandler}\n */\nvar dataAttributeHandler = new AppDataAttributeHandler();\n\nglobals.document.addEventListener('DOMContentLoaded', function() {\n\tdataAttributeHandler.setBaseElement(globals.document.body);\n\tdataAttributeHandler.handle();\n});\n\nexport default dataAttributeHandler;","/**\n * @returns String containing the current senna version\n */\n\nconst version = '<%= version %>';\n\nexport default version;"],"names":["isDef","val","undefined","isDefAndNotNull","isNull","isDocument","nodeType","isFunction","isObject","type","isString","String","isServerSide","options","checkEnv","serverSide","process","browser","env","NODE_ENV","array","arr1","arr2","length","i","arr","output","Array","isArray","flatten","push","obj","indexOf","rv","removeAt","prototype","splice","call","start","end","sliced","async","throwException","exception","nextTick","run","callback","context","workQueueScheduled_","processWorkQueue","workQueue_","WorkItem_","workItems","workItem","fn","scope","e","cb","bind","wrapCallback_","setImmediate_","setImmediate","getSetImmediateEmulator_","Channel","MessageChannel","window","postMessage","addEventListener","iframe","document","createElement","style","display","src","title","documentElement","appendChild","win","contentWindow","doc","open","write","close","message","Math","random","origin","location","protocol","host","onmessage","data","port1","port2","channel","head","tail","next","script","onreadystatechange","parentNode","removeChild","Disposable","disposed_","disposeInternal","object","target","key","source","args","name","parts","split","reduce","part","mappedObj","keys","Object","obj1","obj2","keys1","keys2","string","str1","str2","test1","toLowerCase","test2","str","replace","x","floor","toString","abs","Date","now","hash","len","charCodeAt","value","substring","METAL_DATA","domData","element","initialValue","EventHandle","emitter","event","listener","emitter_","event_","listener_","removeListener","isDisposed","singleArray_","EventEmitter","events_","listenerHandlers_","shouldUseFacade_","holder","handler","defaultListener","validateListener_","events","toEventsArray_","addSingleListener_","runListenerHandlers_","addHandler_","getShouldUseFacade","facade","preventedDefault","listeners","getRawListeners_","slice","arguments","runListeners_","buildFacade_","directListeners","toArray","concat","map","amount","many_","self","handlerInternal","apply","listenerObj","removeMatchingListenerObjs_","addListener","many","listenerObjs","finalListeners","matchesListener_","off","handlers","defaultListeners","default","j","shouldUseFacade","TypeError","EventEmitterProxy","originEmitter","targetEmitter","blacklist","whitelist","blacklist_","originEmitter_","pendingEvents_","proxiedEvents_","targetEmitter_","whitelist_","startProxy_","on","removeListeners_","emit","shouldProxyEvent_","tryToAddListener_","forEach","proxyEvent","onListener","addListener_","emitOnTarget_","EventHandler","eventHandles_","DomDelegatedEventHandle","selector","selector_","delegating","get","selectors","remove","DomEventHandle","capture","capture_","removeEventListener","elementsByTag_","supportCache_","customEvents","LAST_CONTAINER","USE_CAPTURE","addClasses","elements","classes","addClassesWithNative_","className","classList","add","addClassesWithoutNative_","elementClassName","classesToAppend","addElementListener_","eventName","addSelectorListener_","delegatingData","addToArr_","attachDelegateEvent_","handleDelegateEvent_","closest","match","append","parent","child","buildFragment","isNodeListLike","childArr","htmlString","tempDiv","innerHTML","firstChild","fragment","createDocumentFragment","contains","element1","element2","delegate","selectorOrTarget","customConfig","originalEvent","defaultListener_","isAbleToInteractWith_","node","eventObj","button","matchesSelector","tagName","disabled","item","exitDocument","ret","container","currentTarget","defFns","triggerDelegatedListeners_","triggerDefaultDelegatedListeners_","delegateTarget","p","Element","m","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","matchFallback_","nodes","querySelectorAll","normalizeDelegateEvent_","stopPropagation","stopPropagation_","stopImmediatePropagation","stopImmediatePropagation_","once","domEventHandle","registerCustomEvent","removeChildren","removeClasses","removeClassesWithNative_","removeClassesWithoutNative_","trim","stopped","stoppedImmediate","supportsEvent","tag","hasOwnProperty","defaultPrevented","defaultFns","currElement","limit","triggerElementListeners_","triggerSelectorListeners_","lastContainer","triggerListeners_","DomEventEmitterProxy","isDelegateEvent_","index","substr","babelHelpers.get","isSupportedDomEvent_","features","animationEventName_","checkAnimationEventName_","prefixes","typeTitleCase","replaceInterval","toUpperCase","suffixes","animationElement_","attrOrderChange_","originalContent","globalEval","text","appendFn","defaultFn","runFile","scripts","runScriptsInOrder","runScript","globalEvalStyles","href","link","rel","runStyle","styles","loadCount","registerEvents","mouseEventMap","related","relatedTarget","customType","animationEventMap","eventType","checkAnimationEventName","globals","compatibilityModeData_","uniqueIdCounter_","UID_PROPERTY","abstractMethod","Error","disableCompatibilityMode","enableCompatibilityMode","getCompatibilityModeData","__METAL_COMPATIBILITY__","getFirstTruthy_","a","b","getFunctionName","getStaticProperty","ctor","propertyName","mergeFn","mergedName","merged","__proto__","isPrototypeOf","Function","getUid","noInheritance","id","identityFunction","returnValue","isBoolean","isDocumentFragment","isElement","isNumber","isWindow","isPromise","then","nullFunction","parseFromAnchor","opt_uri","test","hostname","password","pathname","port","search","username","parse","URL","url","create","MultiMap","values","size","names","JSON","stringify","set","TreeNode","value_","parent_","children_","setParent","current","getParent","ancestors","getChildren","EMPTY_ARRAY","depth","root","getChildCount","opt_preorderFn","opt_postorderFn","traverse","assertChildHasNoParent","parseFn_","Uri","maybeAddProtocolAndHostname_","multimap","getAll","addParameterValue","ensureQueryInitialized_","query","param","urlDecode","getHostname","getPort","HOSTNAME_PLACEHOLDER","getHost","getProtocol","querystring","getParameterNames","getParameterValues","encodeURIComponent","setParameterValue","RANDOM_PARAM","getRandomString","DEFAULT_PROTOCOL","charAt","removeParameter","getPathname","getSearch","getHash","parseFn","basePath","paths","path","join","decodeURIComponent","isSecure","utils","attributes","attribute","setAttribute","delay","debounced","cancelDebounce","setTimeout","getCurrentBrowserPathWithoutHash","offsetLeft","offsetTop","offsetParent","uri","currentBrowserPath","getUrlPathWithoutHash","getUrlPath","matchUserAgent","isOpera","isEdge","isIe","isChrome","navigator","userAgent","history","pushState","err","error","removeAttribute","referrer","defineProperty","REGEX","convertMatchesToObj","convertTokensToRegex","tokens","regex","core","escape","encloseNonCapturingGroup","pattern","repeat","prefix","optional","partial","RegExp","makeTrailingSlashOptional","routeOrTokens","route","unnamedCount","currPath","exec","paramPattern","unnamedPattern","modifier","toRegex","extractData","paramIndex","Route","parsedData_","buildParsedData_","Cacheable","cache","cacheable","content","clearCache","Screen","makeId_","metas","log","state","surfaces","sId","activeChild","runScriptsInElement","Promise","resolve","transitions","surface","deferred","show","all","isImplementedBy","Surface","defaultChild","transitionFn","getChild","DEFAULT","maybeWrapContentAsDefault_","screenId","opt_content","createChild","transition","getElement","getElementById","addContent","from","to","transitionEnd","catch","defaultTransition","NavigationStrategy","App","activeScreen","activePath","allowPreventNavigate","browserPathBeforeNavigate","captureScrollPositionFromScrollEvent","defaultTitle","formSelector","ignoreQueryStringFromRoutePath","linkSelector","loadingCssClass","nativeScrollRestorationSupported","navigationStrategy","IMMEDIATE","isNavigationPending","pendingNavigate","popstateScrollLeft","popstateScrollTop","redirectPath","routes","scheduledNavigationQueue","screens","skipLoadPopstate","updateScrollPosition","appEventHandlers_","debounce","onScroll_","onLoad_","onPopstate_","onStartNavigate_","onBeforeNavigate_","onBeforeNavigateDefault_","onBeforeUnloadDefault_","setLinkSelector","setFormSelector","maybeOverloadBeforeUnload_","getId","isWebUri","isLinkSameOrigin_","isSameBasePath_","isCurrentBrowserPath","findRoute","removeScreen","screen","getHandler","clearScreensCache","formEventHandler_","linkEventHandler_","removeAllListeners","navigate","getCurrentBrowserPath","opt_replaceHistory","reject","stopPendingNavigate_","nextScreen","createScreenInstance","finalize","scheduledNavigation","shift","maybeNavigate_","maybePreventDeactivate_","maybePreventActivate_","load","SCHEDULE_LAST","deactivate","prepareNavigateHistory_","prepareNavigateSurfaces_","extractParams","evaluateStyles","flip","evaluateScripts","maybeUpdateScrollPositionState_","syncScrollPositionSyncThenAsync_","finalizeNavigate_","reason","handleNavigateError_","getRoutePath","activate","isCacheable","capturedFormElement","capturedFormButtonElement","matchesPath","getIgnoreQueryStringFromRoutePath","getUrlPathWithoutHashAndSearch","stack","hostUri","locationHostUri","winner","switchScrollPositionRace","scrollTo","scrollLeft","scrollTop","nativeScrollRestoration_","scrollRestoration","mixin","canNavigate","isNavigationScheduled","maybeScheduleNavigation_","preventDefault","navigateFailed","isScheduledNavigation","onbeforeunload","_onbeforeunload","_overloaded","beforeActivate","prevent","beforeDeactivate","anchorElement","getNodeOffset","saveHistoryCurrentPageScrollPosition_","opt_event","isHtml5HistorySupported","form","replaceHistory","func","altKey","ctrlKey","metaKey","shiftKey","method","buttonSelector","activeElement","querySelector","action","maybeRepositionScrollToHashedAnchor","reloadPage","senna","lockHistoryScrollPosition_","setReferrer","setHostname","setPort","pageYOffset","pageXOffset","maybeDisableNativeScrollRestoration","endNavigatePayload","maybeRestoreNativeScrollRestoration","doNavigate_","getTitle","getDefaultTitle","beforeUpdateHistoryPath","historyState","maybeRestoreRedirectPathHash_","updateHistory_","beforeUpdateHistoryState","params","surfaceContent","getSurfaceContent","reload","surfaceId","dispose","replaceState","removePathTrailingSlash","onDocSubmitDelegate_","onDocClickDelegate_","sync","titleNode","errors","FAILED_TO_FETCH","INVALID_STATUS","REQUEST_ERROR","REQUEST_TIMEOUT","REQUEST_PREMATURE_TERMINATION","RequestScreen","httpHeaders","httpMethod","GET","request","timeout","status","isValidResponseStatusCode","invalidStatus","statusCode","getRequestPath","setProtocol","isIeOrEdge","makeUnique","getRequest","requestPath","responseUrl","maybeExtractResponseUrlFromRequest","removeUnique","formElement","submittedButtonElement","formData","FormData","maybeAppendSubmitButtonValue_","getCache","body","headers","Headers","header","addSafariXHRPolyfill","getFormData","POST","formatLoadPath","Request","setRequest","race","fetch","removeSafariXHRPolyfill","assertValidResponseStatusCode","resp","clone","addCache","_","requestError","requestPrematureTermination","X_REQUEST_URL_HEADER","isSafari","inputs","input","files","HtmlScreen","metaTagsSelector","titleSelector","releaseVirtualDocument","pendingStyles","virtualDocument","copyNodeAttributesFromContent_","newStyle","isTemporaryStyle","stylesTemporary","styleInDoc","insertBefore","nextSibling","bodySurface","placeholder","tempNode","createRange","createContextualFragment","clearNodeAttributes","copyNodeAttributes","disposePendingStyles","removeElementsFromDocument","evaluateTrackedScripts","evaluateTrackedResources_","scriptsTemporary","scriptsPermanent","evaluateTrackedStyles","runStylesInElement","stylesPermanent","appendStyleIntoDocument_","resourcesInVirtual","virtualQuerySelectorAll_","favicon","resourcesInDocument","querySelectorAll_","runFaviconInElement_","evaluatorFn","selectorTemporary","selectorPermanent","opt_appendResourceFn","tracked","temporariesInDoc","permanentsInDoc","resource","resourceKey","getResourceKey_","permanentResourcesInDoc","frag","evaluateFavicon_","updateMetaTags_","currentMetaNodes","metasFromVirtualDocument","meta","allocateVirtualDocumentForContent","resolveTitleFromVirtualDocument","resolveMetaTagsFromVirtualDocument","assertSameBodyIdInVirtualDocument","makeTemporaryStylesHrefsUnique_","replaceStyleAndMakeUnique_","replaceChild","setElementWithRandomHref","setTitle","textContent","setMetas","ignoreFavicon","AppDataAttributeHandler","app","baseElement","hasAttribute","dataAttributes","maybeAddRoutes_","maybeAddSurfaces_","maybeSetBasePath_","maybeSetLinkSelector_","maybeSetLoadingCssClass_","maybeSetUpdateScrollPosition_","maybeDispatch_","routesSelector","querySelectorAllAsArray_","maybeParseLinkRoute_","hasRoutes","addRoutes","surfacesSelector","surfaceElement","updateElementIdIfSpecialSurface_","addSurfaces","dispatch","maybeParseLinkRoutePath_","maybeParseLinkRouteHandler_","getPath","getAttribute","getObjectByName","setBasePath","setLoadingCssClass","setUpdateScrollPosition","dataAttributeHandler","setBaseElement","handle","version"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}