{"version":3,"sources":["RequestScreen.js"],"names":["RequestScreen","cacheable","httpHeaders","httpMethod","GET","request","timeout","status","isValidResponseStatusCode","error","Error","INVALID_STATUS","invalidStatus","statusCode","path","redirectPath","getRequestPath","state","senna","form","uri","setHostname","window","location","hostname","setProtocol","protocol","port","setPort","isIeOrEdge","makeUnique","toString","getRequest","requestPath","url","responseUrl","maybeExtractResponseUrlFromRequest","removeUnique","getUrlPath","formElement","submittedButtonElement","formData","FormData","maybeAppendSubmitButtonValue_","cache","getCache","Promise","resolve","body","headers","Headers","Object","keys","forEach","set","header","capturedFormElement","addSafariXHRPolyfill","getFormData","capturedFormButtonElement","POST","append","formatLoadPath","Request","credentials","method","mode","redirect","setRequest","race","fetch","then","removeSafariXHRPolyfill","assertValidResponseStatusCode","resp","clone","text","isCacheable","addCache","_","reject","setTimeout","REQUEST_TIMEOUT","catch","reason","message","REQUEST_ERROR","requestError","REQUEST_PREMATURE_TERMINATION","requestPrematureTermination","TypeError","name","value","get","X_REQUEST_URL_HEADER","isSafari","inputs","querySelectorAll","index","length","input","files","setAttribute","removeAttribute","toLowerCase"],"mappings":"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","file":"src/screen/RequestScreen.js","sourcesContent":["'use strict';\n\nimport { isDefAndNotNull } from 'metal';\nimport errors from '../errors/errors';\nimport utils from '../utils/utils';\nimport globals from '../globals/globals';\nimport Screen from './Screen';\nimport Uri from 'metal-uri';\n\nclass RequestScreen extends Screen {\n\n\t/**\n\t * Request screen abstract class to perform io operations on descendant\n\t * screens.\n\t * @constructor\n\t * @extends {Screen}\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\t/**\n\t\t * @inheritDoc\n\t\t * @default true\n\t\t */\n\t\tthis.cacheable = true;\n\n\t\t/**\n\t\t * Holds default http headers to set on request.\n\t\t * @type {?Object=}\n\t\t * @default {\n\t\t *   'X-PJAX': 'true',\n\t\t *   'X-Requested-With': 'XMLHttpRequest'\n\t\t * }\n\t\t * @protected\n\t\t */\n\t\tthis.httpHeaders = {\n\t\t\t'X-PJAX': 'true',\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\n\t\t};\n\n\t\t/**\n\t\t * Holds default http method to perform the request.\n\t\t * @type {!string}\n\t\t * @default RequestScreen.GET\n\t\t * @protected\n\t\t */\n\t\tthis.httpMethod = RequestScreen.GET;\n\n\t\t/**\n\t\t * Holds the XHR object responsible for the request.\n\t\t * @type {XMLHttpRequest}\n\t\t * @default null\n\t\t * @protected\n\t\t */\n\t\tthis.request = null;\n\n\t\t/**\n\t\t * Holds the request timeout in milliseconds.\n\t\t * @type {!number}\n\t\t * @default 30000\n\t\t * @protected\n\t\t */\n\t\tthis.timeout = 30000;\n\t}\n\n\t/**\n\t * Asserts that response status code is valid.\n\t * @param {number} status\n\t * @protected\n\t */\n\tassertValidResponseStatusCode(status) {\n\t\tif (!this.isValidResponseStatusCode(status)) {\n\t\t\tvar error = new Error(errors.INVALID_STATUS);\n\t\t\terror.invalidStatus = true;\n\t\t\terror.statusCode = status;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryPath(path) {\n\t\tvar redirectPath = this.getRequestPath();\n\t\tif (redirectPath && redirectPath !== path) {\n\t\t\treturn redirectPath;\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tbeforeUpdateHistoryState(state) {\n\t\t// If state is ours and navigate to post-without-redirect-get set\n\t\t// history state to null, that way Senna will reload the page on\n\t\t// popstate since it cannot predict post data.\n\t\tif (state.senna && state.form && state.redirectPath === state.path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn state;\n\t}\n\n\t/**\n\t * Formats load path before invoking ajax call.\n\t * @param {string} path\n\t * @return {string} Formatted path;\n\t * @protected\n\t */\n\tformatLoadPath(path) {\n\t\tvar uri = new Uri(path);\n\n\t\turi.setHostname(globals.window.location.hostname);\n\t\turi.setProtocol(globals.window.location.protocol);\n\n\t\tif (globals.window.location.port) {\n\t\t\turi.setPort(globals.window.location.port);\n\t\t}\n\n\t\tif (utils.isIeOrEdge() && this.httpMethod === RequestScreen.GET) {\n\t\t\treturn uri.makeUnique().toString();\n\t\t}\n\n\t\treturn uri.toString();\n\t}\n\n\t/**\n\t * Gets the http headers.\n\t * @return {?Object=}\n\t */\n\tgetHttpHeaders() {\n\t\treturn this.httpHeaders;\n\t}\n\n\t/**\n\t * Gets the http method.\n\t * @return {!string}\n\t */\n\tgetHttpMethod() {\n\t\treturn this.httpMethod;\n\t}\n\n\t/**\n\t * Gets request path.\n\t * @return {string=}\n\t */\n\tgetRequestPath() {\n\t\tvar request = this.getRequest();\n\t\tif (request) {\n\t\t\tvar requestPath = request.url;\n\t\t\tvar responseUrl = this.maybeExtractResponseUrlFromRequest(request);\n\t\t\tif (responseUrl) {\n\t\t\t\trequestPath = responseUrl;\n\t\t\t}\n\t\t\tif (utils.isIeOrEdge() && this.httpMethod === RequestScreen.GET) {\n\t\t\t\trequestPath = new Uri(requestPath).removeUnique().toString();\n\t\t\t}\n\t\t\treturn utils.getUrlPath(requestPath);\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the request object.\n\t * @return {?Object}\n\t */\n\tgetRequest() {\n\t\treturn this.request;\n\t}\n\n\t/**\n\t * Gets the request timeout.\n\t * @return {!number}\n\t */\n\tgetTimeout() {\n\t\treturn this.timeout;\n\t}\n\n\t/**\n\t * Checks if response succeeded. Any status code 2xx or 3xx is considered\n\t * valid.\n\t * @param {number} statusCode\n\t */\n\tisValidResponseStatusCode(statusCode) {\n\t\treturn statusCode >= 200 && statusCode <= 399;\n\t}\n\n  /**\n   * Returns the form data\n   * This method can be extended in order to have a custom implementation of the form params\n   * @param {!Element} formElement\n   * @param {!Element} submittedButtonElement\n   * @return {!FormData}\n   */\n\tgetFormData(formElement, submittedButtonElement) {\n    let formData = new FormData(formElement);\n    this.maybeAppendSubmitButtonValue_(formData, submittedButtonElement);\n    return formData;\n  }\n\n\t/**\n\t * @inheritDoc\n\t */\n\tload(path) {\n\t\tconst cache = this.getCache();\n\t\tif (isDefAndNotNull(cache)) {\n\t\t\treturn Promise.resolve(cache);\n\t\t}\n\t\tlet body = null;\n\t\tlet httpMethod = this.httpMethod;\n\n\t\tconst headers = new Headers();\n\n\t\tObject.keys(this.httpHeaders).forEach(header => {\n\t\t\theaders.set(header, this.httpHeaders[header]);\n\t\t});\n\n\t\tif (globals.capturedFormElement) {\n\t\t\tthis.addSafariXHRPolyfill();\n\t\t\tbody = this.getFormData(globals.capturedFormElement, globals.capturedFormButtonElement);\n\t\t\thttpMethod = RequestScreen.POST;\n\t\t\tif (utils.isIeOrEdge()) {\n\t\t\t\theaders.append('If-None-Match', '\"0\"');\n\t\t\t}\n\t\t}\n\n\t\tconst requestPath = this.formatLoadPath(path);\n\n\t\tconst request = new Request(requestPath, {\n\t\t\tbody: body,\n\t\t\tcredentials: 'include',\n\t\t\theaders: headers,\n\t\t\tmethod: httpMethod,\n\t\t\tmode: 'cors',\n\t\t\tredirect: 'follow'\n\t\t});\n\n\t\tthis.setRequest(request);\n\n\t\treturn Promise.race([\n\t\t\tfetch(request)\n\t\t\t\t.then(resp => {\n\t\t\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\t\t\tthis.assertValidResponseStatusCode(resp.status);\n\n\t\t\t\t\treturn resp.clone().text();\n\t\t\t\t})\n\t\t\t\t.then(text => {\n\t\t\t\t\tif (httpMethod === RequestScreen.GET && this.isCacheable()) {\n\t\t\t\t\t\tthis.addCache(text);\n\t\t\t\t\t}\n\t\t\t\t\treturn text;\n\t\t\t\t}),\n\t\t\tnew Promise((_, reject) => {\n\t\t\t\tsetTimeout(() => reject(new Error(errors.REQUEST_TIMEOUT)) , this.timeout);\n\t\t\t})\n\t\t]).catch((reason) => {\n\t\t\tthis.removeSafariXHRPolyfill();\n\t\t\tswitch (reason.message) {\n\t\t\t\tcase errors.REQUEST_TIMEOUT:\n\t\t\t\t\treason.timeout = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase errors.REQUEST_ERROR:\n\t\t\t\t\treason.requestError = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase errors.REQUEST_PREMATURE_TERMINATION:\n\t\t\t\t\treason.requestError = true;\n\t\t\t\t\treason.requestPrematureTermination = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (reason instanceof TypeError) {\n\t\t\t\treason.requestError = true;\n\t\t\t\treason.requestPrematureTermination = true;\n\t\t\t}\n\t\t\tthrow reason;\n\t\t});\n\t}\n\n\t/**\n\t * Adds aditional data to the body of the request in case a submit button\n\t * is captured during form submission.\n\t * @param {!FormData} body The FormData containing the request body.\n   * @param {!Element} submittedButtonElement\n   * @protected\n\t */\n\tmaybeAppendSubmitButtonValue_(formData, submittedButtonElement) {\n\t\tif (submittedButtonElement && submittedButtonElement.name) {\n      formData.append(submittedButtonElement.name, submittedButtonElement.value);\n\t\t}\n\t}\n\n\t/**\n\t * The following method tries to extract the response url value by checking\n\t * the custom response header 'X-Request-URL' if proper value is not present\n\t * in XMLHttpRequest. The value of responseURL will be the final URL\n\t * obtained after any redirects. Internet Explorer, Edge and Safari <= 7\n\t * does not yet support the feature. For more information see:\n\t * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL\n\t * https://xhr.spec.whatwg.org/#the-responseurl-attribute\n\t * @param {XMLHttpRequest} request\n\t * @return {?string} Response url best match.\n\t */\n\tmaybeExtractResponseUrlFromRequest(request) {\n\t\treturn request.headers.get(RequestScreen.X_REQUEST_URL_HEADER);\n\t}\n\n\t/**\n\t * This function sets attribute data-safari-temp-disabled to\n\t * true and sets disable attribute of an input type=\"file\" tag\n\t * is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1\n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\taddSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && utils.isSafari()) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"]:not([disabled])');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tlet input = inputs[index];\n\t\t\t\tif (input.files.length > 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinput.setAttribute('data-safari-temp-disabled', 'true');\n\t\t\t\tinput.setAttribute('disabled', '');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function remove attribute data-safari-temp-disabled and disable attribute\n\t * of an input type=\"file\" tag is used as a polyfill for iOS 11.3 Safari / macOS Safari 11.1\n\t * empty <input type=\"file\"> XHR bug.\n\t * https://github.com/rails/rails/issues/32440\n\t * https://bugs.webkit.org/show_bug.cgi?id=184490\n\t */\n\tremoveSafariXHRPolyfill() {\n\t\tif (globals.capturedFormElement && utils.isSafari()) {\n\t\t\tlet inputs = globals.capturedFormElement.querySelectorAll('input[type=\"file\"][data-safari-temp-disabled]');\n\t\t\tfor (let index = 0; index < inputs.length; index++) {\n\t\t\t\tconst input = inputs[index];\n\t\t\t\tinput.removeAttribute('data-safari-temp-disabled');\n\t\t\t\tinput.removeAttribute('disabled');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the http headers.\n\t * @param {?Object=} httpHeaders\n\t */\n\tsetHttpHeaders(httpHeaders) {\n\t\tthis.httpHeaders = httpHeaders;\n\t}\n\n\t/**\n\t * Sets the http method.\n\t * @param {!string} httpMethod\n\t */\n\tsetHttpMethod(httpMethod) {\n\t\tthis.httpMethod = httpMethod.toLowerCase();\n\t}\n\n\t/**\n\t * Sets the request object.\n\t * @param {?Object} request\n\t */\n\tsetRequest(request) {\n\t\tthis.request = request;\n\t}\n\n\t/**\n\t * Sets the request timeout in milliseconds.\n\t * @param {!number} timeout\n\t */\n\tsetTimeout(timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n}\n\n/**\n * Holds value for method get.\n * @type {string}\n * @default 'get'\n * @static\n */\nRequestScreen.GET = 'get';\n\n/**\n * Holds value for method post.\n * @type {string}\n * @default 'post'\n * @static\n */\nRequestScreen.POST = 'post';\n\n/**\n * Fallback http header to retrieve response request url.\n * @type {string}\n * @default 'X-Request-URL'\n * @static\n */\nRequestScreen.X_REQUEST_URL_HEADER = 'X-Request-URL';\n\nexport default RequestScreen;\n"],"sourceRoot":"/source/"}